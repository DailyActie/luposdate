/* Generated By:JJTree&JavaCC: Do not edit this line. StreamSPARQL1_1Parser.java */
package lupos.sparql1_1;
import java.io.*;
import java.util.HashSet;

public class StreamSPARQL1_1Parser/*@bgen(jjtree)*/implements StreamSPARQL1_1ParserTreeConstants, StreamSPARQL1_1ParserConstants {/*@bgen(jjtree)*/
  protected JJTStreamSPARQL1_1ParserState jjtree = new JJTStreamSPARQL1_1ParserState();public static void main(String args [])
  {
    System.out.println("enter query...");
    StreamSPARQL1_1Parser parser = new StreamSPARQL1_1Parser(System.in);

    try
    {
        parser.expr();
        System.out.println("Result:");
                        ((SimpleNode) parser.jjtree.rootNode()).dump("|");
} catch(Exception e)
{
 System.out.println(e);
 e.printStackTrace();
}
  }

  public static SimpleNode parse(String query) throws ParseException
  {
    StreamSPARQL1_1Parser parser = new StreamSPARQL1_1Parser(new StringReader(query));
    switch (parser.expr())
    {
      default :
                try {
                        return ((SimpleNode) parser.jjtree.rootNode());
                } catch(Exception e) {
                        return null;
                }
      case 0 : return null;
      case - 1 : return null;
    }
  }

  protected HashSet < String > declaredPrefixes = new HashSet < String > ();

  final public void GroupGraphPatternsAndRDFTermsEOF() throws ParseException {
 /*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        GroupGraphPattern();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case BLANK_NODE_LABEL:
        case VAR:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
        case NIL:
        case ANON:
        case 105:
        case 118:
        case 179:
        case 180:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        VarOrTerm();
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void N3GroupGraphPatternsAndRDFTermsEOF() throws ParseException {
 /*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        N3GroupConstraint();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case BLANK_NODE_LABEL:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
        case NIL:
        case ANON:
        case 105:
        case 118:
        case 179:
        case 180:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        GraphTerm();
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void N3GroupConstraint() throws ParseException {
 /*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(1);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case BLANK_NODE_LABEL:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
        case NIL:
        case ANON:
        case 105:
        case 118:
        case 179:
        case 180:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        N3TriplesSet();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
          jj_consume_token(2);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
      }
      jj_consume_token(3);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void N3TriplesSet() throws ParseException {
                               /*@bgen(jjtree) TripleSet */
  ASTTripleSet jjtn000 = new ASTTripleSet(JJTTRIPLESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      GraphTerm();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        URI();
        break;
      case BLANK_NODE_LABEL:
      case ANON:
        BlankNode();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      GraphTerm();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConstraintEOF() throws ParseException {
    Constraint();
    jj_consume_token(0);
  }

  final public void VarOrTermEOF() throws ParseException {
    VarOrTerm();
    jj_consume_token(0);
  }

  final public void GraphTermEOF() throws ParseException {
    GraphTerm();
    jj_consume_token(0);
  }

  final public void VerbEOF() throws ParseException {
    Verb();
    jj_consume_token(0);
  }

  final public void VerbWithoutVarEOF() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      URI();
      break;
    case 4:
       ASTAVerbType jjtn001 = new ASTAVerbType(JJTAVERBTYPE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(4);
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
  }

  final public void GroupGraphPatternEOF() throws ParseException {
    GroupGraphPattern();
    jj_consume_token(0);
  }

  final public void VarEOF() throws ParseException {
    Var();
    jj_consume_token(0);
  }

  final public void SourceSelectorEOF() throws ParseException {
    SourceSelector();
    jj_consume_token(0);
  }

  final public void OrderConditionEOF() throws ParseException {
    OrderCondition();
    jj_consume_token(0);
  }

  final public void VarOrBlankNodeOrIRIrefEOF() throws ParseException {
    VarOrBlankNodeOrIRIref();
    jj_consume_token(0);
  }

  final public void VarOrURIEOF() throws ParseException {
    VarOrURI();
    jj_consume_token(0);
  }

  final public int expr() throws ParseException {
    QueryOrUpdate();
    jj_consume_token(0);
      {if (true) return 1;}
    throw new Error("Missing return statement in function");
  }

  final public void QueryOrUpdate() throws ParseException {
 /*@bgen(jjtree) Query */
  ASTQuery jjtn000 = new ASTQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Prologue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
      case 48:
      case 50:
      case 51:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          SelectQuery();
          break;
        case 48:
          ConstructQuery();
          break;
        case 50:
          DescribeQuery();
          break;
        case 51:
          AskQuery();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        BindingsClause();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//1
  final public void QueryUnit() throws ParseException {
    Query();
  }

//2
  final public void Query() throws ParseException {
 /*@bgen(jjtree) Query */
  ASTQuery jjtn000 = new ASTQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Prologue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        SelectQuery();
        break;
      case 48:
        ConstructQuery();
        break;
      case 50:
        DescribeQuery();
        break;
      case 51:
        AskQuery();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      BindingsClause();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//3
  final public void UpdateUnit() throws ParseException {
    Update();
  }

//4
  final public void Prologue() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
      case 40:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        BaseDecl();
        break;
      case 40:
        PrefixDecl();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//5
  final public void BaseDecl() throws ParseException {
 /*@bgen(jjtree) BaseDecl */
  ASTBaseDecl jjtn000 = new ASTBaseDecl(JJTBASEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(39);
      QuotedURIref();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//6
  final public void PrefixDecl() throws ParseException {
 /*@bgen(jjtree) PrefixDecl */
  ASTPrefixDecl jjtn000 = new ASTPrefixDecl(JJTPREFIXDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token qName;
    try {
      jj_consume_token(40);
      qName = jj_consume_token(PNAME_NS);
      QuotedURIref();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    String prefix = qName.image.substring(0, qName.image.indexOf(":"));
    jjtn000.setPrefix(prefix);
    declaredPrefixes.add(prefix);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//7
  final public void SelectQuery() throws ParseException {
 /*@bgen(jjtree) SelectQuery */
  ASTSelectQuery jjtn000 = new ASTSelectQuery(JJTSELECTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectClause(jjtn000);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        STREAM();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      WhereClause();
      SolutionModifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//8
  final public void SubSelect() throws ParseException {
 /*@bgen(jjtree) SelectQuery */
  ASTSelectQuery jjtn000 = new ASTSelectQuery(JJTSELECTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectClause(jjtn000);
      WhereClause();
      SolutionModifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//9
  final public void SelectClause(ASTSelectQuery select) throws ParseException {
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
    case 43:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        select.setDistinct(true);
        break;
      case 43:
        jj_consume_token(43);
        select.setReduced(true);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case 45:
      label_7:
      while (true) {
        if (jj_2_1(2)) {
          Var();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 45:
            As();
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case 45:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
      }
      break;
    case 44:
      jj_consume_token(44);
          select.setSelectAll(true);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void As() throws ParseException {
 /*@bgen(jjtree) As */
  ASTAs jjtn000 = new ASTAs(JJTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(45);
      Expression();
      jj_consume_token(46);
      Var();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//10
  final public void ConstructQuery() throws ParseException {
 /*@bgen(jjtree) ConstructQuery */
  ASTConstructQuery jjtn000 = new ASTConstructQuery(JJTCONSTRUCTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(48);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        ConstructTemplate();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          STREAM();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        WhereClause();
        SolutionModifier();
        break;
      case 49:
      case 52:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          STREAM();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        ConstructQueryWherePart();
        SolutionModifier();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConstructQueryWherePart() throws ParseException {
 /*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(49);
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 45:
      case 100:
      case 105:
      case 118:
      case 179:
      case 180:
        TriplesTemplate();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(3);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//11
  final public void DescribeQuery() throws ParseException {
 /*@bgen(jjtree) DescribeQuery */
  ASTDescribeQuery jjtn000 = new ASTDescribeQuery(JJTDESCRIBEQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(50);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case VAR:
        label_8:
        while (true) {
          VarOrIRIref();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IRI_REF:
          case PNAME_NS:
          case PNAME_LN:
          case VAR:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_8;
          }
        }
        break;
      case 44:
        jj_consume_token(44);
        jjtn000.setDescribeAll(true);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        STREAM();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 49:
        WhereClause();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      SolutionModifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//12
  final public void AskQuery() throws ParseException {
 /*@bgen(jjtree) AskQuery */
  ASTAskQuery jjtn000 = new ASTAskQuery(JJTASKQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(51);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        STREAM();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      WhereClause();
      SolutionModifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// added:// Determines how often an intermediate result is computed:// DURATION 5000 means every 5000 milliseconds, i.e., every 5 seconds// TRIPLES 10 means every time after 10 triples have been read// Default is STREAM INTERMEDIATERESULT TRIPLES 1, i.e., the intermediate result is// computed every time after reading the next triple from the stream  final public void STREAM() throws ParseException {
                      /*@bgen(jjtree) Stream */
                      ASTStream jjtn000 = new ASTStream(JJTSTREAM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(52);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          jj_consume_token(54);
                     jjtn000.setDuration();
          break;
        case 55:
          jj_consume_token(55);
                                                          jjtn000.setTriples();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = jj_consume_token(INTEGER);
                     jjtn000.setValue(Integer.parseInt(t.image));
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// START and END contain conditions when the window is started or ended// Default is WINDOW SLIDINGTRIPLES INFINITY START true() END false()  final public void WINDOW() throws ParseException {
                      /*@bgen(jjtree) Window */
  ASTWindow jjtn000 = new ASTWindow(JJTWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(56);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
        TYPE();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
                              ASTStart jjtn001 = new ASTStart(JJTSTART);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(57);
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
        }
        Constraint();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
                                                             ASTEnd jjtn002 = new ASTEnd(JJTEND);
                                                             boolean jjtc002 = true;
                                                             jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(58);
        } finally {
                                                             if (jjtc002) {
                                                               jjtree.closeNodeScope(jjtn002, true);
                                                             }
        }
        Constraint();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      GroupGraphPattern();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// to do: add support for tumbling window, landmark window, ...  final public void TYPE() throws ParseException {
                  /*@bgen(jjtree) Type */
                  ASTType jjtn000 = new ASTType(JJTTYPE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(59);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
        jj_consume_token(60);
                            jjtn000.setDuration();
        break;
      case 61:
        jj_consume_token(61);
                           jjtn000.setTriples();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(INTEGER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.setValue(Integer.parseInt(t.image));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//13
  final public void DatasetClause() throws ParseException {
    jj_consume_token(62);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      DefaultGraphClause();
      break;
    case 63:
      NamedGraphClause();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//14
  final public void DefaultGraphClause() throws ParseException {
 /*@bgen(jjtree) DefaultGraph */
  ASTDefaultGraph jjtn000 = new ASTDefaultGraph(JJTDEFAULTGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SourceSelector();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//15
  final public void NamedGraphClause() throws ParseException {
 /*@bgen(jjtree) NamedGraph */
  ASTNamedGraph jjtn000 = new ASTNamedGraph(JJTNAMEDGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(63);
      SourceSelector();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//16
  final public void SourceSelector() throws ParseException {
    IRIref();
  }

//17
  final public void WhereClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    GroupGraphPattern();
  }

//18
  final public void SolutionModifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
      GroupClause();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      HavingClause();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      OrderClause();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 70:
    case 71:
      LimitOffsetClauses();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

//19
  final public void GroupClause() throws ParseException {
 /*@bgen(jjtree) Group */
  ASTGroup jjtn000 = new ASTGroup(JJTGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(64);
      jj_consume_token(65);
      label_9:
      while (true) {
        GroupCondition();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR:
        case 45:
        case 117:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 166:
        case 167:
        case 168:
        case 169:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_9;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//20
  final public void GroupCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 117:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
      BuiltInCall();
      break;
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      FunctionCall();
      break;
    case 45:
      jj_consume_token(45);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
             ASTAs jjtn001 = new ASTAs(JJTAS);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
        try {
          Var();
        } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
        } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jj_consume_token(47);
      break;
    case VAR:
      Var();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//21
  final public void HavingClause() throws ParseException {
 /*@bgen(jjtree) Having */
  ASTHaving jjtn000 = new ASTHaving(JJTHAVING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(66);
      label_10:
      while (true) {
        HavingCondition();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case 45:
        case 117:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 166:
        case 167:
        case 168:
        case 169:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_10;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//22
  final public void HavingCondition() throws ParseException {
    Constraint();
  }

//23
  final public void OrderClause() throws ParseException {
 /*@bgen(jjtree) OrderConditions */
  ASTOrderConditions jjtn000 = new ASTOrderConditions(JJTORDERCONDITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(67);
      jj_consume_token(65);
      label_11:
      while (true) {
        OrderCondition();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR:
        case 45:
        case 68:
        case 69:
        case 117:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 166:
        case 167:
        case 168:
        case 169:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_11;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//24
  final public void OrderCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
    case 69:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
          ASTAscOrder jjtn001 = new ASTAscOrder(JJTASCORDER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(68);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        break;
      case 69:
        ASTDescOrder jjtn002 = new ASTDescOrder(JJTDESCORDER);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(69);
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
        }
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      BrackettedExpression();
      break;
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case VAR:
    case 45:
    case 117:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case 45:
      case 117:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
        Constraint();
        break;
      case VAR:
        Var();
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//25
  final public void LimitOffsetClauses() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 70:
      LimitClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        OffsetClause();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      break;
    case 71:
      OffsetClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        LimitClause();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//26
  final public void LimitClause() throws ParseException {
 /*@bgen(jjtree) Limit */
  ASTLimit jjtn000 = new ASTLimit(JJTLIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token limit;
    try {
      jj_consume_token(70);
      limit = jj_consume_token(INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setLimit(limit.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//27
  final public void OffsetClause() throws ParseException {
 /*@bgen(jjtree) Offset */
  ASTOffset jjtn000 = new ASTOffset(JJTOFFSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token offset;
    try {
      jj_consume_token(71);
      offset = jj_consume_token(INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setOffset(offset.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//28
  final public void BindingsClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 72:
      InnerBindingsClause();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
  }

  final public void InnerBindingsClause() throws ParseException {
 /*@bgen(jjtree) Bindings */
  ASTBindings jjtn000 = new ASTBindings(JJTBINDINGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(72);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_12;
        }
        Var();
      }
      jj_consume_token(1);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NIL:
        case 45:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 45:
          sequenceOfBindingValues();
          break;
        case NIL:
                                    ASTNIL jjtn001 = new ASTNIL(JJTNIL);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(NIL);
          } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
          }
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(3);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void sequenceOfBindingValues() throws ParseException {
 /*@bgen(jjtree) PlusNode */
  ASTPlusNode jjtn000 = new ASTPlusNode(JJTPLUSNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(45);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
        case 73:
        case 105:
        case 118:
        case 179:
        case 180:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_14;
        }
        BindingValue();
      }
      jj_consume_token(47);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//29
  final public void BindingValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIref();
      break;
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      RDFLiteral();
      break;
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case 105:
    case 118:
      NumericLiteral();
      break;
    case 179:
    case 180:
      BooleanLiteral();
      break;
    case 73:
    ASTUndef jjtn001 = new ASTUndef(JJTUNDEF);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(73);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//30
  final public void Update() throws ParseException {
    Prologue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 75:
    case 77:
    case 78:
    case 81:
    case 82:
    case 83:
    case 84:
    case 86:
    case 87:
    case 88:
      Update1();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        jj_consume_token(74);
        Update();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
  }

//31
  final public void Update1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 78:
      Load();
      break;
    case 81:
      Clear();
      break;
    case 82:
      Drop();
      break;
    case 84:
      Add();
      break;
    case 86:
      Move();
      break;
    case 87:
      Copy();
      break;
    case 83:
      Create();
      break;
    default:
      jj_la1[59] = jj_gen;
      if (jj_2_2(2147483647)) {
        InsertData();
      } else if (jj_2_3(2147483647)) {
        DeleteData();
      } else if (jj_2_4(2147483647)) {
        DeleteWhere();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 75:
        case 77:
        case 88:
          Modify();
          break;
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

//32
  final public void Load() throws ParseException {
 /*@bgen(jjtree) Load */
  ASTLoad jjtn000 = new ASTLoad(JJTLOAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(78);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
                    jjtn000.setSilent();
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      IRIref();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
        jj_consume_token(80);
        GraphRef();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//33
  final public void Clear() throws ParseException {
 /*@bgen(jjtree) Clear */
  ASTClear jjtn000 = new ASTClear(JJTCLEAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(81);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
                     jjtn000.setSilent();
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      GraphRefAll();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//34
  final public void Drop() throws ParseException {
 /*@bgen(jjtree) Drop */
  ASTDrop jjtn000 = new ASTDrop(JJTDROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(82);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
                    jjtn000.setSilent();
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      GraphRefAll();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//35
  final public void Create() throws ParseException {
 /*@bgen(jjtree) Create */
  ASTCreate jjtn000 = new ASTCreate(JJTCREATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(83);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
                      jjtn000.setSilent();
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      GraphRef();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//36
  final public void Add() throws ParseException {
 /*@bgen(jjtree) Add */
  ASTAdd jjtn000 = new ASTAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(84);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
                   jjtn000.setSilent();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      GraphOrDefault();
      jj_consume_token(85);
      GraphOrDefault();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//37
  final public void Move() throws ParseException {
 /*@bgen(jjtree) Move */
  ASTMove jjtn000 = new ASTMove(JJTMOVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(86);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
                    jjtn000.setSilent();
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      GraphOrDefault();
      jj_consume_token(85);
      GraphOrDefault();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//38
  final public void Copy() throws ParseException {
 /*@bgen(jjtree) Copy */
  ASTCopy jjtn000 = new ASTCopy(JJTCOPY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(87);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
                    jjtn000.setSilent();
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      GraphOrDefault();
      jj_consume_token(85);
      GraphOrDefault();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//39
  final public void InsertData() throws ParseException {
 /*@bgen(jjtree) Insert */
  ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(75);
      jj_consume_token(76);
      QuadData();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//40
  final public void DeleteData() throws ParseException {
 /*@bgen(jjtree) Delete */
  ASTDelete jjtn000 = new ASTDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(77);
      jj_consume_token(76);
   jjtn000.setDeleteData();
      QuadData();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//41
  final public void DeleteWhere() throws ParseException {
 /*@bgen(jjtree) Modify */
  ASTModify jjtn000 = new ASTModify(JJTMODIFY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(77);
      jj_consume_token(49);
      InterDeleteWhere();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InterDeleteWhere() throws ParseException {
 /*@bgen(jjtree) Delete */
  ASTDelete jjtn000 = new ASTDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QuadPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//42
  final public void Modify() throws ParseException {
 /*@bgen(jjtree) Modify */
  ASTModify jjtn000 = new ASTModify(JJTMODIFY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 88:
        jj_consume_token(88);
        IRIref();
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        DeleteClause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 75:
          InsertClause();
          break;
        default:
          jj_la1[70] = jj_gen;
          ;
        }
        break;
      case 75:
        InsertClause();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_15;
        }
        UsingClause();
      }
      jj_consume_token(49);
      GroupGraphPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//43
  final public void DeleteClause() throws ParseException {
 /*@bgen(jjtree) Delete */
  ASTDelete jjtn000 = new ASTDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(77);
      QuadPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//44
  final public void InsertClause() throws ParseException {
 /*@bgen(jjtree) Insert */
  ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(75);
      QuadPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//45
  final public void UsingClause() throws ParseException {
    jj_consume_token(89);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      UsingDefault();
      break;
    case 63:
      UsingNamed();
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UsingDefault() throws ParseException {
 /*@bgen(jjtree) DefaultGraph */
  ASTDefaultGraph jjtn000 = new ASTDefaultGraph(JJTDEFAULTGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IRIref();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void UsingNamed() throws ParseException {
 /*@bgen(jjtree) NamedGraph */
  ASTNamedGraph jjtn000 = new ASTNamedGraph(JJTNAMEDGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(63);
      IRIref();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//46
  final public void GraphOrDefault() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 90:
    ASTDefault jjtn001 = new ASTDefault(JJTDEFAULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(90);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case 91:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      IRIref();
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//47
  final public void GraphRef() throws ParseException {
    jj_consume_token(91);
    IRIref();
  }

//48
  final public void GraphRefAll() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 91:
      GraphRef();
      break;
    case 90:
    ASTDefault jjtn001 = new ASTDefault(JJTDEFAULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(90);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case 63:
    ASTNamed jjtn002 = new ASTNamed(JJTNAMED);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(63);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    case 92:
    ASTAll jjtn003 = new ASTAll(JJTALL);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(92);
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//49
  final public void QuadPattern() throws ParseException {
 /*@bgen(jjtree) ConstructTemplate */
  ASTConstructTemplate jjtn000 = new ASTConstructTemplate(JJTCONSTRUCTTEMPLATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(1);
      Quads();
      jj_consume_token(3);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//50
  final public void QuadData() throws ParseException {
 /*@bgen(jjtree) ConstructTemplate */
  ASTConstructTemplate jjtn000 = new ASTConstructTemplate(JJTCONSTRUCTTEMPLATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(1);
      Quads();
      jj_consume_token(3);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//51
  final public void Quads() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case VAR:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case NIL:
    case ANON:
    case 45:
    case 100:
    case 105:
    case 118:
    case 179:
    case 180:
      TriplesTemplate();
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_16;
      }
      QuadsNotTriples();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        jj_consume_token(2);
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 45:
      case 100:
      case 105:
      case 118:
      case 179:
      case 180:
        TriplesTemplate();
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
    }
  }

//52
  final public void QuadsNotTriples() throws ParseException {
 /*@bgen(jjtree) GraphConstraint */
  ASTGraphConstraint jjtn000 = new ASTGraphConstraint(JJTGRAPHCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(91);
      VarOrIRIref();
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 45:
      case 100:
      case 105:
      case 118:
      case 179:
      case 180:
        TriplesTemplate();
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      jj_consume_token(3);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//53
  final public void TriplesTemplate() throws ParseException {
    TriplesSameSubject();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 45:
      case 100:
      case 105:
      case 118:
      case 179:
      case 180:
        TriplesTemplate();
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
  }

//54
  final public void GroupGraphPattern() throws ParseException {
 /*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        SubSelect();
        break;
      case 56:
        WindowInGroup();
        break;
      default:
        jj_la1[84] = jj_gen;
        GroupGraphPatternSub();
      }
      jj_consume_token(3);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// added for stream-based evaluation...  final public void WindowInGroup() throws ParseException {
    WINDOW();
    GroupGraphPatternSub();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      WindowInGroup();
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
  }

//55
  final public void GroupGraphPatternSub() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case VAR:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case NIL:
    case ANON:
    case 45:
    case 100:
    case 105:
    case 118:
    case 179:
    case 180:
      TriplesBlock();
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
      case 98:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_17;
      }
      GraphPatternNotTriples();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        jj_consume_token(2);
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 45:
      case 100:
      case 105:
      case 118:
      case 179:
      case 180:
        TriplesBlock();
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
    }
  }

//56
  final public void TriplesBlock() throws ParseException {
    TriplesSameSubjectPath();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 45:
      case 100:
      case 105:
      case 118:
      case 179:
      case 180:
        TriplesBlock();
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
  }

//57
  final public void GraphPatternNotTriples() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
      GroupOrUnionGraphPattern();
      break;
    case 93:
      OptionalGraphPattern();
      break;
    case 96:
      MinusGraphPattern();
      break;
    case 91:
      GraphGraphPattern();
      break;
    case 94:
      ServiceGraphPattern();
      break;
    case 98:
      Filter();
      break;
    case 95:
      Bind();
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//58
  final public void OptionalGraphPattern() throws ParseException {
 /*@bgen(jjtree) OptionalConstraint */
  ASTOptionalConstraint jjtn000 = new ASTOptionalConstraint(JJTOPTIONALCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(93);
      GroupGraphPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//59
  final public void GraphGraphPattern() throws ParseException {
 /*@bgen(jjtree) GraphConstraint */
  ASTGraphConstraint jjtn000 = new ASTGraphConstraint(JJTGRAPHCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(91);
      VarOrIRIref();
      GroupGraphPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//60
  final public void ServiceGraphPattern() throws ParseException {
 /*@bgen(jjtree) Service */
  ASTService jjtn000 = new ASTService(JJTSERVICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(94);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
                       jjtn000.setSilent();
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
      VarOrIRIref();
      GroupGraphPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//61
  final public void Bind() throws ParseException {
 /*@bgen(jjtree) Bind */
  ASTBind jjtn000 = new ASTBind(JJTBIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(95);
      jj_consume_token(45);
      Expression();
      jj_consume_token(46);
      Var();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//62
  final public void MinusGraphPattern() throws ParseException {
 /*@bgen(jjtree) Minus */
  ASTMinus jjtn000 = new ASTMinus(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(96);
      GroupGraphPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//63
  final public void GroupOrUnionGraphPattern() throws ParseException {
    GroupGraphPattern();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 97:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_18;
      }
      jj_consume_token(97);
              ASTUnionConstraint jjtn001 = new ASTUnionConstraint(JJTUNIONCONSTRAINT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        GroupGraphPattern();
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
      }
    }
  }

//64
  final public void Filter() throws ParseException {
    jj_consume_token(98);
    Constraint();
  }

//65
  final public void Constraint() throws ParseException {
 /*@bgen(jjtree) FilterConstraint */
  ASTFilterConstraint jjtn000 = new ASTFilterConstraint(JJTFILTERCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        BrackettedExpression();
        break;
      case 117:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
        BuiltInCall();
        break;
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        FunctionCall();
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//66
  final public void FunctionCall() throws ParseException {
 /*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IRIref();
      ArgList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//67
  final public void ArgList() throws ParseException {
 /*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NIL:
        jj_consume_token(NIL);
        break;
      case 45:
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
          break;
        default:
          jj_la1[96] = jj_gen;
          ;
        }
        Expression();
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 99:
            ;
            break;
          default:
            jj_la1[97] = jj_gen;
            break label_19;
          }
          jj_consume_token(99);
          Expression();
        }
        jj_consume_token(47);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//68
  final public void ExpressionList() throws ParseException {
 /*@bgen(jjtree) ExpressionList */
  ASTExpressionList jjtn000 = new ASTExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NIL:
        jj_consume_token(NIL);
        break;
      case 45:
        jj_consume_token(45);
        Expression();
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 99:
            ;
            break;
          default:
            jj_la1[99] = jj_gen;
            break label_20;
          }
          jj_consume_token(99);
          Expression();
        }
        jj_consume_token(47);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//69
  final public void ConstructTemplate() throws ParseException {
 /*@bgen(jjtree) ConstructTemplate */
  ASTConstructTemplate jjtn000 = new ASTConstructTemplate(JJTCONSTRUCTTEMPLATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 45:
      case 100:
      case 105:
      case 118:
      case 179:
      case 180:
        ConstructTriples();
        break;
      default:
        jj_la1[101] = jj_gen;
        ;
      }
      jj_consume_token(3);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//70
  final public void ConstructTriples() throws ParseException {
    TriplesSameSubject();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 45:
      case 100:
      case 105:
      case 118:
      case 179:
      case 180:
        ConstructTriples();
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
  }

//71
  final public void TriplesSameSubject() throws ParseException {
    if (jj_2_5(2147483647)) {
                       ASTNodeSet jjtn001 = new ASTNodeSet(JJTNODESET);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
        TriplesNode();
        PropertyList();
      } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 105:
      case 118:
      case 179:
      case 180:
      ASTTripleSet jjtn002 = new ASTTripleSet(JJTTRIPLESET);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          VarOrTerm();
          PropertyListNotEmpty();
        } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//72
  final public void PropertyListNotEmpty() throws ParseException {
    Verb();
    ObjectList();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_21;
      }
      jj_consume_token(74);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case VAR:
        Verb();
        ObjectList();
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
    }
  }

//73
  final public void PropertyList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case VAR:
      PropertyListNotEmpty();
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
  }

//74
  final public void ObjectList() throws ParseException {
 /*@bgen(jjtree) ObjectList */
  ASTObjectList jjtn000 = new ASTObjectList(JJTOBJECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Object();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 99:
          ;
          break;
        default:
          jj_la1[108] = jj_gen;
          break label_22;
        }
        jj_consume_token(99);
        Object();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//75
  final public void Object() throws ParseException {
    GraphNode();
  }

//76
  final public void Verb() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case VAR:
      VarOrIRIref();
      break;
    case 4:
     ASTAVerbType jjtn001 = new ASTAVerbType(JJTAVERBTYPE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(4);
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
      break;
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//77
  final public void TriplesSameSubjectPath() throws ParseException {
    if (jj_2_6(2147483647)) {
    ASTNodeSet jjtn001 = new ASTNodeSet(JJTNODESET);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        TriplesNode();
        PropertyListPath();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case NIL:
      case ANON:
      case 105:
      case 118:
      case 179:
      case 180:
    ASTTripleSet jjtn002 = new ASTTripleSet(JJTTRIPLESET);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
        try {
          VarOrTerm();
          PropertyListNotEmptyPath();
        } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
        } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
        }
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//78
  final public void PropertyListNotEmptyPath() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case 45:
    case 103:
    case 106:
      VerbPath();
      break;
    case VAR:
      VerbSimple();
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ObjectList();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        ;
        break;
      default:
        jj_la1[112] = jj_gen;
        break label_23;
      }
      jj_consume_token(74);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case VAR:
      case 45:
      case 103:
      case 106:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 4:
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case 45:
        case 103:
        case 106:
          VerbPath();
          break;
        case VAR:
          VerbSimple();
          break;
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ObjectList();
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
    }
  }

//79
  final public void PropertyListPath() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case VAR:
      PropertyListNotEmpty();
      break;
    default:
      jj_la1[115] = jj_gen;
      ;
    }
  }

//80
  final public void VerbPath() throws ParseException {
    Path();
  }

//81
  final public void VerbSimple() throws ParseException {
    Var();
  }

//82
  final public void Path() throws ParseException {
    PathAlternative();
  }

//83
  final public void PathAlternative() throws ParseException {
    PathSequence();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 101:
      jj_consume_token(101);
          ASTPathAlternative jjtn001 = new ASTPathAlternative(JJTPATHALTERNATIVE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        PathAlternative();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
  }

//84
  final public void PathSequence() throws ParseException {
    PathEltOrInverse();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 102:
      jj_consume_token(102);
      ASTPathSequence jjtn001 = new ASTPathSequence(JJTPATHSEQUENCE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        PathSequence();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
  }

//85
  final public void PathElt() throws ParseException {
    PathPrimary();
    if (jj_2_7(2)) {
      PathMod();
    } else {
      ;
    }
  }

//86
  final public void PathEltOrInverse() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case 45:
    case 106:
      PathElt();
      break;
    case 103:
      jj_consume_token(103);
          ASTInvers jjtn001 = new ASTInvers(JJTINVERS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        PathElt();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
      }
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//87
  final public void PathMod() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
    ASTArbitraryOccurences jjtn001 = new ASTArbitraryOccurences(JJTARBITRARYOCCURENCES);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(44);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  1);
    }
      }
      break;
    case 104:
    ASTOptionalOccurence jjtn002 = new ASTOptionalOccurence(JJTOPTIONALOCCURENCE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(104);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  1);
    }
      }
      break;
    case 105:
    ASTArbitraryOccurencesNotZero jjtn003 = new ASTArbitraryOccurencesNotZero(JJTARBITRARYOCCURENCESNOTZERO);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(105);
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  1);
    }
      }
      break;
    case 1:
      jj_consume_token(1);
     ASTGivenOccurences jjtn004 = new ASTGivenOccurences(JJTGIVENOCCURENCES);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
      jjtn004.setLowerLimit(token.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 99:
            jj_consume_token(99);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 3:
              jj_consume_token(3);
              break;
            case INTEGER:
              jj_consume_token(INTEGER);
                      jjtn004.setUpperLimit(token.image);
              jj_consume_token(3);
              break;
            default:
              jj_la1[119] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case 3:
          jjtn004.setUpperLimit(jjtn004.getLowerLimit());
            jj_consume_token(3);
            break;
          default:
            jj_la1[120] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 99:
          jj_consume_token(99);
          jj_consume_token(INTEGER);
                       jjtn004.setUpperLimit(token.image);
          jj_consume_token(3);
          break;
        default:
          jj_la1[121] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004,  1);
     }
      }
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//88
  final public void PathPrimary() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIref();
      break;
    case 4:
     ASTAVerbType jjtn001 = new ASTAVerbType(JJTAVERBTYPE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(4);
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
      break;
    case 106:
      jj_consume_token(106);
      PathNegatedPropertySet();
      break;
    case 45:
      jj_consume_token(45);
      Path();
      jj_consume_token(47);
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//89
  final public void PathNegatedPropertySet() throws ParseException {
 /*@bgen(jjtree) NegatedPath */
  ASTNegatedPath jjtn000 = new ASTNegatedPath(JJTNEGATEDPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case 103:
        PathOneInPropertySet();
        break;
      case 45:
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 4:
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case 103:
          PathOneInPropertySet();
          label_24:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 101:
              ;
              break;
            default:
              jj_la1[124] = jj_gen;
              break label_24;
            }
            jj_consume_token(101);
            PathOneInPropertySet();
          }
          break;
        default:
          jj_la1[125] = jj_gen;
          ;
        }
        jj_consume_token(47);
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//90
  final public void PathOneInPropertySet() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIref();
      break;
    case 4:
     ASTAVerbType jjtn001 = new ASTAVerbType(JJTAVERBTYPE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(4);
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
      break;
    case 103:
      jj_consume_token(103);
         ASTInvers jjtn003 = new ASTInvers(JJTINVERS);
         boolean jjtc003 = true;
         jjtree.openNodeScope(jjtn003);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
          IRIref();
          break;
        case 4:
                      ASTAVerbType jjtn002 = new ASTAVerbType(JJTAVERBTYPE);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(4);
          } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
          }
          break;
        default:
          jj_la1[127] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte003) {
         if (jjtc003) {
           jjtree.clearNodeScope(jjtn003);
           jjtc003 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte003 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte003;}
         }
         if (jjte003 instanceof ParseException) {
           {if (true) throw (ParseException)jjte003;}
         }
         {if (true) throw (Error)jjte003;}
      } finally {
         if (jjtc003) {
           jjtree.closeNodeScope(jjtn003,  1);
         }
      }
      break;
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//91
  final public void Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setStringInt(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//92
  final public void TriplesNode() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      Collection();
      break;
    case 100:
      BlankNodePropertyList();
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//93
  final public void BlankNodePropertyList() throws ParseException {
 /*@bgen(jjtree) BlankNodePropertyList */
  ASTBlankNodePropertyList jjtn000 = new ASTBlankNodePropertyList(JJTBLANKNODEPROPERTYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(100);
      PropertyListNotEmpty();
      jj_consume_token(107);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//94
  final public void Collection() throws ParseException {
 /*@bgen(jjtree) Collection */
  ASTCollection jjtn000 = new ASTCollection(JJTCOLLECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(45);
      label_25:
      while (true) {
        GraphNode();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case BLANK_NODE_LABEL:
        case VAR:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
        case NIL:
        case ANON:
        case 45:
        case 100:
        case 105:
        case 118:
        case 179:
        case 180:
          ;
          break;
        default:
          jj_la1[130] = jj_gen;
          break label_25;
        }
      }
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//95
  final public void GraphNode() throws ParseException {
    if (jj_2_8(2)) {
      VarOrTerm();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
      case 100:
        TriplesNode();
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//96
  final public void VarOrTerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      Var();
      break;
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case NIL:
    case ANON:
    case 105:
    case 118:
    case 179:
    case 180:
      GraphTerm();
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//97
  final public void VarOrIRIref() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      Var();
      break;
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIref();
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//98
  final public void Var() throws ParseException {
 /*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token varName;
    try {
      varName = jj_consume_token(VAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(varName.image.substring(1));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//99
  final public void GraphTerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIref();
      break;
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      RDFLiteral();
      break;
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case 105:
    case 118:
      NumericLiteral();
      break;
    case 179:
    case 180:
      BooleanLiteral();
      break;
    case BLANK_NODE_LABEL:
    case ANON:
      BlankNode();
      break;
    case NIL:
     ASTNIL jjtn001 = new ASTNIL(JJTNIL);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(NIL);
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//100
  final public void Expression() throws ParseException {
    ConditionalOrExpression();
  }

//101
  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 108:
        ;
        break;
      default:
        jj_la1[135] = jj_gen;
        break label_26;
      }
      jj_consume_token(108);
           ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
      }
    }
  }

//102
  final public void ConditionalAndExpression() throws ParseException {
    ValueLogical();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 109:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_27;
      }
      jj_consume_token(109);
           ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        ValueLogical();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
      }
    }
  }

//103
  final public void ValueLogical() throws ParseException {
    RelationalExpression();
  }

//104
  final public void RelationalExpression() throws ParseException {
    NumericExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 110:
        jj_consume_token(110);
            ASTEqualsNode jjtn001 = new ASTEqualsNode(JJTEQUALSNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
        try {
          NumericExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
        } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
        }
        break;
      case 111:
        jj_consume_token(111);
           ASTNotEqualsNode jjtn002 = new ASTNotEqualsNode(JJTNOTEQUALSNODE);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
        try {
          NumericExpression();
        } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte002;}
           }
           if (jjte002 instanceof ParseException) {
             {if (true) throw (ParseException)jjte002;}
           }
           {if (true) throw (Error)jjte002;}
        } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
           }
        }
        break;
      case 112:
        jj_consume_token(112);
        ASTLessThanNode jjtn003 = new ASTLessThanNode(JJTLESSTHANNODE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          NumericExpression();
        } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
        } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  2);
        }
        }
        break;
      case 113:
        jj_consume_token(113);
        ASTLessThanEqualsNode jjtn004 = new ASTLessThanEqualsNode(JJTLESSTHANEQUALSNODE);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        try {
          NumericExpression();
        } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte004;}
        }
        if (jjte004 instanceof ParseException) {
          {if (true) throw (ParseException)jjte004;}
        }
        {if (true) throw (Error)jjte004;}
        } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  2);
        }
        }
        break;
      case 114:
        jj_consume_token(114);
         ASTGreaterThanNode jjtn005 = new ASTGreaterThanNode(JJTGREATERTHANNODE);
         boolean jjtc005 = true;
         jjtree.openNodeScope(jjtn005);
        try {
          NumericExpression();
        } catch (Throwable jjte005) {
         if (jjtc005) {
           jjtree.clearNodeScope(jjtn005);
           jjtc005 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte005 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte005;}
         }
         if (jjte005 instanceof ParseException) {
           {if (true) throw (ParseException)jjte005;}
         }
         {if (true) throw (Error)jjte005;}
        } finally {
         if (jjtc005) {
           jjtree.closeNodeScope(jjtn005,  2);
         }
        }
        break;
      case 115:
        jj_consume_token(115);
         ASTGreaterThanEqualsNode jjtn006 = new ASTGreaterThanEqualsNode(JJTGREATERTHANEQUALSNODE);
         boolean jjtc006 = true;
         jjtree.openNodeScope(jjtn006);
        try {
          NumericExpression();
        } catch (Throwable jjte006) {
         if (jjtc006) {
           jjtree.clearNodeScope(jjtn006);
           jjtc006 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte006 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte006;}
         }
         if (jjte006 instanceof ParseException) {
           {if (true) throw (ParseException)jjte006;}
         }
         {if (true) throw (Error)jjte006;}
        } finally {
         if (jjtc006) {
           jjtree.closeNodeScope(jjtn006,  2);
         }
        }
        break;
      case 116:
        jj_consume_token(116);
         ASTInNode jjtn007 = new ASTInNode(JJTINNODE);
         boolean jjtc007 = true;
         jjtree.openNodeScope(jjtn007);
        try {
          ExpressionList();
        } catch (Throwable jjte007) {
         if (jjtc007) {
           jjtree.clearNodeScope(jjtn007);
           jjtc007 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte007 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte007;}
         }
         if (jjte007 instanceof ParseException) {
           {if (true) throw (ParseException)jjte007;}
         }
         {if (true) throw (Error)jjte007;}
        } finally {
         if (jjtc007) {
           jjtree.closeNodeScope(jjtn007,  2);
         }
        }
        break;
      case 117:
        jj_consume_token(117);
        jj_consume_token(116);
               ASTNotInNode jjtn008 = new ASTNotInNode(JJTNOTINNODE);
               boolean jjtc008 = true;
               jjtree.openNodeScope(jjtn008);
        try {
          ExpressionList();
        } catch (Throwable jjte008) {
               if (jjtc008) {
                 jjtree.clearNodeScope(jjtn008);
                 jjtc008 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte008 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte008;}
               }
               if (jjte008 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte008;}
               }
               {if (true) throw (Error)jjte008;}
        } finally {
               if (jjtc008) {
                 jjtree.closeNodeScope(jjtn008,  2);
               }
        }
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[138] = jj_gen;
      ;
    }
  }

//105
  final public void NumericExpression() throws ParseException {
    AdditiveExpression();
  }

//106
  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 105:
      case 118:
        ;
        break;
      default:
        jj_la1[139] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 105:
        jj_consume_token(105);
           ASTAdditionNode jjtn001 = new ASTAdditionNode(JJTADDITIONNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
        } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
        }
        break;
      case 118:
        jj_consume_token(118);
                                                               ASTSubtractionNode jjtn002 = new ASTSubtractionNode(JJTSUBTRACTIONNODE);
                                                               boolean jjtc002 = true;
                                                               jjtree.openNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
                                                               if (jjtc002) {
                                                                 jjtree.clearNodeScope(jjtn002);
                                                                 jjtc002 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte002 instanceof RuntimeException) {
                                                                 {if (true) throw (RuntimeException)jjte002;}
                                                               }
                                                               if (jjte002 instanceof ParseException) {
                                                                 {if (true) throw (ParseException)jjte002;}
                                                               }
                                                               {if (true) throw (Error)jjte002;}
        } finally {
                                                               if (jjtc002) {
                                                                 jjtree.closeNodeScope(jjtn002,  2);
                                                               }
        }
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//107
  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 102:
        ;
        break;
      default:
        jj_la1[141] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
            ASTMultiplicationNode jjtn001 = new ASTMultiplicationNode(JJTMULTIPLICATIONNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
        } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
        }
        break;
      case 102:
        jj_consume_token(102);
          ASTDivisionNode jjtn002 = new ASTDivisionNode(JJTDIVISIONNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//108
  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
  ASTNotNode jjtn001 = new ASTNotNode(JJTNOTNODE);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(106);
        PrimaryExpression();
      } catch (Throwable jjte001) {
  if (jjtc001) {
    jjtree.clearNodeScope(jjtn001);
    jjtc001 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte001 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte001;}
  }
  if (jjte001 instanceof ParseException) {
    {if (true) throw (ParseException)jjte001;}
  }
  {if (true) throw (Error)jjte001;}
      } finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001,  1);
  }
      }
      break;
    default:
      jj_la1[143] = jj_gen;
      if (jj_2_9(2)) {
                 ASTPlusNode jjtn002 = new ASTPlusNode(JJTPLUSNODE);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(105);
          PrimaryExpressionWithoutNumericLiteral();
        } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte002;}
                 }
                 if (jjte002 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte002;}
                 }
                 {if (true) throw (Error)jjte002;}
        } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  1);
                 }
        }
      } else if (jj_2_10(2)) {
                 ASTMinusNode jjtn003 = new ASTMinusNode(JJTMINUSNODE);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(118);
          PrimaryExpressionWithoutNumericLiteral();
        } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte003;}
                 }
                 if (jjte003 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte003;}
                 }
                 {if (true) throw (Error)jjte003;}
        } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  1);
                 }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
        case 45:
        case 105:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 166:
        case 167:
        case 168:
        case 169:
        case 170:
        case 171:
        case 172:
        case 173:
        case 174:
        case 175:
        case 176:
        case 179:
        case 180:
          PrimaryExpression();
          break;
        default:
          jj_la1[144] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PrimaryExpressionWithoutNumericLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      BrackettedExpression();
      break;
    case 117:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
      BuiltInCall();
      break;
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIrefOrFunction();
      break;
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      RDFLiteral();
      break;
    case 179:
    case 180:
      BooleanLiteral();
      break;
    case VAR:
      Var();
      break;
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
      Aggregate();
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//109
  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      BrackettedExpression();
      break;
    case 117:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
      BuiltInCall();
      break;
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIrefOrFunction();
      break;
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      RDFLiteral();
      break;
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case 105:
    case 118:
      NumericLiteral();
      break;
    case 179:
    case 180:
      BooleanLiteral();
      break;
    case VAR:
      Var();
      break;
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
      Aggregate();
      break;
    default:
      jj_la1[146] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//110
  final public void BrackettedExpression() throws ParseException {
    jj_consume_token(45);
    Expression();
    jj_consume_token(47);
  }

//111
  final public void BuiltInCall() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 119:
      STR();
      break;
    case 120:
      LANG();
      break;
    case 121:
      LANGMATCHES();
      break;
    case 122:
      DATATYPE();
      break;
    case 123:
      BOUND();
      break;
    case 124:
      IRIFunc();
      break;
    case 125:
      URIFunc();
      break;
    case 126:
      BNODE();
      break;
    case 127:
      RAND();
      break;
    case 128:
      ABS();
      break;
    case 129:
      CEIL();
      break;
    case 130:
      FLOOR();
      break;
    case 131:
      ROUND();
      break;
    case 132:
      CONCAT();
      break;
    case 167:
      SubstringExpression();
      break;
    case 133:
      STRLEN();
      break;
    case 168:
      StrReplaceExpression();
      break;
    case 134:
      UCASE();
      break;
    case 135:
      LCASE();
      break;
    case 136:
      ENCODE_FOR_URI();
      break;
    case 137:
      CONTAINS();
      break;
    case 138:
      STRSTARTS();
      break;
    case 139:
      STRENDS();
      break;
    case 140:
      STRBEFORE();
      break;
    case 141:
      STRAFTER();
      break;
    case 142:
      YEAR();
      break;
    case 143:
      MONTH();
      break;
    case 144:
      DAY();
      break;
    case 145:
      HOURS();
      break;
    case 146:
      MINUTES();
      break;
    case 147:
      SECONDS();
      break;
    case 148:
      TIMEZONE();
      break;
    case 149:
      TZ();
      break;
    case 150:
      NOW();
      break;
    case 151:
      MD5();
      break;
    case 152:
      SHA1();
      break;
    case 153:
      SHA256();
      break;
    case 154:
      SHA384();
      break;
    case 155:
      SHA512();
      break;
    case 156:
      COALESCE();
      break;
    case 157:
      IF();
      break;
    case 158:
      STRLANG();
      break;
    case 159:
      STRDT();
      break;
    case 160:
      sameTerm();
      break;
    case 161:
      isIRI();
      break;
    case 162:
      isURI();
      break;
    case 163:
      isBLANK();
      break;
    case 164:
      isLITERAL();
      break;
    case 165:
      isNUMERIC();
      break;
    case 166:
      RegexExpression();
      break;
    case 169:
      ExistsFunc();
      break;
    case 117:
      NotExistsFunc();
      break;
    default:
      jj_la1[147] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void STR() throws ParseException {
 /*@bgen(jjtree) StrFuncNode */
  ASTStrFuncNode jjtn000 = new ASTStrFuncNode(JJTSTRFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(119);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LANG() throws ParseException {
 /*@bgen(jjtree) LangFuncNode */
  ASTLangFuncNode jjtn000 = new ASTLangFuncNode(JJTLANGFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(120);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LANGMATCHES() throws ParseException {
 /*@bgen(jjtree) LangMatchesFuncNode */
  ASTLangMatchesFuncNode jjtn000 = new ASTLangMatchesFuncNode(JJTLANGMATCHESFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(121);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DATATYPE() throws ParseException {
 /*@bgen(jjtree) DataTypeFuncNode */
  ASTDataTypeFuncNode jjtn000 = new ASTDataTypeFuncNode(JJTDATATYPEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(122);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BOUND() throws ParseException {
 /*@bgen(jjtree) BoundFuncNode */
  ASTBoundFuncNode jjtn000 = new ASTBoundFuncNode(JJTBOUNDFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(123);
      jj_consume_token(45);
      Var();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IRIFunc() throws ParseException {
 /*@bgen(jjtree) IriFuncNode */
  ASTIriFuncNode jjtn000 = new ASTIriFuncNode(JJTIRIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(124);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void URIFunc() throws ParseException {
 /*@bgen(jjtree) UriFuncNode */
  ASTUriFuncNode jjtn000 = new ASTUriFuncNode(JJTURIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(125);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BNODE() throws ParseException {
 /*@bgen(jjtree) BnodeFuncNode */
  ASTBnodeFuncNode jjtn000 = new ASTBnodeFuncNode(JJTBNODEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(126);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        Expression();
        jj_consume_token(47);
        break;
      case NIL:
        jj_consume_token(NIL);
        break;
      default:
        jj_la1[148] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RAND() throws ParseException {
 /*@bgen(jjtree) RandFuncNode */
  ASTRandFuncNode jjtn000 = new ASTRandFuncNode(JJTRANDFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(127);
      jj_consume_token(NIL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ABS() throws ParseException {
 /*@bgen(jjtree) ABSFuncNode */
  ASTABSFuncNode jjtn000 = new ASTABSFuncNode(JJTABSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(128);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CEIL() throws ParseException {
 /*@bgen(jjtree) CeilFuncNode */
  ASTCeilFuncNode jjtn000 = new ASTCeilFuncNode(JJTCEILFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(129);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FLOOR() throws ParseException {
 /*@bgen(jjtree) FloorFuncNode */
  ASTFloorFuncNode jjtn000 = new ASTFloorFuncNode(JJTFLOORFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(130);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ROUND() throws ParseException {
 /*@bgen(jjtree) RoundFuncNode */
  ASTRoundFuncNode jjtn000 = new ASTRoundFuncNode(JJTROUNDFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(131);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CONCAT() throws ParseException {
 /*@bgen(jjtree) ConcatFuncNode */
  ASTConcatFuncNode jjtn000 = new ASTConcatFuncNode(JJTCONCATFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(132);
      ExpressionList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void STRLEN() throws ParseException {
 /*@bgen(jjtree) StrlenFuncNode */
  ASTStrlenFuncNode jjtn000 = new ASTStrlenFuncNode(JJTSTRLENFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(133);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UCASE() throws ParseException {
 /*@bgen(jjtree) UcaseFuncNode */
  ASTUcaseFuncNode jjtn000 = new ASTUcaseFuncNode(JJTUCASEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(134);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LCASE() throws ParseException {
 /*@bgen(jjtree) LcaseFuncNode */
  ASTLcaseFuncNode jjtn000 = new ASTLcaseFuncNode(JJTLCASEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(135);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ENCODE_FOR_URI() throws ParseException {
 /*@bgen(jjtree) EncodeForUriFuncNode */
  ASTEncodeForUriFuncNode jjtn000 = new ASTEncodeForUriFuncNode(JJTENCODEFORURIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(136);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CONTAINS() throws ParseException {
 /*@bgen(jjtree) ContainsFuncNode */
  ASTContainsFuncNode jjtn000 = new ASTContainsFuncNode(JJTCONTAINSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(137);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void STRSTARTS() throws ParseException {
 /*@bgen(jjtree) StrstartsFuncNode */
  ASTStrstartsFuncNode jjtn000 = new ASTStrstartsFuncNode(JJTSTRSTARTSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(138);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void STRENDS() throws ParseException {
 /*@bgen(jjtree) StrEndsFuncNode */
  ASTStrEndsFuncNode jjtn000 = new ASTStrEndsFuncNode(JJTSTRENDSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(139);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void STRBEFORE() throws ParseException {
 /*@bgen(jjtree) StrBeforeFuncNode */
  ASTStrBeforeFuncNode jjtn000 = new ASTStrBeforeFuncNode(JJTSTRBEFOREFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(140);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void STRAFTER() throws ParseException {
 /*@bgen(jjtree) StrAfterFuncNode */
  ASTStrAfterFuncNode jjtn000 = new ASTStrAfterFuncNode(JJTSTRAFTERFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(141);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void YEAR() throws ParseException {
 /*@bgen(jjtree) YearFuncNode */
  ASTYearFuncNode jjtn000 = new ASTYearFuncNode(JJTYEARFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(142);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MONTH() throws ParseException {
 /*@bgen(jjtree) MonthFuncNode */
  ASTMonthFuncNode jjtn000 = new ASTMonthFuncNode(JJTMONTHFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(143);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DAY() throws ParseException {
 /*@bgen(jjtree) DayFuncNode */
  ASTDayFuncNode jjtn000 = new ASTDayFuncNode(JJTDAYFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(144);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void HOURS() throws ParseException {
 /*@bgen(jjtree) HoursFuncNode */
  ASTHoursFuncNode jjtn000 = new ASTHoursFuncNode(JJTHOURSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(145);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MINUTES() throws ParseException {
 /*@bgen(jjtree) MinutesFuncNode */
  ASTMinutesFuncNode jjtn000 = new ASTMinutesFuncNode(JJTMINUTESFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(146);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SECONDS() throws ParseException {
 /*@bgen(jjtree) SecondsFuncNode */
  ASTSecondsFuncNode jjtn000 = new ASTSecondsFuncNode(JJTSECONDSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(147);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TIMEZONE() throws ParseException {
 /*@bgen(jjtree) TimeZoneFuncNode */
  ASTTimeZoneFuncNode jjtn000 = new ASTTimeZoneFuncNode(JJTTIMEZONEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(148);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TZ() throws ParseException {
 /*@bgen(jjtree) TzFuncNode */
  ASTTzFuncNode jjtn000 = new ASTTzFuncNode(JJTTZFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(149);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NOW() throws ParseException {
 /*@bgen(jjtree) NowFuncNode */
  ASTNowFuncNode jjtn000 = new ASTNowFuncNode(JJTNOWFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(150);
      jj_consume_token(NIL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MD5() throws ParseException {
 /*@bgen(jjtree) MD5FuncNode */
  ASTMD5FuncNode jjtn000 = new ASTMD5FuncNode(JJTMD5FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(151);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SHA1() throws ParseException {
 /*@bgen(jjtree) SHA1FuncNode */
  ASTSHA1FuncNode jjtn000 = new ASTSHA1FuncNode(JJTSHA1FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(152);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SHA256() throws ParseException {
 /*@bgen(jjtree) SHA256FuncNode */
  ASTSHA256FuncNode jjtn000 = new ASTSHA256FuncNode(JJTSHA256FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(153);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SHA384() throws ParseException {
 /*@bgen(jjtree) SHA384FuncNode */
  ASTSHA384FuncNode jjtn000 = new ASTSHA384FuncNode(JJTSHA384FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(154);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SHA512() throws ParseException {
 /*@bgen(jjtree) SHA512FuncNode */
  ASTSHA512FuncNode jjtn000 = new ASTSHA512FuncNode(JJTSHA512FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(155);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void COALESCE() throws ParseException {
 /*@bgen(jjtree) CoalesceFuncNode */
  ASTCoalesceFuncNode jjtn000 = new ASTCoalesceFuncNode(JJTCOALESCEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(156);
      ExpressionList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IF() throws ParseException {
 /*@bgen(jjtree) IfFuncNode */
  ASTIfFuncNode jjtn000 = new ASTIfFuncNode(JJTIFFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(157);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void STRLANG() throws ParseException {
 /*@bgen(jjtree) StrLangFuncNode */
  ASTStrLangFuncNode jjtn000 = new ASTStrLangFuncNode(JJTSTRLANGFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(158);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void STRDT() throws ParseException {
 /*@bgen(jjtree) StrdtFuncNode */
  ASTStrdtFuncNode jjtn000 = new ASTStrdtFuncNode(JJTSTRDTFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(159);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void sameTerm() throws ParseException {
 /*@bgen(jjtree) SameTermFuncNode */
  ASTSameTermFuncNode jjtn000 = new ASTSameTermFuncNode(JJTSAMETERMFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(160);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void isIRI() throws ParseException {
 /*@bgen(jjtree) isIRIFuncNode */
  ASTisIRIFuncNode jjtn000 = new ASTisIRIFuncNode(JJTISIRIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(161);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void isURI() throws ParseException {
 /*@bgen(jjtree) isURIFuncNode */
  ASTisURIFuncNode jjtn000 = new ASTisURIFuncNode(JJTISURIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(162);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void isBLANK() throws ParseException {
 /*@bgen(jjtree) isBlankFuncNode */
  ASTisBlankFuncNode jjtn000 = new ASTisBlankFuncNode(JJTISBLANKFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(163);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void isLITERAL() throws ParseException {
 /*@bgen(jjtree) isLiteralFuncNode */
  ASTisLiteralFuncNode jjtn000 = new ASTisLiteralFuncNode(JJTISLITERALFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(164);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void isNUMERIC() throws ParseException {
 /*@bgen(jjtree) isNumericFuncNode */
  ASTisNumericFuncNode jjtn000 = new ASTisNumericFuncNode(JJTISNUMERICFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(165);
      jj_consume_token(45);
      Expression();
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//112
  final public void RegexExpression() throws ParseException {
 /*@bgen(jjtree) RegexFuncNode */
  ASTRegexFuncNode jjtn000 = new ASTRegexFuncNode(JJTREGEXFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(166);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        jj_consume_token(99);
        Expression();
        break;
      default:
        jj_la1[149] = jj_gen;
        ;
      }
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//113
  final public void SubstringExpression() throws ParseException {
 /*@bgen(jjtree) SubstringFuncNode */
  ASTSubstringFuncNode jjtn000 = new ASTSubstringFuncNode(JJTSUBSTRINGFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(167);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        jj_consume_token(99);
        Expression();
        break;
      default:
        jj_la1[150] = jj_gen;
        ;
      }
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//114
  final public void StrReplaceExpression() throws ParseException {
 /*@bgen(jjtree) StrReplaceFuncNode */
  ASTStrReplaceFuncNode jjtn000 = new ASTStrReplaceFuncNode(JJTSTRREPLACEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(168);
      jj_consume_token(45);
      Expression();
      jj_consume_token(99);
      Expression();
      jj_consume_token(99);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        jj_consume_token(99);
        Expression();
        break;
      default:
        jj_la1[151] = jj_gen;
        ;
      }
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//115
  final public void ExistsFunc() throws ParseException {
 /*@bgen(jjtree) Exists */
  ASTExists jjtn000 = new ASTExists(JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(169);
      GroupGraphPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//116
  final public void NotExistsFunc() throws ParseException {
 /*@bgen(jjtree) NotExists */
  ASTNotExists jjtn000 = new ASTNotExists(JJTNOTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(117);
      jj_consume_token(169);
      GroupGraphPattern();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//117
  final public void Aggregate() throws ParseException {
 /*@bgen(jjtree) Aggregation */
  ASTAggregation jjtn000 = new ASTAggregation(JJTAGGREGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 170:
        jj_consume_token(170);
      jjtn000.setTYPE(ASTAggregation.TYPE.COUNT);
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
      jjtn000.setDistinct();
          break;
        default:
          jj_la1[152] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          jj_consume_token(44);
          break;
        case IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
        case 45:
        case 105:
        case 106:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 166:
        case 167:
        case 168:
        case 169:
        case 170:
        case 171:
        case 172:
        case 173:
        case 174:
        case 175:
        case 176:
        case 179:
        case 180:
          Expression();
          break;
        default:
          jj_la1[153] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(47);
        break;
      case 171:
        jj_consume_token(171);
      jjtn000.setTYPE(ASTAggregation.TYPE.SUM);
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
      jjtn000.setDistinct();
          break;
        default:
          jj_la1[154] = jj_gen;
          ;
        }
        Expression();
        jj_consume_token(47);
        break;
      case 172:
        jj_consume_token(172);
      jjtn000.setTYPE(ASTAggregation.TYPE.MIN);
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
      jjtn000.setDistinct();
          break;
        default:
          jj_la1[155] = jj_gen;
          ;
        }
        Expression();
        jj_consume_token(47);
        break;
      case 173:
        jj_consume_token(173);
      jjtn000.setTYPE(ASTAggregation.TYPE.MAX);
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
      jjtn000.setDistinct();
          break;
        default:
          jj_la1[156] = jj_gen;
          ;
        }
        Expression();
        jj_consume_token(47);
        break;
      case 174:
        jj_consume_token(174);
      jjtn000.setTYPE(ASTAggregation.TYPE.AVG);
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
      jjtn000.setDistinct();
          break;
        default:
          jj_la1[157] = jj_gen;
          ;
        }
        Expression();
        jj_consume_token(47);
        break;
      case 175:
        jj_consume_token(175);
      jjtn000.setTYPE(ASTAggregation.TYPE.SAMPLE);
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
      jjtn000.setDistinct();
          break;
        default:
          jj_la1[158] = jj_gen;
          ;
        }
        Expression();
        jj_consume_token(47);
        break;
      case 176:
        jj_consume_token(176);
      jjtn000.setTYPE(ASTAggregation.TYPE.GROUP_CONCAT);
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
      jjtn000.setDistinct();
          break;
        default:
          jj_la1[159] = jj_gen;
          ;
        }
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          jj_consume_token(74);
          jj_consume_token(177);
          jj_consume_token(110);
          String();
          break;
        default:
          jj_la1[160] = jj_gen;
          ;
        }
        jj_consume_token(47);
        break;
      default:
        jj_la1[161] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//118
  final public void IRIrefOrFunction() throws ParseException {
    if (jj_2_11(2147483647)) {
      FunctionCall();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        IRIref();
        break;
      default:
        jj_la1[162] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//119
//void RDFLiteral() #RDFLiteral ://{}//{//  String()//  (//    < LANGTAG >//  |//    (//      "^^" IRIref()//    )//  )?//}  final public void RDFLiteral() throws ParseException {
 /*@bgen(jjtree) RDFLiteral */
  ASTRDFLiteral jjtn000 = new ASTRDFLiteral(JJTRDFLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_12(2147483647)) {
        TypedLiteral();
      } else if (jj_2_13(2147483647)) {
        LiteralWithLangTag();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
          String();
          break;
        default:
          jj_la1[163] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypedLiteral() throws ParseException {
 /*@bgen(jjtree) DoubleCircumflex */
  ASTDoubleCircumflex jjtn000 = new ASTDoubleCircumflex(JJTDOUBLECIRCUMFLEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      String();
      jj_consume_token(178);
      IRIref();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LiteralWithLangTag() throws ParseException {
 /*@bgen(jjtree) LangTag */
  ASTLangTag jjtn000 = new ASTLangTag(JJTLANGTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      String();
      jj_consume_token(LANGTAG);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.setLangTag(token.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//120
  final public void NumericLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
      NumericLiteralUnsigned();
      break;
    case 105:
      NumericLiteralPositive();
      break;
    case 118:
      NumericLiteralNegative();
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//121
  final public void NumericLiteralUnsigned() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      NumericLiteralUnsignedInteger();
      break;
    case DECIMAL:
    case DOUBLE:
      NumericLiteralUnsignedFloatingPoint();
      break;
    default:
      jj_la1[165] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteralUnsignedInteger() throws ParseException {
 /*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.setStringInt((token.image));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void NumericLiteralUnsignedFloatingPoint() throws ParseException {
 /*@bgen(jjtree) FloatingPoint */
  ASTFloatingPoint jjtn000 = new ASTFloatingPoint(JJTFLOATINGPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL:
        jj_consume_token(DECIMAL);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.setValue((token.image));
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.setValue((token.image));
        break;
      default:
        jj_la1[166] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//122
  final public void NumericLiteralPositive() throws ParseException {
    jj_consume_token(105);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      NumericLiteralPositiveInteger();
      break;
    case DECIMAL:
    case DOUBLE:
      NumericLiteralPositiveFloatingPoint();
      break;
    default:
      jj_la1[167] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteralPositiveInteger() throws ParseException {
 /*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.setStringInt((token.image));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void NumericLiteralPositiveFloatingPoint() throws ParseException {
 /*@bgen(jjtree) FloatingPoint */
  ASTFloatingPoint jjtn000 = new ASTFloatingPoint(JJTFLOATINGPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL:
        jj_consume_token(DECIMAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.setValue((token.image));
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.setValue((token.image));
        break;
      default:
        jj_la1[168] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//123
  final public void NumericLiteralNegative() throws ParseException {
    jj_consume_token(118);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      NumericLiteralNegativeInteger();
      break;
    case DECIMAL:
    case DOUBLE:
      NumericLiteralNegativeFloatingPoint();
      break;
    default:
      jj_la1[169] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteralNegativeInteger() throws ParseException {
 /*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.setStringInt("-"+(token.image));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void NumericLiteralNegativeFloatingPoint() throws ParseException {
 /*@bgen(jjtree) FloatingPoint */
  ASTFloatingPoint jjtn000 = new ASTFloatingPoint(JJTFLOATINGPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL:
        jj_consume_token(DECIMAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.setValue("-"+(token.image));
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.setValue("-"+(token.image));
        break;
      default:
        jj_la1[170] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//124
  final public void BooleanLiteral() throws ParseException {
 /*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 179:
        jj_consume_token(179);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.setState(true);
        break;
      case 180:
        jj_consume_token(180);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.setState(false);
        break;
      default:
        jj_la1[171] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//125
  final public void String() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
        t = jj_consume_token(STRING_LITERAL1);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setStringLiteral(t.image);
        break;
      case STRING_LITERAL2:
        t = jj_consume_token(STRING_LITERAL2);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setStringLiteral(t.image);
        break;
      case STRING_LITERAL_LONG1:
        t = jj_consume_token(STRING_LITERAL_LONG1);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setStringLiteral(t.image);
        break;
      case STRING_LITERAL_LONG2:
        t = jj_consume_token(STRING_LITERAL_LONG2);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setStringLiteral(t.image);
        break;
      default:
        jj_la1[172] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//126
  final public void IRIref() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IRI_REF:
      QuotedIriRef();
      break;
    case PNAME_NS:
    case PNAME_LN:
      PrefixedName();
      break;
    default:
      jj_la1[173] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void QuotedIriRef() throws ParseException {
 /*@bgen(jjtree) QuotedURIRef */
  ASTQuotedURIRef jjtn000 = new ASTQuotedURIRef(JJTQUOTEDURIREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token qRef;
    try {
      qRef = jj_consume_token(IRI_REF);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setQRef(qRef.image.substring(1, qRef.image.length() - 1));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//127
  final public void PrefixedName() throws ParseException {
 /*@bgen(jjtree) QName */
  ASTQName jjtn000 = new ASTQName(JJTQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token qName;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PNAME_LN:
        qName = jj_consume_token(PNAME_LN);
        break;
      case PNAME_NS:
        qName = jj_consume_token(PNAME_NS);
        break;
      default:
        jj_la1[174] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
      String prefix = qName.image.substring(0, qName.image.indexOf(':'));
            if(!declaredPrefixes.contains(prefix)){
                ParseException pe = new ParseException("Undefined prefix "+prefix+" used in line " + qName.beginLine + " , column " + qName.beginColumn);
                pe.currentToken = qName;
                {if (true) throw pe;}
            }
            jjtn000.setNameSpace(prefix);
                jjtn000.setLocalName(qName.image.substring(qName.image.indexOf(':') + 1));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//128
  final public void BlankNode() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BLANK_NODE_LABEL:
      t = jj_consume_token(BLANK_NODE_LABEL);
                             ASTBlankNode jjtn001 = new ASTBlankNode(JJTBLANKNODE);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                             jjtn001.setIdentifier((t.image));
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                             }
      }
      break;
    case ANON:
     ASTEmptyNode jjtn002 = new ASTEmptyNode(JJTEMPTYNODE);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(ANON);
      } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
      }
      break;
    default:
      jj_la1[175] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void URI() throws ParseException {
    IRIref();
  }

  final public void VarOrURI() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      Var();
      break;
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      URI();
      break;
    default:
      jj_la1[176] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VarOrBlankNodeOrIRIref() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      Var();
      break;
    case BLANK_NODE_LABEL:
    case ANON:
      BlankNode();
      break;
    case IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      URI();
      break;
    default:
      jj_la1[177] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void QuotedURIref() throws ParseException {
 /*@bgen(jjtree) QuotedURIRef */
  ASTQuotedURIRef jjtn000 = new ASTQuotedURIRef(JJTQUOTEDURIREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token qRef;
    try {
      qRef = jj_consume_token(IRI_REF);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setQRef(qRef.image.substring(1, qRef.image.length() - 1));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(176)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(120)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(175)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(174)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(173)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(172)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(171)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(170)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(117)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(169)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(168)) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(167)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(166)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(165)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(105)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(164)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(163)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(162)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(160)) return true;
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(158)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(157)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(156)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(ANON)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(BLANK_NODE_LABEL)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(153)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(75)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(152)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(151)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(150)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(149)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(IRI_REF)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(148)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(147)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(146)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(STRING_LITERAL_LONG2)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(STRING_LITERAL_LONG1)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(145)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(STRING_LITERAL2)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(144)) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(STRING_LITERAL1)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(143)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(180)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(142)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(179)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(141)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(140)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(139)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(118)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(138)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(137)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(136)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(105)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    }
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(135)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(134)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(133)) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(131)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_202()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_186()) return true;
    if (jj_scan_token(LANGTAG)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(130)) return true;
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    if (jj_scan_token(LANGTAG)) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    if (jj_scan_token(178)) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_186()) return true;
    if (jj_scan_token(178)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(129)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(126)) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(99)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(125)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public StreamSPARQL1_1ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[178];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x2fb8f400,0x2,0x2fb87400,0x2fb87400,0x4,0x20007400,0x3410,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x2,0x2fb8f400,0xb400,0xb400,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3400,0x0,0x0,0x0,0x0,0x0,0xb400,0x0,0xb400,0x3400,0xb400,0x0,0xb400,0xb400,0x0,0x0,0x0,0x0,0x8000,0x8000000,0x8000000,0x7b83400,0x7b83400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3400,0x0,0x3400,0x0,0x2fb8f400,0x0,0x4,0x2fb8f400,0x2fb8f400,0x2fb8f400,0x4,0x0,0x0,0x2fb8f400,0x2,0x4,0x2fb8f400,0x2fb8f400,0x4,0x2,0x0,0x0,0x3400,0x0,0x0,0x8000000,0x0,0x8000000,0x2fb8f400,0x2fb8f400,0x4,0x2fb8f400,0x0,0xb410,0xb410,0x0,0xb410,0x2fb8f400,0xb410,0x0,0xb410,0xb410,0xb410,0x0,0x0,0x3410,0x80008,0x8,0x80000,0x2,0x3410,0x0,0x3410,0x3410,0x3410,0x3410,0x0,0x2fb8f400,0x0,0x2fb8f400,0xb400,0x2fb87400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7b8b400,0x780b400,0x7b8b400,0x0,0x8000000,0x0,0x0,0x0,0x0,0x7b8b400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3400,0x7800000,0x380000,0x380000,0x300000,0x380000,0x300000,0x380000,0x300000,0x0,0x7800000,0x3400,0x3000,0x20004000,0xb400,0x2000f400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0200,0xd0200,0xd0200,0x180,0x180,0x100000,0xc00,0xc00,0x2000,0x2000,0x3000,0x100000,0x100000,0x120000,0x2000,0x0,0x1000,0x100000,0x20000,0x100000,0xc00000,0x200000,0x8000000,0x2000000,0x4000000,0x30000000,0x80000000,0x20000,0x0,0x0,0x0,0x0,0x2000,0x4000,0x2000,0x2000,0x2000,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x2000,0x0,0x0,0x2000,0x2000,0x2000,0x0,0x1000200,0x1000000,0x2000,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x2000,0x400,0x0,0x2000,0x0,0x2000,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x2000,0x2000,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x1000,0x2000,0x0,0x0,0x2000,0x0,0x0,0x2000,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x2000,0x2000,0x2000,0x0,0x2000,0x0,0x0,0x0,0x400,0x3000,0x400,0x400,0x400,0x400,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x4,0x8,0xc0,0x0,0x0,0x0,0x0,0x30,0x30,0x0,0x30,0x80,0x40,0xc0,0x100,0x0,0x0,0x0,0x200,0x200,0x400,0x1de6800,0xde4000,0x1002800,0x8000,0x10000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x1000000,0x800,0x2800,0x2000000,0x0,0x8000000,0xc000000,0x1c000000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe8000000,0x0,0x0,0x0,0x0,0xe8000000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x400200,0x0,0x400200,0x400200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400210,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffa00000,0x0,0xffa00000,0xffa00000,0xffa00000,0x0,0xffa00000,0xffa00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400200,0x400200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400210,0x0,0x0,0x400210,0x400210,0x400210,0x0,0x0,0x0,0x400210,0x5,0x0,0x400210,0x400210,0x0,0x5,0x0,0x2,0xffa00000,0x0,0x8,0x0,0x8,0x0,0x400210,0x400210,0x0,0x400200,0x0,0x0,0x0,0x8,0x0,0x400200,0x480,0x0,0x480,0x480,0x0,0x20,0x40,0x480,0x0,0x8,0x8,0x300,0x400,0x20,0x80,0x80,0x0,0x80,0x10,0x400210,0x10,0x400200,0x0,0x400200,0x1000,0x2000,0x3fc000,0x3fc000,0x400200,0x400200,0x40,0x40,0x400,0xffe00200,0xffa00000,0xffe00200,0xffa00000,0x0,0x8,0x8,0x8,0x0,0xffe00600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x180000,0x0,0x180000,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ff,0x0,0x3ff,0x3ff,0x3ff,0x0,0x3ff,0x3ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x0,0x0,0x180000,0x180000,0x180000,0x0,0x0,0x0,0x180000,0x0,0x0,0x180000,0x180000,0x0,0x0,0x0,0x0,0x3ff,0x0,0x0,0x0,0x0,0x0,0x180000,0x180000,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x0,0x180000,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x19ffff,0x19ffff,0x19ffff,0x3ff,0x0,0x0,0x0,0x0,0x0,0x19ffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1fc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[13];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public StreamSPARQL1_1Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public StreamSPARQL1_1Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new StreamSPARQL1_1ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 178; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 178; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public StreamSPARQL1_1Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new StreamSPARQL1_1ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 178; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 178; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public StreamSPARQL1_1Parser(StreamSPARQL1_1ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 178; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(StreamSPARQL1_1ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 178; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[181];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 178; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 181; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
