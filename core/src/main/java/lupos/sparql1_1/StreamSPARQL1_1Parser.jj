/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. StreamSPARQL1_1Parser.jj */
/*@egen*/ /* -------------  SPARQL - Parser -----------------*/options{  IGNORE_CASE = true;                                   
                            // do not generates jjtree nodes by default
  JAVA_UNICODE_ESCAPE = true;                   STATIC = false;}PARSER_BEGIN(StreamSPARQL1_1Parser)package lupos.sparql1_1;import java.io.*;import java.util.HashSet;public class StreamSPARQL1_1Parser/*@bgen(jjtree)*/implements StreamSPARQL1_1ParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTStreamSPARQL1_1ParserState jjtree = new JJTStreamSPARQL1_1ParserState();

/*@egen*/  public static void main(String args [])  {    System.out.println("enter query...");    StreamSPARQL1_1Parser parser = new StreamSPARQL1_1Parser(System.in);    try    {            	parser.expr();      	System.out.println("Result:");			((SimpleNode) parser.jjtree.rootNode()).dump("|");} catch(Exception e){ System.out.println(e); e.printStackTrace();}  }  public static SimpleNode parse(String query) throws ParseException  {    StreamSPARQL1_1Parser parser = new StreamSPARQL1_1Parser(new StringReader(query));    switch (parser.expr())    {      default :		try {	 		return ((SimpleNode) parser.jjtree.rootNode());		} catch(Exception e) {			return null;		}      case 0 : return null;      case - 1 : return null;    }  }  protected HashSet < String > declaredPrefixes = new HashSet < String > ();}PARSER_END(StreamSPARQL1_1Parser)void GroupGraphPatternsAndRDFTermsEOF()                 :{/*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GroupConstraint */
        try {
/*@egen*/ 	(GroupGraphPattern())*(VarOrTerm())* < EOF >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void N3GroupGraphPatternsAndRDFTermsEOF()                 :{/*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GroupConstraint */
        try {
/*@egen*/	(N3GroupConstraint())*(GraphTerm())* <EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void N3GroupConstraint()                  :{/*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GroupConstraint */
 try {
/*@egen*/ "{" (N3TriplesSet() (".")?)* "}"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}void N3TriplesSet()          :{/*@bgen(jjtree) TripleSet */
  ASTTripleSet jjtn000 = new ASTTripleSet(JJTTRIPLESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TripleSet */
  try {
/*@egen*/  GraphTerm() (URI() | BlankNode()) GraphTerm()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ConstraintEOF() :{}{  (    Constraint() < EOF >  )}void VarOrTermEOF() :{}{  (    VarOrTerm() < EOF >  )}void GraphTermEOF() :{}{  (    GraphTerm() < EOF >  )}void VerbEOF() :{}{  (    Verb() < EOF >  )}void VerbWithoutVarEOF() :{}{  (    URI()  | (/*@bgen(jjtree) AVerbType */
     {
       ASTAVerbType jjtn001 = new ASTAVerbType(JJTAVERBTYPE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/"a"/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
     }
/*@egen*/           )  )  < EOF >}void GroupGraphPatternEOF() :{}{  GroupGraphPattern() < EOF >}void VarEOF() :{}{  (    Var() < EOF >  )}void SourceSelectorEOF() :{}{  (    SourceSelector() < EOF >  )}void OrderConditionEOF() :{}{  (    OrderCondition() < EOF >  )}void VarOrBlankNodeOrIRIrefEOF() :{}{  (    VarOrBlankNodeOrIRIref() < EOF >  )}void VarOrURIEOF() :{}{  (    VarOrURI() < EOF >  )}SKIP :{  " "| "\t"| "\n"| "\r"| < "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? > //NEW SKIP COMMENTS JK
}TOKEN :{  < IRI_REF :    (      "<" ("#")? (~[ "\n", "\r", ">", "<", " " ])* ("#")? ">"    )  |    (      "<"      (        (          "aaa"        | "aaas"        | "acap"        | "cap"        | "cid"        | "crid"        | "data"        | "dav"        | "dict"        | "dns"        | "fax"        | "file"        | "ftp"        | "go"        | "gopher"        | "h323"        | "http"        | "https"        | "iax"        | "icap"        | "im"        | "imap"        | "info"        | "ipp"        | "iris"        | "iris.beep"        | "iris.xpc"        | "iris.xpcs"        | "iris.lwz"        | "ldap"        | "mailto"        | "mid"        | "modem"        | "msrp"        | "msrps"        | "mtqp"        | "mupdate"        | "news"        | "nfs"        | "nntp"        | "opaquelocktoken"        | "pop"        | "pres"        | "rtsp"        | "service"        | "shttp"        | "sip"        | "sips"        | "snmp"        | "soap.beep"        | "soap.beeps"        | "tag"        | "tel"        | "telnet"        | "tftp"        | "thismessage"        | "tip"        | "tv"        | "urn"        | "vemmi"        | "xmlrpc.beep"        | "xmlrpc.beeps"        | "xmpp"        | "z39.50r"        | "z39.50s"        | "afs"        | "dtn"        | "mailserver"        | "pack"        | "tn3270"        | "prospero"        | "snews"        | "videotex"        | "wais"        )        ":" (~[ "\n", "\r", ">", "<", " " ])*      )?      ">"    ) >| < #VARNAME :    (      < PN_CHARS_U >    | [ "0"-"9" ]    )    (      < PN_CHARS_U >    | [ "0"-"9" ]    | "\u00b7"    | [ "\u0300"-"\u036f" ]    | [ "\u203f"-"\u2040" ]    )* >| < PNAME_NS : (< PN_PREFIX >)? ":" >| < PNAME_LN : < PNAME_NS > < PN_LOCAL > >| < BLANK_NODE_LABEL :    "_:"    (      < PN_CHARS_U >    | [ "0"-"9" ]    )    (      (        < PN_CHARS >      | "."      )*      < PN_CHARS >    )? >| < VAR :    < VAR1 >  | < VAR2 > >| < VAR1 : "?" < VARNAME > >| < VAR2 : "$" < VARNAME > >| < LANGTAG :    "@" ([ "a"-"z", "A"-"Z" ])+    (      "-" ([ "a"-"z", "A"-"Z", "0"-"9" ])+    )* >| < INTEGER : ([ "0"-"9" ])+ >| < DECIMAL : (([ "0"-"9" ])* "." ([ "0"-"9" ])+) |               // the next alternative is based on the testcases of SPARQL 1.0              (([ "0"-"9" ])+ "." ([ "0"-"9" ])*)>| < DOUBLE :    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* < EXPONENT >  | "." ([ "0"-"9" ])+ < EXPONENT >  | ([ "0"-"9" ])+ < EXPONENT > >// | < INTEGER_POSITIVE : "+" < INTEGER > > // now integrated into the grammar...// | < DECIMAL_POSITIVE : "+" < DECIMAL > >// | < DOUBLE_POSITIVE : "+" < DOUBLE > >// | < INTEGER_NEGATIVE : "-" < INTEGER > >// | < DECIMAL_NEGATIVE : "-" < DECIMAL > >// | < DOUBLE_NEGATIVE : "-" < DOUBLE > >| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >| < STRING_LITERAL1 :    "'"    (      (~[ "\\", "\n", "\r", "'" ])    | ("\\" ~[ "\n", "\r" ])    )*    "'" >| < STRING_LITERAL2 :    "\""    (      (~[ "\\", "\n", "\r", "\"" ])    | ("\\" ~[ "\n", "\r" ])    )*    "\"" >| < STRING_LITERAL_LONG1 :    "'''"    (      (~[ "\\", "'" ])    | ("\\" ~[ "\n", "\r" ])    )*    "'''" >| < STRING_LITERAL_LONG2 :    "\"\"\""    (      (~[ "\\", "\"" ])    | ("\\" ~[ "\n", "\r" ])    )*    "\"\"\"" >| < NIL : "(" (< WS >)* ")" >| < #WS :    " "  | "	"  | "\r"  | "\n" >| < ANON : "[" (< WS >)* "]" >| < #PN_CHARS_BASE :    [ "A"-"Z" ]  | [ "a"-"z" ]  | [ "\u00c0"-"\u00d6" ]  | [ "\u00d8"-"\u00f6" ]  | [ "\u00f8"-"\u02ff" ]  | [ "\u0370"-"\u037d" ]  | [ "\u037f"-"\u1fff" ]  | [ "\u200c"-"\u200d" ]  | [ "\u2070"-"\u218f" ]  | [ "\u2c00"-"\u2fef" ]  | [ "\u3001"-"\ud7ff" ]  | [ "\uf900"-"\ufdcf" ]  | [ "\ufdf0"-"\ufffd" ]  | [ "\u1000"-"\uefff" ] >| < #PN_CHARS_U :    < PN_CHARS_BASE >  | "_" >| < #PN_CHARS :    < PN_CHARS_U >  | "-"  | [ "0"-"9" ]  | "\u00b7"  | [ "\u0300"-"\u036f" ]  | [ "\u203f"-"\u2040" ] >| < #PN_PREFIX :    < PN_CHARS_BASE >    (      (        < PN_CHARS >      | "."      )*      < PN_CHARS >    )? >| < #PN_LOCAL :    (      < PN_CHARS_U >    | [ "0"-"9" ]    | < PLX >    )    (      (        < PN_CHARS >      | "."      | < PLX >      | "\\:" // added: escaped colon (according to SPARQL 1.1 testcases)!      )*      (        < PN_CHARS >      | < PLX >      )    )? >| < #PLX :    < PERCENT >  | < PN_LOCAL_ESC > >| < #PERCENT : "%" < HEX > < HEX > >| < #HEX :    [ "0"-"9" ]  | [ "A"-"F" ]  | [ "a"-"f" ] >| < #PN_LOCAL_ESC :    ("\005F")  | ("\007E")  | ("\002E")  | ("\002D")  | ("\0021")  | ("\0024")  | ("\0026")  | ("\0027")  | ("\0028")  | ("\0029")  | ("\002A")  | ("\002B")  | ("\002C")  | ("\003B")  | ("\003D")  | ("\003A")  | ("\002F")  | ("\003F")  | ("\0023")  | ("\0040")  | ("\0025") >}int expr() :{}{  (    QueryOrUpdate() < EOF >    {      return 1;    }  )}void QueryOrUpdate()        :{/*@bgen(jjtree) Query */
  ASTQuery jjtn000 = new ASTQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Query */
  try {
/*@egen*/  Prologue()  (    (    	(	    	SelectQuery()  			| ConstructQuery()  			| DescribeQuery()  			| AskQuery()  		)  		BindingsClause()  	)//  	|//  	(//  		Update1() (";" (Update1())?)*//  	)  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }//1
void QueryUnit() :{}{  Query()}//2
void Query()        :{/*@bgen(jjtree) Query */
  ASTQuery jjtn000 = new ASTQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Query */
  try {
/*@egen*/  Prologue()  (    SelectQuery()  | ConstructQuery()  | DescribeQuery()  | AskQuery()  )  BindingsClause()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//3
void UpdateUnit() :{}{  Update()}//4
void Prologue() :{}{  (    BaseDecl()  | PrefixDecl()  )*}//5
void BaseDecl()           :{/*@bgen(jjtree) BaseDecl */
  ASTBaseDecl jjtn000 = new ASTBaseDecl(JJTBASEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BaseDecl */
  try {
/*@egen*/  "BASE" QuotedURIref()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//6
void PrefixDecl()             :{/*@bgen(jjtree) PrefixDecl */
  ASTPrefixDecl jjtn000 = new ASTPrefixDecl(JJTPREFIXDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token qName;}{/*@bgen(jjtree) PrefixDecl */
  try {
/*@egen*/  "PREFIX" qName = < PNAME_NS > QuotedURIref()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    String prefix = qName.image.substring(0, qName.image.indexOf(":"));    jjtn000.setPrefix(prefix);    declaredPrefixes.add(prefix);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//7
void SelectQuery()              :{/*@bgen(jjtree) SelectQuery */
  ASTSelectQuery jjtn000 = new ASTSelectQuery(JJTSELECTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectQuery */
  try {
/*@egen*/  SelectClause(jjtn000)  // Added STREAM  (STREAM())?  // and removed DatasetClause!  // (DatasetClause())*   WhereClause() SolutionModifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//8
void SubSelect()              :{/*@bgen(jjtree) SelectQuery */
  ASTSelectQuery jjtn000 = new ASTSelectQuery(JJTSELECTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectQuery */
  try {
/*@egen*/  SelectClause(jjtn000) WhereClause() SolutionModifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//9
void SelectClause(ASTSelectQuery select) :{}{  "SELECT"  (    (      "DISTINCT"      {        select.setDistinct(true);      }    )  |    (      "REDUCED"      {        select.setReduced(true);      }    )  )?  (    (      (        LOOKAHEAD(2)        Var()      |        As()      )    )+  |    (      (        "*"        {          select.setSelectAll(true);        }      )    )  )}void As()     :{/*@bgen(jjtree) As */
  ASTAs jjtn000 = new ASTAs(JJTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) As */
  try {
/*@egen*/  "(" Expression() "AS" Var() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//10
void ConstructQuery()                 :{/*@bgen(jjtree) ConstructQuery */
  ASTConstructQuery jjtn000 = new ASTConstructQuery(JJTCONSTRUCTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConstructQuery */
  try {
/*@egen*/  "CONSTRUCT"  (    ConstructTemplate()    // Added STREAM    (STREAM())?    // and removed DatasetClause!    // (DatasetClause())*     WhereClause() SolutionModifier()  |    // Added STREAM    (STREAM())?    // and removed DatasetClause!    // (DatasetClause())*     ConstructQueryWherePart()    SolutionModifier()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ConstructQueryWherePart()                  :{/*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GroupConstraint */
    try {
/*@egen*/     "WHERE" "{"    (      TriplesTemplate()    )?    "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}//11
void DescribeQuery()                :{/*@bgen(jjtree) DescribeQuery */
  ASTDescribeQuery jjtn000 = new ASTDescribeQuery(JJTDESCRIBEQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DescribeQuery */
  try {
/*@egen*/  "DESCRIBE"  (    (      VarOrIRIref()    )+  |    (      "*"      {        jjtn000.setDescribeAll(true);      }    )  )  // Added STREAM  (STREAM())?  // and removed DatasetClause!  // (DatasetClause())*   (    WhereClause()  )?  SolutionModifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//12
void AskQuery()           :{/*@bgen(jjtree) AskQuery */
  ASTAskQuery jjtn000 = new ASTAskQuery(JJTASKQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AskQuery */
  try {
/*@egen*/  "ASK"  // Added STREAM  (STREAM())?  // and removed DatasetClause!  // (DatasetClause())*   WhereClause() SolutionModifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}// added:// Determines how often an intermediate result is computed:// DURATION 5000 means every 5000 milliseconds, i.e., every 5 seconds// TRIPLES 10 means every time after 10 triples have been read// Default is STREAM INTERMEDIATERESULT TRIPLES 1, i.e., the intermediate result is// computed every time after reading the next triple from the streamvoid STREAM()       :{/*@bgen(jjtree) Stream */
                      ASTStream jjtn000 = new ASTStream(JJTSTREAM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Stream */
        try {
/*@egen*/	"STREAM" ("INTERMEDIATERESULT" 	("DURATION" {jjtn000.setDuration();} | "TRIPLES" {jjtn000.setTriples();}) 	t=<INTEGER> {jjtn000.setValue(Integer.parseInt(t.image));})?/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}// START and END contain conditions when the window is started or ended// Default is WINDOW SLIDINGTRIPLES INFINITY START true() END false()void WINDOW()       :{/*@bgen(jjtree) Window */
  ASTWindow jjtn000 = new ASTWindow(JJTWINDOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Window */
        try {
/*@egen*/	"WINDOW" (TYPE())? (/*@bgen(jjtree) Start */
                            {
                              ASTStart jjtn001 = new ASTStart(JJTSTART);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/"START"/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
                            }
/*@egen*/        Constraint())? (/*@bgen(jjtree) End */
                                                           {
                                                             ASTEnd jjtn002 = new ASTEnd(JJTEND);
                                                             boolean jjtc002 = true;
                                                             jjtree.openNodeScope(jjtn002);
                                                           }
                                                           try {
/*@egen*/"END"/*@bgen(jjtree)*/
                                                           } finally {
                                                             if (jjtc002) {
                                                               jjtree.closeNodeScope(jjtn002, true);
                                                             }
                                                           }
/*@egen*/      Constraint())? GroupGraphPattern()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}// to do: add support for tumbling window, landmark window, ...void TYPE()     :{/*@bgen(jjtree) Type */
                  ASTType jjtn000 = new ASTType(JJTTYPE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Type */
        try {
/*@egen*/	"TYPE"	(	  ("INSTANCE" IRIref()	  (	    "SLIDINGDURATION" {jjtn000.setInstancesDuration();}	  |	  	"SLIDINGINSTANCES" {jjtn000.setInstancesNumber();}	  )	  )	|	(	 ("SLIDINGDURATION" {jjtn000.setDuration();} | 	 "SLIDINGTRIPLES" {jjtn000.setTriples();})))	 t=<INTEGER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.setValue(Integer.parseInt(t.image));}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}//13
void DatasetClause() :{}{  "FROM"  (    DefaultGraphClause()  | NamedGraphClause()  )}//14
void DefaultGraphClause()               :{/*@bgen(jjtree) DefaultGraph */
  ASTDefaultGraph jjtn000 = new ASTDefaultGraph(JJTDEFAULTGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DefaultGraph */
  try {
/*@egen*/  SourceSelector()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//15
void NamedGraphClause()             :{/*@bgen(jjtree) NamedGraph */
  ASTNamedGraph jjtn000 = new ASTNamedGraph(JJTNAMEDGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NamedGraph */
  try {
/*@egen*/  "NAMED" SourceSelector()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//16
void SourceSelector() :{}{  IRIref()}//17
void WhereClause() :{}{  ("WHERE")? GroupGraphPattern()}//18
void SolutionModifier() :{}{  (    GroupClause()  )?  (    HavingClause()  )?  (    OrderClause()  )?  (    LimitOffsetClauses()  )?}//19
void GroupClause()        :{/*@bgen(jjtree) Group */
  ASTGroup jjtn000 = new ASTGroup(JJTGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Group */
  try {
/*@egen*/  "GROUP" "BY"  (    GroupCondition()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//20
void GroupCondition() :{}{  BuiltInCall()| FunctionCall()|  (    "(" Expression()    (      "AS"/*@bgen(jjtree) #As( 2) */
           {
             ASTAs jjtn001 = new ASTAs(JJTAS);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ Var()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/           )?    ")"  )| Var()}//21
void HavingClause()         :{/*@bgen(jjtree) Having */
  ASTHaving jjtn000 = new ASTHaving(JJTHAVING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Having */
  try {
/*@egen*/  "HAVING"  (    HavingCondition()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//22
void HavingCondition() :{}{  Constraint()}//23
void OrderClause()                  :{/*@bgen(jjtree) OrderConditions */
  ASTOrderConditions jjtn000 = new ASTOrderConditions(JJTORDERCONDITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrderConditions */
  try {
/*@egen*/  "ORDER" "BY"  (    OrderCondition()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//24
void OrderCondition() :{}{  (    (      (/*@bgen(jjtree) #AscOrder(true) */
        {
          ASTAscOrder jjtn001 = new ASTAscOrder(JJTASCORDER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/        "ASC"/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/                )  |    (/*@bgen(jjtree) #DescOrder(true) */
      {
        ASTDescOrder jjtn002 = new ASTDescOrder(JJTDESCORDER);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/      "DESC"/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/               ))BrackettedExpression())|(  Constraint()| Var())}//25
void LimitOffsetClauses() :{}{  (    LimitClause()    (      OffsetClause()    )?  )|  (    OffsetClause()    (      LimitClause()    )?  )}//26
void LimitClause()        :{/*@bgen(jjtree) Limit */
  ASTLimit jjtn000 = new ASTLimit(JJTLIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token limit;}{/*@bgen(jjtree) Limit */
  try {
/*@egen*/  "LIMIT" limit = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setLimit(limit.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//27
void OffsetClause()         :{/*@bgen(jjtree) Offset */
  ASTOffset jjtn000 = new ASTOffset(JJTOFFSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token offset;}{/*@bgen(jjtree) Offset */
  try {
/*@egen*/  "OFFSET" offset = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setOffset(offset.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//28
void BindingsClause() :{}{  (InnerBindingsClause())?}void InnerBindingsClause()           :{/*@bgen(jjtree) Bindings */
  ASTBindings jjtn000 = new ASTBindings(JJTBINDINGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Bindings */
    try {
/*@egen*/    (      "BINDINGS"     )    (      Var()    )*    "{"    ( sequenceOfBindingValues() |/*@bgen(jjtree) NIL */
                                  {
                                    ASTNIL jjtn001 = new ASTNIL(JJTNIL);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ < NIL >/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
                                  }
/*@egen*/      )*    "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}void sequenceOfBindingValues()           :{/*@bgen(jjtree) PlusNode */
  ASTPlusNode jjtn000 = new ASTPlusNode(JJTPLUSNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlusNode */
        try {
/*@egen*/	"(" (BindingValue())* ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}//29
void BindingValue() :{}{  IRIref()| RDFLiteral()| NumericLiteral()| BooleanLiteral()|/*@bgen(jjtree) Undef */
  {
    ASTUndef jjtn001 = new ASTUndef(JJTUNDEF);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ "UNDEF"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       }//30
void Update() :{}{  Prologue()  (    Update1()    (      ";" Update()    )?  )?}//31
void Update1() :{}{  Load()| Clear()| Drop()| Add()| Move()| Copy()| Create()  | LOOKAHEAD("INSERT" "DATA") InsertData()| LOOKAHEAD("DELETE" "DATA") DeleteData()| LOOKAHEAD("DELETE" "WHERE") DeleteWhere()| Modify()}//32
void Load()       :{/*@bgen(jjtree) Load */
  ASTLoad jjtn000 = new ASTLoad(JJTLOAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Load */
  try {
/*@egen*/  "LOAD" ("SILENT" {jjtn000.setSilent();} )? IRIref()  (    "INTO" GraphRef()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//33
void Clear()        :{/*@bgen(jjtree) Clear */
  ASTClear jjtn000 = new ASTClear(JJTCLEAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Clear */
  try {
/*@egen*/  "CLEAR" ("SILENT" {jjtn000.setSilent();} )? GraphRefAll()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//34
void Drop()       :{/*@bgen(jjtree) Drop */
  ASTDrop jjtn000 = new ASTDrop(JJTDROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Drop */
  try {
/*@egen*/  "DROP" ("SILENT" {jjtn000.setSilent();} )? GraphRefAll()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//35
void Create()         :{/*@bgen(jjtree) Create */
  ASTCreate jjtn000 = new ASTCreate(JJTCREATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Create */
  try {
/*@egen*/  "CREATE" ("SILENT" {jjtn000.setSilent();} )? GraphRef()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//36
void Add()      :{/*@bgen(jjtree) Add */
  ASTAdd jjtn000 = new ASTAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Add */
  try {
/*@egen*/  "ADD" ("SILENT" {jjtn000.setSilent();} )? GraphOrDefault() "TO" GraphOrDefault()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//37
void Move()       :{/*@bgen(jjtree) Move */
  ASTMove jjtn000 = new ASTMove(JJTMOVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Move */
  try {
/*@egen*/  "MOVE" ("SILENT" {jjtn000.setSilent();} )? GraphOrDefault() "TO" GraphOrDefault()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//38
void Copy()       :{/*@bgen(jjtree) Copy */
  ASTCopy jjtn000 = new ASTCopy(JJTCOPY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Copy */
  try {
/*@egen*/  "COPY" ("SILENT" {jjtn000.setSilent();} )? GraphOrDefault() "TO" GraphOrDefault()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//39
void InsertData()         :{/*@bgen(jjtree) Insert */
  ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Insert */
  try {
/*@egen*/  "INSERT" "DATA" QuadData()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//40
void DeleteData()         :{/*@bgen(jjtree) Delete */
  ASTDelete jjtn000 = new ASTDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Delete */
  try {
/*@egen*/  "DELETE" "DATA"  {jjtn000.setDeleteData();}  QuadData()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//41
void DeleteWhere()         :{/*@bgen(jjtree) Modify */
  ASTModify jjtn000 = new ASTModify(JJTMODIFY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Modify */
  try {
/*@egen*/  "DELETE" "WHERE" InterDeleteWhere()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InterDeleteWhere()         :{/*@bgen(jjtree) Delete */
  ASTDelete jjtn000 = new ASTDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Delete */
  try {
/*@egen*/  QuadPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//42
void Modify()         :{/*@bgen(jjtree) Modify */
  ASTModify jjtn000 = new ASTModify(JJTMODIFY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Modify */
  try {
/*@egen*/  (    "WITH" IRIref()  )?  (    (      DeleteClause()      (        InsertClause()      )?    )  | InsertClause()  )  (    UsingClause()  )*  "WHERE" GroupGraphPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//43
void DeleteClause()         :{/*@bgen(jjtree) Delete */
  ASTDelete jjtn000 = new ASTDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Delete */
  try {
/*@egen*/  "DELETE" QuadPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//44
void InsertClause()         :{/*@bgen(jjtree) Insert */
  ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Insert */
  try {
/*@egen*/  "INSERT" QuadPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//45
void UsingClause() :{}{  "USING"  (UsingDefault() | UsingNamed())}void UsingDefault()               :{/*@bgen(jjtree) DefaultGraph */
  ASTDefaultGraph jjtn000 = new ASTDefaultGraph(JJTDEFAULTGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DefaultGraph */
        try {
/*@egen*/	IRIref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void UsingNamed()             :{/*@bgen(jjtree) NamedGraph */
  ASTNamedGraph jjtn000 = new ASTNamedGraph(JJTNAMEDGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NamedGraph */
        try {
/*@egen*/	"NAMED" IRIref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}//46
void GraphOrDefault() :{}{/*@bgen(jjtree) Default */
  {
    ASTDefault jjtn001 = new ASTDefault(JJTDEFAULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  "DEFAULT"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         |  (    ("GRAPH")? IRIref()  )}//47
void GraphRef() :{}{  "GRAPH" IRIref()}//48
void GraphRefAll() :{}{  GraphRef()|/*@bgen(jjtree) Default */
  {
    ASTDefault jjtn001 = new ASTDefault(JJTDEFAULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ "DEFAULT"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         |/*@bgen(jjtree) Named */
  {
    ASTNamed jjtn002 = new ASTNamed(JJTNAMED);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ "NAMED"/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/       |/*@bgen(jjtree) All */
  {
    ASTAll jjtn003 = new ASTAll(JJTALL);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ "ALL"/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/     }//49
void QuadPattern()                    :{/*@bgen(jjtree) ConstructTemplate */
  ASTConstructTemplate jjtn000 = new ASTConstructTemplate(JJTCONSTRUCTTEMPLATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConstructTemplate */
  try {
/*@egen*/  "{" Quads() "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//50
void QuadData()                    :{/*@bgen(jjtree) ConstructTemplate */
  ASTConstructTemplate jjtn000 = new ASTConstructTemplate(JJTCONSTRUCTTEMPLATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConstructTemplate */
  try {
/*@egen*/  "{" Quads() "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//51
void Quads() :{}{  (    TriplesTemplate()  )?  (    QuadsNotTriples() (".")?    (      TriplesTemplate()    )?  )*}//52
void QuadsNotTriples()                  :{/*@bgen(jjtree) GraphConstraint */
  ASTGraphConstraint jjtn000 = new ASTGraphConstraint(JJTGRAPHCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GraphConstraint */
  try {
/*@egen*/  "GRAPH" VarOrIRIref() "{"  (    TriplesTemplate()  )?  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//53
void TriplesTemplate() :{}{  TriplesSameSubject()  (    "."    (      TriplesTemplate()    )?  )?}//54
void GroupGraphPattern()                  :{/*@bgen(jjtree) GroupConstraint */
  ASTGroupConstraint jjtn000 = new ASTGroupConstraint(JJTGROUPCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GroupConstraint */
  try {
/*@egen*/  "{"  (    SubSelect()  // | GroupGraphPatternSub()  // added WindowInGroup():     | WindowInGroup()  | GroupGraphPatternSub()  )  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}// added for stream-based evaluation...void WindowInGroup():{}{  WINDOW()  GroupGraphPatternSub()  (    WindowInGroup()  )?}  //55
void GroupGraphPatternSub() :{}{  (    TriplesBlock()  )?  (    (      GraphPatternNotTriples()    )    (".")?    (      TriplesBlock()    )?  )*}//56
void TriplesBlock() :{}{  TriplesSameSubjectPath()  (    "."    (      TriplesBlock()    )?  )?}//57
void GraphPatternNotTriples() :{}{  GroupOrUnionGraphPattern()| OptionalGraphPattern()| MinusGraphPattern()| GraphGraphPattern()| ServiceGraphPattern()| Filter()| Bind()}//58
void OptionalGraphPattern()                     :{/*@bgen(jjtree) OptionalConstraint */
  ASTOptionalConstraint jjtn000 = new ASTOptionalConstraint(JJTOPTIONALCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OptionalConstraint */
  try {
/*@egen*/  "OPTIONAL" GroupGraphPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//59
void GraphGraphPattern()                  :{/*@bgen(jjtree) GraphConstraint */
  ASTGraphConstraint jjtn000 = new ASTGraphConstraint(JJTGRAPHCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GraphConstraint */
  try {
/*@egen*/  "GRAPH" VarOrIRIref() GroupGraphPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//60
void ServiceGraphPattern()          :{/*@bgen(jjtree) Service */
  ASTService jjtn000 = new ASTService(JJTSERVICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Service */
  try {
/*@egen*/  "SERVICE" ("SILENT" {jjtn000.setSilent();} )? VarOrIRIref() GroupGraphPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//61
void Bind()       :{/*@bgen(jjtree) Bind */
  ASTBind jjtn000 = new ASTBind(JJTBIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Bind */
  try {
/*@egen*/  "BIND" "(" Expression() "AS" Var() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//62
void MinusGraphPattern()        :{/*@bgen(jjtree) Minus */
  ASTMinus jjtn000 = new ASTMinus(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Minus */
  try {
/*@egen*/  "MINUS" GroupGraphPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//63
void GroupOrUnionGraphPattern() :{}{  GroupGraphPattern()  (    "UNION"/*@bgen(jjtree) #UnionConstraint( 2) */
            {
              ASTUnionConstraint jjtn001 = new ASTUnionConstraint(JJTUNIONCONSTRAINT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ GroupGraphPattern()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/                    )*}//64
void Filter() :{}{  "FILTER" Constraint()}//65
void Constraint()                   :{/*@bgen(jjtree) FilterConstraint */
  ASTFilterConstraint jjtn000 = new ASTFilterConstraint(JJTFILTERCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FilterConstraint */
  try {
/*@egen*/  BrackettedExpression()| BuiltInCall()| FunctionCall()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//66
void FunctionCall()               :{/*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionCall */
  try {
/*@egen*/  IRIref() ArgList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//67
void ArgList()            :{/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Arguments */
  try {
/*@egen*/  < NIL >|  (    "(" ("DISTINCT")? Expression()    (      "," Expression()    )*    ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//68
void ExpressionList()                 :{/*@bgen(jjtree) ExpressionList */
  ASTExpressionList jjtn000 = new ASTExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ExpressionList */
  try {
/*@egen*/  < NIL >|  (    "(" Expression()    (      "," Expression()    )*    ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//69
void ConstructTemplate()                    :{/*@bgen(jjtree) ConstructTemplate */
  ASTConstructTemplate jjtn000 = new ASTConstructTemplate(JJTCONSTRUCTTEMPLATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConstructTemplate */
  try {
/*@egen*/  "{"  (    ConstructTriples()  )?  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//70
void ConstructTriples() :{}{  TriplesSameSubject()  (    "."    (      ConstructTriples()    )?  )?}//71
void TriplesSameSubject() :{}{  LOOKAHEAD("("|"[")/*@bgen(jjtree) NodeSet */
                     {
                       ASTNodeSet jjtn001 = new ASTNodeSet(JJTNODESET);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ (TriplesNode() PropertyList())/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
                     }
/*@egen*/           |/*@bgen(jjtree) TripleSet */
    {
      ASTTripleSet jjtn002 = new ASTTripleSet(JJTTRIPLESET);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (VarOrTerm() PropertyListNotEmpty())/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/           }//72
void PropertyListNotEmpty():{}{  Verb()  ObjectList()  (    ";"    (      Verb() ObjectList()    )?  )*}//73
void PropertyList() :{}{  (    PropertyListNotEmpty()  )?}//74
void ObjectList()            :{/*@bgen(jjtree) ObjectList */
  ASTObjectList jjtn000 = new ASTObjectList(JJTOBJECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ObjectList */
  try {
/*@egen*/  Object()  (    "," Object()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//75
void Object() :{}{  GraphNode()}//76
void Verb() :{}{ VarOrIRIref()| (/*@bgen(jjtree) AVerbType */
   {
     ASTAVerbType jjtn001 = new ASTAVerbType(JJTAVERBTYPE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/"a"/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/           )}//77
void TriplesSameSubjectPath() :{}{  LOOKAHEAD("("|"[")/*@bgen(jjtree) NodeSet */
  {
    ASTNodeSet jjtn001 = new ASTNodeSet(JJTNODESET);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  (TriplesNode() PropertyListPath())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         |/*@bgen(jjtree) TripleSet */
  {
    ASTTripleSet jjtn002 = new ASTTripleSet(JJTTRIPLESET);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/   (    VarOrTerm() PropertyListNotEmptyPath()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/           }//78
void PropertyListNotEmptyPath():{}{  (    VerbPath()  | VerbSimple()  )  ObjectList()  (    ";"    (      (        VerbPath()      | VerbSimple()      )      ObjectList()    )?  )*}//79
void PropertyListPath() :{}{  (    PropertyListNotEmpty()  )?}//80
void VerbPath() :{}{  Path()}//81
void VerbSimple() :{}{  Var()}//82
void Path() :{}{  PathAlternative()}//83
void PathAlternative() :{}{  PathSequence()  (    "|"/*@bgen(jjtree) #PathAlternative( 2) */
        {
          ASTPathAlternative jjtn001 = new ASTPathAlternative(JJTPATHALTERNATIVE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/   // PathSequence() )*  	PathAlternative()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/                      )?}//84
void PathSequence() :{}{  PathEltOrInverse()  (    "/"/*@bgen(jjtree) #PathSequence( 2) */
    {
      ASTPathSequence jjtn001 = new ASTPathSequence(JJTPATHSEQUENCE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/     // PathEltOrInverse()    // )*    PathSequence()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/                   )?}//85
void PathElt() :{}{  PathPrimary()    (    LOOKAHEAD(2)    PathMod()  )?}//86
void PathEltOrInverse() :{}{  PathElt()|  (    "^"/*@bgen(jjtree) #Invers( 1) */
        {
          ASTInvers jjtn001 = new ASTInvers(JJTINVERS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ PathElt()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/             )}//87
void PathMod() :{}{/*@bgen(jjtree) #ArbitraryOccurences( 1) */
  {
    ASTArbitraryOccurences jjtn001 = new ASTArbitraryOccurences(JJTARBITRARYOCCURENCES);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  "*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  1);
    }
  }
/*@egen*/                        |/*@bgen(jjtree) #OptionalOccurence( 1) */
  {
    ASTOptionalOccurence jjtn002 = new ASTOptionalOccurence(JJTOPTIONALOCCURENCE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ "?"/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  1);
    }
  }
/*@egen*/                      |/*@bgen(jjtree) #ArbitraryOccurencesNotZero( 1) */
  {
    ASTArbitraryOccurencesNotZero jjtn003 = new ASTArbitraryOccurencesNotZero(JJTARBITRARYOCCURENCESNOTZERO);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ "+"/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  1);
    }
  }
/*@egen*/                               | ( "{"/*@bgen(jjtree) #GivenOccurences( 1) */
   {
     ASTGivenOccurences jjtn004 = new ASTGivenOccurences(JJTGIVENOCCURENCES);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
   }
   try {
/*@egen*/    (    < INTEGER >    { jjtn004.setLowerLimit(token.image); }    (      ","      (        "}"      | < INTEGER > { jjtn004.setUpperLimit(token.image); } "}"      )      | { jjtn004.setUpperLimit(jjtn004.getLowerLimit()); } "}"    )   | "," < INTEGER > { jjtn004.setUpperLimit(token.image); } "}"   )/*@bgen(jjtree)*/
   } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004,  1);
     }
   }
/*@egen*/                        )}//88
void PathPrimary() :{ Token t;}{  IRIref()| (/*@bgen(jjtree) AVerbType */
   {
     ASTAVerbType jjtn001 = new ASTAVerbType(JJTAVERBTYPE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/"a"/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/           )| ("!" PathNegatedPropertySet())| ("(" Path() ")")}//89
void PathNegatedPropertySet()              :{/*@bgen(jjtree) NegatedPath */
  ASTNegatedPath jjtn000 = new ASTNegatedPath(JJTNEGATEDPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NegatedPath */
  try {
/*@egen*/  PathOneInPropertySet()|  (    "("    (      PathOneInPropertySet()      (        "|" PathOneInPropertySet()      )*    )?    ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//90
void PathOneInPropertySet() :{}{  IRIref()| (/*@bgen(jjtree) AVerbType */
   {
     ASTAVerbType jjtn001 = new ASTAVerbType(JJTAVERBTYPE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/"a"/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/           )| ("^"/*@bgen(jjtree) #Invers( 1) */
       {
         ASTInvers jjtn003 = new ASTInvers(JJTINVERS);
         boolean jjtc003 = true;
         jjtree.openNodeScope(jjtn003);
       }
       try {
/*@egen*/ (IRIref() | (/*@bgen(jjtree) AVerbType */
                    {
                      ASTAVerbType jjtn002 = new ASTAVerbType(JJTAVERBTYPE);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*/"a"/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/           ))/*@bgen(jjtree)*/
       } catch (Throwable jjte003) {
         if (jjtc003) {
           jjtree.clearNodeScope(jjtn003);
           jjtc003 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte003 instanceof RuntimeException) {
           throw (RuntimeException)jjte003;
         }
         if (jjte003 instanceof ParseException) {
           throw (ParseException)jjte003;
         }
         throw (Error)jjte003;
       } finally {
         if (jjtc003) {
           jjtree.closeNodeScope(jjtn003,  1);
         }
       }
/*@egen*/            )}//91
void Integer()          :{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Integer */
  try {
/*@egen*/  < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(token.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//92
void TriplesNode() :{}{  Collection()| BlankNodePropertyList()}//93
void BlankNodePropertyList()                        :{/*@bgen(jjtree) BlankNodePropertyList */
  ASTBlankNodePropertyList jjtn000 = new ASTBlankNodePropertyList(JJTBLANKNODEPROPERTYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BlankNodePropertyList */
  try {
/*@egen*/  "[" PropertyListNotEmpty() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//94
void Collection()             :{/*@bgen(jjtree) Collection */
  ASTCollection jjtn000 = new ASTCollection(JJTCOLLECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Collection */
  try {
/*@egen*/  "("  (    GraphNode()  )+  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//95
void GraphNode() :{}{  LOOKAHEAD(2)  VarOrTerm()| TriplesNode()}//96
void VarOrTerm() :{}{  Var()| GraphTerm()}//97
void VarOrIRIref() :{}{  Var()| IRIref()}//98
void Var()      :{/*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token varName;}{/*@bgen(jjtree) Var */
  try {
/*@egen*/  varName = < VAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setName(varName.image.substring(1));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//99
void GraphTerm() :{}{  IRIref()| RDFLiteral()| NumericLiteral()| BooleanLiteral()| BlankNode()| (/*@bgen(jjtree) NIL */
   {
     ASTNIL jjtn001 = new ASTNIL(JJTNIL);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/< NIL >/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/     )}//100
void Expression() :{}{  ConditionalOrExpression()}//101
void ConditionalOrExpression() :{}{  ConditionalAndExpression()  (    "||"/*@bgen(jjtree) #OrNode( 2) */
         {
           ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ ConditionalAndExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/           )*}//102
void ConditionalAndExpression() :{}{  ValueLogical()  (    "&&"/*@bgen(jjtree) #AndNode( 2) */
         {
           ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ ValueLogical()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/            )*}//103
void ValueLogical() :{}{  RelationalExpression()}//104
void RelationalExpression() :{}{  NumericExpression()  (    (      "="/*@bgen(jjtree) #EqualsNode( 2) */
          {
            ASTEqualsNode jjtn001 = new ASTEqualsNode(JJTEQUALSNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ NumericExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/                 )|  (    "!="/*@bgen(jjtree) #NotEqualsNode( 2) */
         {
           ASTNotEqualsNode jjtn002 = new ASTNotEqualsNode(JJTNOTEQUALSNODE);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
         }
         try {
/*@egen*/ NumericExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             throw (RuntimeException)jjte002;
           }
           if (jjte002 instanceof ParseException) {
             throw (ParseException)jjte002;
           }
           throw (Error)jjte002;
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
           }
         }
/*@egen*/                  )|(  "<"/*@bgen(jjtree) #LessThanNode( 2) */
      {
        ASTLessThanNode jjtn003 = new ASTLessThanNode(JJTLESSTHANNODE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ NumericExpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  2);
        }
      }
/*@egen*/                 )|(  ">"/*@bgen(jjtree) #LessThanEqualsNode( 2) */
      {
        ASTLessThanEqualsNode jjtn004 = new ASTLessThanEqualsNode(JJTLESSTHANEQUALSNODE);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ NumericExpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          throw (RuntimeException)jjte004;
        }
        if (jjte004 instanceof ParseException) {
          throw (ParseException)jjte004;
        }
        throw (Error)jjte004;
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  2);
        }
      }
/*@egen*/                       )|(  "<="/*@bgen(jjtree) #GreaterThanNode( 2) */
       {
         ASTGreaterThanNode jjtn005 = new ASTGreaterThanNode(JJTGREATERTHANNODE);
         boolean jjtc005 = true;
         jjtree.openNodeScope(jjtn005);
       }
       try {
/*@egen*/ NumericExpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte005) {
         if (jjtc005) {
           jjtree.clearNodeScope(jjtn005);
           jjtc005 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte005 instanceof RuntimeException) {
           throw (RuntimeException)jjte005;
         }
         if (jjte005 instanceof ParseException) {
           throw (ParseException)jjte005;
         }
         throw (Error)jjte005;
       } finally {
         if (jjtc005) {
           jjtree.closeNodeScope(jjtn005,  2);
         }
       }
/*@egen*/                    )|(  ">="/*@bgen(jjtree) #GreaterThanEqualsNode( 2) */
       {
         ASTGreaterThanEqualsNode jjtn006 = new ASTGreaterThanEqualsNode(JJTGREATERTHANEQUALSNODE);
         boolean jjtc006 = true;
         jjtree.openNodeScope(jjtn006);
       }
       try {
/*@egen*/ NumericExpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte006) {
         if (jjtc006) {
           jjtree.clearNodeScope(jjtn006);
           jjtc006 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte006 instanceof RuntimeException) {
           throw (RuntimeException)jjte006;
         }
         if (jjte006 instanceof ParseException) {
           throw (ParseException)jjte006;
         }
         throw (Error)jjte006;
       } finally {
         if (jjtc006) {
           jjtree.closeNodeScope(jjtn006,  2);
         }
       }
/*@egen*/                          )|(  "IN"/*@bgen(jjtree) #InNode( 2) */
       {
         ASTInNode jjtn007 = new ASTInNode(JJTINNODE);
         boolean jjtc007 = true;
         jjtree.openNodeScope(jjtn007);
       }
       try {
/*@egen*/ ExpressionList()/*@bgen(jjtree)*/
       } catch (Throwable jjte007) {
         if (jjtc007) {
           jjtree.clearNodeScope(jjtn007);
           jjtc007 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte007 instanceof RuntimeException) {
           throw (RuntimeException)jjte007;
         }
         if (jjte007 instanceof ParseException) {
           throw (ParseException)jjte007;
         }
         throw (Error)jjte007;
       } finally {
         if (jjtc007) {
           jjtree.closeNodeScope(jjtn007,  2);
         }
       }
/*@egen*/           )|(  "NOT" "IN"/*@bgen(jjtree) #NotInNode( 2) */
             {
               ASTNotInNode jjtn008 = new ASTNotInNode(JJTNOTINNODE);
               boolean jjtc008 = true;
               jjtree.openNodeScope(jjtn008);
             }
             try {
/*@egen*/ ExpressionList()/*@bgen(jjtree)*/
             } catch (Throwable jjte008) {
               if (jjtc008) {
                 jjtree.clearNodeScope(jjtn008);
                 jjtc008 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte008 instanceof RuntimeException) {
                 throw (RuntimeException)jjte008;
               }
               if (jjte008 instanceof ParseException) {
                 throw (ParseException)jjte008;
               }
               throw (Error)jjte008;
             } finally {
               if (jjtc008) {
                 jjtree.closeNodeScope(jjtn008,  2);
               }
             }
/*@egen*/              ))?}//105
void NumericExpression() :{}{  AdditiveExpression()}//106
void AdditiveExpression() :{}{  MultiplicativeExpression()  (    ("+"/*@bgen(jjtree) #AdditionNode( 2) */
         {
           ASTAdditionNode jjtn001 = new ASTAdditionNode(JJTADDITIONNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/                 ) | ("-"/*@bgen(jjtree) #SubtractionNode( 2) */
                                                             {
                                                               ASTSubtractionNode jjtn002 = new ASTSubtractionNode(JJTSUBTRACTIONNODE);
                                                               boolean jjtc002 = true;
                                                               jjtree.openNodeScope(jjtn002);
                                                             }
                                                             try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
                                                             } catch (Throwable jjte002) {
                                                               if (jjtc002) {
                                                                 jjtree.clearNodeScope(jjtn002);
                                                                 jjtc002 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte002 instanceof RuntimeException) {
                                                                 throw (RuntimeException)jjte002;
                                                               }
                                                               if (jjte002 instanceof ParseException) {
                                                                 throw (ParseException)jjte002;
                                                               }
                                                               throw (Error)jjte002;
                                                             } finally {
                                                               if (jjtc002) {
                                                                 jjtree.closeNodeScope(jjtn002,  2);
                                                               }
                                                             }
/*@egen*/                    )//   | // NumericLiteralPositive now does not go over the Lexer, but the parser!//    ( NumericLiteralPositive() | NumericLiteralNegative() )//    ( ("*" UnaryExpression() #MultiplicationNode(2)) | ("/" UnaryExpression() #DivisionNode(2)) )?  )*}//107
void MultiplicativeExpression() :{}{  UnaryExpression()  (    (      "*"/*@bgen(jjtree) #MultiplicationNode( 2) */
          {
            ASTMultiplicationNode jjtn001 = new ASTMultiplicationNode(JJTMULTIPLICATIONNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/                         )|  (    "/"/*@bgen(jjtree) #DivisionNode( 2) */
        {
          ASTDivisionNode jjtn002 = new ASTDivisionNode(JJTDIVISIONNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
/*@egen*/                 ))*}//108
void UnaryExpression() :{}{/*@bgen(jjtree) #NotNode( 1) */
{
  ASTNotNode jjtn001 = new ASTNotNode(JJTNOTNODE);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
}
try {
/*@egen*/("!" PrimaryExpression())/*@bgen(jjtree)*/
} catch (Throwable jjte001) {
  if (jjtc001) {
    jjtree.clearNodeScope(jjtn001);
    jjtc001 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte001 instanceof RuntimeException) {
    throw (RuntimeException)jjte001;
  }
  if (jjte001 instanceof ParseException) {
    throw (ParseException)jjte001;
  }
  throw (Error)jjte001;
} finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001,  1);
  }
}
/*@egen*/            | LOOKAHEAD(2)/*@bgen(jjtree) #PlusNode( 1) */
               {
                 ASTPlusNode jjtn002 = new ASTPlusNode(JJTPLUSNODE);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ ("+" PrimaryExpressionWithoutNumericLiteral())/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  1);
                 }
               }
/*@egen*/             | LOOKAHEAD(2)/*@bgen(jjtree) #MinusNode( 1) */
               {
                 ASTMinusNode jjtn003 = new ASTMinusNode(JJTMINUSNODE);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
               }
               try {
/*@egen*/ ("-" PrimaryExpressionWithoutNumericLiteral())/*@bgen(jjtree)*/
               } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   throw (RuntimeException)jjte003;
                 }
                 if (jjte003 instanceof ParseException) {
                   throw (ParseException)jjte003;
                 }
                 throw (Error)jjte003;
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  1);
                 }
               }
/*@egen*/              | PrimaryExpression()}void PrimaryExpressionWithoutNumericLiteral() :{}{  BrackettedExpression()| BuiltInCall()| IRIrefOrFunction()| RDFLiteral()| BooleanLiteral()| Var()| Aggregate()}//109
void PrimaryExpression() :{}{  BrackettedExpression()| BuiltInCall()| IRIrefOrFunction()| RDFLiteral()| NumericLiteral()| BooleanLiteral()| Var()| Aggregate()}//110
void BrackettedExpression() :{}{  "(" Expression() ")"}//111
void BuiltInCall() :{}{  STR()| LANG()| LANGMATCHES()| DATATYPE() | BOUND()| IRIFunc()| URIFunc()| BNODE()| RAND()| ABS()| CEIL()| FLOOR()| ROUND()| CONCAT()| SubstringExpression()| STRLEN()| StrReplaceExpression()| UCASE()| LCASE()| ENCODE_FOR_URI()| CONTAINS()| STRSTARTS()| STRENDS()| STRBEFORE()| STRAFTER()| YEAR()| MONTH()| DAY()| HOURS()| MINUTES()| SECONDS()| TIMEZONE()| TZ()| NOW()| MD5()| SHA1()| SHA256()| SHA384()| SHA512()| COALESCE()| IF()| STRLANG()| STRDT()| sameTerm()| isIRI()| isURI()| isBLANK()| isLITERAL()| isNUMERIC()| RegexExpression()| ExistsFunc()| NotExistsFunc()}void STR()              :{/*@bgen(jjtree) StrFuncNode */
  ASTStrFuncNode jjtn000 = new ASTStrFuncNode(JJTSTRFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StrFuncNode */
        try {
/*@egen*/	"STR" "(" Expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void LANG()               :{/*@bgen(jjtree) LangFuncNode */
  ASTLangFuncNode jjtn000 = new ASTLangFuncNode(JJTLANGFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LangFuncNode */
  try {
/*@egen*/  "LANG" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LANGMATCHES()                      :{/*@bgen(jjtree) LangMatchesFuncNode */
  ASTLangMatchesFuncNode jjtn000 = new ASTLangMatchesFuncNode(JJTLANGMATCHESFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LangMatchesFuncNode */
  try {
/*@egen*/  "LANGMATCHES" "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DATATYPE()                   :{/*@bgen(jjtree) DataTypeFuncNode */
  ASTDataTypeFuncNode jjtn000 = new ASTDataTypeFuncNode(JJTDATATYPEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DataTypeFuncNode */
  try {
/*@egen*/    "DATATYPE" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/} void BOUND()                :{/*@bgen(jjtree) BoundFuncNode */
  ASTBoundFuncNode jjtn000 = new ASTBoundFuncNode(JJTBOUNDFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BoundFuncNode */
  try {
/*@egen*/    "BOUND" "(" Var() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IRIFunc()              :{/*@bgen(jjtree) IriFuncNode */
  ASTIriFuncNode jjtn000 = new ASTIriFuncNode(JJTIRIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IriFuncNode */
  try {
/*@egen*/    "IRI" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void URIFunc()              :{/*@bgen(jjtree) UriFuncNode */
  ASTUriFuncNode jjtn000 = new ASTUriFuncNode(JJTURIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) UriFuncNode */
  try {
/*@egen*/    "URI" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BNODE()                :{/*@bgen(jjtree) BnodeFuncNode */
  ASTBnodeFuncNode jjtn000 = new ASTBnodeFuncNode(JJTBNODEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BnodeFuncNode */
  try {
/*@egen*/    "BNODE"  (    "(" Expression() ")"  | < NIL >  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }void RAND()               :{/*@bgen(jjtree) RandFuncNode */
  ASTRandFuncNode jjtn000 = new ASTRandFuncNode(JJTRANDFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RandFuncNode */
  try {
/*@egen*/    "RAND" < NIL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ABS()              :{/*@bgen(jjtree) ABSFuncNode */
  ASTABSFuncNode jjtn000 = new ASTABSFuncNode(JJTABSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ABSFuncNode */
  try {
/*@egen*/    "ABS" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CEIL()               :{/*@bgen(jjtree) CeilFuncNode */
  ASTCeilFuncNode jjtn000 = new ASTCeilFuncNode(JJTCEILFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CeilFuncNode */
  try {
/*@egen*/    "CEIL" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FLOOR()                :{/*@bgen(jjtree) FloorFuncNode */
  ASTFloorFuncNode jjtn000 = new ASTFloorFuncNode(JJTFLOORFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FloorFuncNode */
  try {
/*@egen*/    "FLOOR" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }void ROUND()                :{/*@bgen(jjtree) RoundFuncNode */
  ASTRoundFuncNode jjtn000 = new ASTRoundFuncNode(JJTROUNDFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RoundFuncNode */
  try {
/*@egen*/    "ROUND" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CONCAT()                 :{/*@bgen(jjtree) ConcatFuncNode */
  ASTConcatFuncNode jjtn000 = new ASTConcatFuncNode(JJTCONCATFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConcatFuncNode */
  try {
/*@egen*/    "CONCAT" ExpressionList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void STRLEN()                 :{/*@bgen(jjtree) StrlenFuncNode */
  ASTStrlenFuncNode jjtn000 = new ASTStrlenFuncNode(JJTSTRLENFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StrlenFuncNode */
  try {
/*@egen*/    "STRLEN" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void UCASE()                :{/*@bgen(jjtree) UcaseFuncNode */
  ASTUcaseFuncNode jjtn000 = new ASTUcaseFuncNode(JJTUCASEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) UcaseFuncNode */
  try {
/*@egen*/    "UCASE" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LCASE()                :{/*@bgen(jjtree) LcaseFuncNode */
  ASTLcaseFuncNode jjtn000 = new ASTLcaseFuncNode(JJTLCASEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LcaseFuncNode */
  try {
/*@egen*/    "LCASE" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }void ENCODE_FOR_URI()                       :{/*@bgen(jjtree) EncodeForUriFuncNode */
  ASTEncodeForUriFuncNode jjtn000 = new ASTEncodeForUriFuncNode(JJTENCODEFORURIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EncodeForUriFuncNode */
  try {
/*@egen*/    "ENCODE_FOR_URI" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CONTAINS()                   :{/*@bgen(jjtree) ContainsFuncNode */
  ASTContainsFuncNode jjtn000 = new ASTContainsFuncNode(JJTCONTAINSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ContainsFuncNode */
  try {
/*@egen*/    "CONTAINS" "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void STRSTARTS()                     :{/*@bgen(jjtree) StrstartsFuncNode */
  ASTStrstartsFuncNode jjtn000 = new ASTStrstartsFuncNode(JJTSTRSTARTSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StrstartsFuncNode */
  try {
/*@egen*/    "STRSTARTS" "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void STRENDS()                  :{/*@bgen(jjtree) StrEndsFuncNode */
  ASTStrEndsFuncNode jjtn000 = new ASTStrEndsFuncNode(JJTSTRENDSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StrEndsFuncNode */
  try {
/*@egen*/    "STRENDS" "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void STRBEFORE()                    :{/*@bgen(jjtree) StrBeforeFuncNode */
  ASTStrBeforeFuncNode jjtn000 = new ASTStrBeforeFuncNode(JJTSTRBEFOREFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StrBeforeFuncNode */
  try {
/*@egen*/    "STRBEFORE" "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void STRAFTER()                   :{/*@bgen(jjtree) StrAfterFuncNode */
  ASTStrAfterFuncNode jjtn000 = new ASTStrAfterFuncNode(JJTSTRAFTERFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StrAfterFuncNode */
  try {
/*@egen*/    "STRAFTER" "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void YEAR()               :{/*@bgen(jjtree) YearFuncNode */
  ASTYearFuncNode jjtn000 = new ASTYearFuncNode(JJTYEARFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) YearFuncNode */
  try {
/*@egen*/    "YEAR" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MONTH()                :{/*@bgen(jjtree) MonthFuncNode */
  ASTMonthFuncNode jjtn000 = new ASTMonthFuncNode(JJTMONTHFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MonthFuncNode */
  try {
/*@egen*/    "MONTH" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DAY()              :{/*@bgen(jjtree) DayFuncNode */
  ASTDayFuncNode jjtn000 = new ASTDayFuncNode(JJTDAYFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DayFuncNode */
  try {
/*@egen*/    "DAY" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void HOURS()                :{/*@bgen(jjtree) HoursFuncNode */
  ASTHoursFuncNode jjtn000 = new ASTHoursFuncNode(JJTHOURSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) HoursFuncNode */
  try {
/*@egen*/    "HOURS" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MINUTES()                  :{/*@bgen(jjtree) MinutesFuncNode */
  ASTMinutesFuncNode jjtn000 = new ASTMinutesFuncNode(JJTMINUTESFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MinutesFuncNode */
  try {
/*@egen*/    "MINUTES" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SECONDS()                  :{/*@bgen(jjtree) SecondsFuncNode */
  ASTSecondsFuncNode jjtn000 = new ASTSecondsFuncNode(JJTSECONDSFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SecondsFuncNode */
  try {
/*@egen*/    "SECONDS" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TIMEZONE()                   :{/*@bgen(jjtree) TimeZoneFuncNode */
  ASTTimeZoneFuncNode jjtn000 = new ASTTimeZoneFuncNode(JJTTIMEZONEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TimeZoneFuncNode */
  try {
/*@egen*/    "TIMEZONE" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TZ()             :{/*@bgen(jjtree) TzFuncNode */
  ASTTzFuncNode jjtn000 = new ASTTzFuncNode(JJTTZFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TzFuncNode */
  try {
/*@egen*/    "TZ" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void NOW()              :{/*@bgen(jjtree) NowFuncNode */
  ASTNowFuncNode jjtn000 = new ASTNowFuncNode(JJTNOWFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NowFuncNode */
  try {
/*@egen*/    "NOW" < NIL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MD5()              :{/*@bgen(jjtree) MD5FuncNode */
  ASTMD5FuncNode jjtn000 = new ASTMD5FuncNode(JJTMD5FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MD5FuncNode */
  try {
/*@egen*/    "MD5" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SHA1()               :{/*@bgen(jjtree) SHA1FuncNode */
  ASTSHA1FuncNode jjtn000 = new ASTSHA1FuncNode(JJTSHA1FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SHA1FuncNode */
  try {
/*@egen*/    "SHA1" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SHA256()                 :{/*@bgen(jjtree) SHA256FuncNode */
  ASTSHA256FuncNode jjtn000 = new ASTSHA256FuncNode(JJTSHA256FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SHA256FuncNode */
  try {
/*@egen*/    "SHA256" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SHA384()                 :{/*@bgen(jjtree) SHA384FuncNode */
  ASTSHA384FuncNode jjtn000 = new ASTSHA384FuncNode(JJTSHA384FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SHA384FuncNode */
  try {
/*@egen*/    "SHA384" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SHA512()                 :{/*@bgen(jjtree) SHA512FuncNode */
  ASTSHA512FuncNode jjtn000 = new ASTSHA512FuncNode(JJTSHA512FUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SHA512FuncNode */
  try {
/*@egen*/    "SHA512" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void COALESCE()                   :{/*@bgen(jjtree) CoalesceFuncNode */
  ASTCoalesceFuncNode jjtn000 = new ASTCoalesceFuncNode(JJTCOALESCEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CoalesceFuncNode */
  try {
/*@egen*/    "COALESCE" ExpressionList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IF()             :{/*@bgen(jjtree) IfFuncNode */
  ASTIfFuncNode jjtn000 = new ASTIfFuncNode(JJTIFFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IfFuncNode */
  try {
/*@egen*/    "IF" "(" Expression() "," Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void STRLANG()                  :{/*@bgen(jjtree) StrLangFuncNode */
  ASTStrLangFuncNode jjtn000 = new ASTStrLangFuncNode(JJTSTRLANGFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StrLangFuncNode */
  try {
/*@egen*/    "STRLANG" "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void STRDT()                :{/*@bgen(jjtree) StrdtFuncNode */
  ASTStrdtFuncNode jjtn000 = new ASTStrdtFuncNode(JJTSTRDTFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StrdtFuncNode */
  try {
/*@egen*/    "STRDT" "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void sameTerm()                   :{/*@bgen(jjtree) SameTermFuncNode */
  ASTSameTermFuncNode jjtn000 = new ASTSameTermFuncNode(JJTSAMETERMFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SameTermFuncNode */
  try {
/*@egen*/    "sameTerm" "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void isIRI()                :{/*@bgen(jjtree) isIRIFuncNode */
  ASTisIRIFuncNode jjtn000 = new ASTisIRIFuncNode(JJTISIRIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) isIRIFuncNode */
  try {
/*@egen*/    "isIRI" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void isURI()                :{/*@bgen(jjtree) isURIFuncNode */
  ASTisURIFuncNode jjtn000 = new ASTisURIFuncNode(JJTISURIFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) isURIFuncNode */
  try {
/*@egen*/    "isURI" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void isBLANK()                  :{/*@bgen(jjtree) isBlankFuncNode */
  ASTisBlankFuncNode jjtn000 = new ASTisBlankFuncNode(JJTISBLANKFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) isBlankFuncNode */
  try {
/*@egen*/    "isBLANK" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void isLITERAL()                    :{/*@bgen(jjtree) isLiteralFuncNode */
  ASTisLiteralFuncNode jjtn000 = new ASTisLiteralFuncNode(JJTISLITERALFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) isLiteralFuncNode */
  try {
/*@egen*/    "isLITERAL" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void isNUMERIC()                    :{/*@bgen(jjtree) isNumericFuncNode */
  ASTisNumericFuncNode jjtn000 = new ASTisNumericFuncNode(JJTISNUMERICFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) isNumericFuncNode */
  try {
/*@egen*/    "isNUMERIC" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//112
void RegexExpression()                :{/*@bgen(jjtree) RegexFuncNode */
  ASTRegexFuncNode jjtn000 = new ASTRegexFuncNode(JJTREGEXFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RegexFuncNode */
  try {
/*@egen*/  "REGEX" "(" Expression() "," Expression()  (    "," Expression()  )?  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//113
void SubstringExpression()                    :{/*@bgen(jjtree) SubstringFuncNode */
  ASTSubstringFuncNode jjtn000 = new ASTSubstringFuncNode(JJTSUBSTRINGFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SubstringFuncNode */
  try {
/*@egen*/  "SUBSTR" "(" Expression() "," Expression()  (    "," Expression()  )?  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//114
void StrReplaceExpression()                     :{/*@bgen(jjtree) StrReplaceFuncNode */
  ASTStrReplaceFuncNode jjtn000 = new ASTStrReplaceFuncNode(JJTSTRREPLACEFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StrReplaceFuncNode */
  try {
/*@egen*/  "REPLACE" "(" Expression() "," Expression() "," Expression()  (    "," Expression()  )?  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//115
void ExistsFunc()         :{/*@bgen(jjtree) Exists */
  ASTExists jjtn000 = new ASTExists(JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Exists */
  try {
/*@egen*/  "EXISTS" GroupGraphPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//116
void NotExistsFunc()            :{/*@bgen(jjtree) NotExists */
  ASTNotExists jjtn000 = new ASTNotExists(JJTNOTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NotExists */
  try {
/*@egen*/  "NOT" "EXISTS" GroupGraphPattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//117
void Aggregate()              :{/*@bgen(jjtree) Aggregation */
  ASTAggregation jjtn000 = new ASTAggregation(JJTAGGREGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Aggregation */
  try {
/*@egen*/  (    "COUNT" {      jjtn000.setTYPE(ASTAggregation.TYPE.COUNT);    }    "(" ("DISTINCT"    {      jjtn000.setDistinct();    }    )?    (      "*"    | Expression()    )    ")"  )|  (    "SUM" {      jjtn000.setTYPE(ASTAggregation.TYPE.SUM);    }    "(" ("DISTINCT"{      jjtn000.setDistinct();    })? Expression() ")"  )|  (    "MIN" {      jjtn000.setTYPE(ASTAggregation.TYPE.MIN);    }    "(" ("DISTINCT"{      jjtn000.setDistinct();    })? Expression() ")"  )|  (    "MAX" {      jjtn000.setTYPE(ASTAggregation.TYPE.MAX);    }    "(" ("DISTINCT"{      jjtn000.setDistinct();    })? Expression() ")"  )|  (    "AVG" {      jjtn000.setTYPE(ASTAggregation.TYPE.AVG);    }    "(" ("DISTINCT"{      jjtn000.setDistinct();    })? Expression() ")"  )|  (    "SAMPLE" {      jjtn000.setTYPE(ASTAggregation.TYPE.SAMPLE);    }    "(" ("DISTINCT"{      jjtn000.setDistinct();    })? Expression() ")"  )|  (    "GROUP_CONCAT" {      jjtn000.setTYPE(ASTAggregation.TYPE.GROUP_CONCAT);    }    "(" ("DISTINCT"{      jjtn000.setDistinct();    })? Expression()    (      ";" "SEPARATOR" "=" String()    )?    ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//118
void IRIrefOrFunction() :{}{  LOOKAHEAD((<IRI_REF>|<PNAME_LN>|<PNAME_NS>)"(")  FunctionCall()  | IRIref()  }//119
//void RDFLiteral() #RDFLiteral ://{}//{//  String()//  (//    < LANGTAG >//  |//    (//      "^^" IRIref()//    )//  )?//}void RDFLiteral()             :												//NOW IS AST NODE{/*@bgen(jjtree) RDFLiteral */
  ASTRDFLiteral jjtn000 = new ASTRDFLiteral(JJTRDFLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RDFLiteral */
        try {
/*@egen*/		LOOKAHEAD((<STRING_LITERAL1>|<STRING_LITERAL2>|<STRING_LITERAL_LONG1>|<STRING_LITERAL_LONG2>)"^^") TypedLiteral() |	LOOKAHEAD((<STRING_LITERAL1>|<STRING_LITERAL2>|<STRING_LITERAL_LONG1>|<STRING_LITERAL_LONG2>)<LANGTAG>) LiteralWithLangTag() | 	String()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/			//CHANGED JK}void TypedLiteral()                  :{/*@bgen(jjtree) DoubleCircumflex */
  ASTDoubleCircumflex jjtn000 = new ASTDoubleCircumflex(JJTDOUBLECIRCUMFLEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DoubleCircumflex */
        try {
/*@egen*/	String() "^^" IRIref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void LiteralWithLangTag()         :{/*@bgen(jjtree) LangTag */
  ASTLangTag jjtn000 = new ASTLangTag(JJTLANGTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LangTag */
        try {
/*@egen*/	String() < LANGTAG >/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.setLangTag(token.image); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}//120
void NumericLiteral() :{}{  NumericLiteralUnsigned()| NumericLiteralPositive()| NumericLiteralNegative()}//121
void NumericLiteralUnsigned() :{}{  NumericLiteralUnsignedInteger()| NumericLiteralUnsignedFloatingPoint()}void NumericLiteralUnsignedInteger()          :{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Integer */
        try {
/*@egen*/	< INTEGER >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.setValue((token.image)); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void NumericLiteralUnsignedFloatingPoint()                :{/*@bgen(jjtree) FloatingPoint */
  ASTFloatingPoint jjtn000 = new ASTFloatingPoint(JJTFLOATINGPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FloatingPoint */
        try {
/*@egen*/	< DECIMAL >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.setValue((token.image)); }| 	< DOUBLE >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.setValue((token.image)); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}//122
void NumericLiteralPositive() :{}{  "+"  ( NumericLiteralPositiveInteger() | NumericLiteralPositiveFloatingPoint())}void NumericLiteralPositiveInteger()          :{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Integer */
        try {
/*@egen*/	< INTEGER >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.setValue("+"+(token.image)); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void NumericLiteralPositiveFloatingPoint()                :{/*@bgen(jjtree) FloatingPoint */
  ASTFloatingPoint jjtn000 = new ASTFloatingPoint(JJTFLOATINGPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FloatingPoint */
        try {
/*@egen*/	(< DECIMAL >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setValue("+"+(token.image)); })| 	(< DOUBLE >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.setValue("+"+(token.image)); })/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}//123
void NumericLiteralNegative() :{}{  "-"  (NumericLiteralNegativeInteger() | NumericLiteralNegativeFloatingPoint())}void NumericLiteralNegativeInteger()          :{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Integer */
        try {
/*@egen*/	< INTEGER >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.setValue("-"+(token.image)); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void NumericLiteralNegativeFloatingPoint()                :{/*@bgen(jjtree) FloatingPoint */
  ASTFloatingPoint jjtn000 = new ASTFloatingPoint(JJTFLOATINGPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FloatingPoint */
        try {
/*@egen*/	(< DECIMAL >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setValue("-"+(token.image)); })| 	(< DOUBLE >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.setValue("-"+(token.image)); })/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}//124
void BooleanLiteral()                 :{/*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BooleanLiteral */
  try {
/*@egen*/  ( "true"/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { jjtn000.setState(true); })| ( "false"/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { jjtn000.setState(false); })/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//125
void String()                :{/*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) StringLiteral */
  try {
/*@egen*/  t = < STRING_LITERAL1 >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setStringLiteral(t.image);  }| t = < STRING_LITERAL2 >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setStringLiteral(t.image);  }| t = < STRING_LITERAL_LONG1 >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setStringLiteral(t.image);  }| t = < STRING_LITERAL_LONG2 >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setStringLiteral(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//126
void IRIref() :{}{  QuotedIriRef()| PrefixedName()}void QuotedIriRef()               :{/*@bgen(jjtree) QuotedURIRef */
  ASTQuotedURIRef jjtn000 = new ASTQuotedURIRef(JJTQUOTEDURIREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token qRef;}{/*@bgen(jjtree) QuotedURIRef */
  try {
/*@egen*/  qRef = < IRI_REF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { jjtn000.setQRef(qRef.image.substring(1, qRef.image.length() - 1)); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//127
void PrefixedName()        :{/*@bgen(jjtree) QName */
  ASTQName jjtn000 = new ASTQName(JJTQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token qName;}{/*@bgen(jjtree) QName */
  try {
/*@egen*/  (    qName = < PNAME_LN >	| qName = < PNAME_NS >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {   String prefix = qName.image.substring(0, qName.image.indexOf(':'));	    if(!declaredPrefixes.contains(prefix)){	        ParseException pe = new ParseException("Undefined prefix "+prefix+" used in line " + qName.beginLine + " , column " + qName.beginColumn);	        pe.currentToken = qName;	    	throw pe;	    }	    jjtn000.setNameSpace(prefix);		jjtn000.setLocalName(qName.image.substring(qName.image.indexOf(':') + 1)); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//128
void BlankNode() :{  Token t;}{  t = < BLANK_NODE_LABEL >/*@bgen(jjtree) BlankNode */
                           {
                             ASTBlankNode jjtn001 = new ASTBlankNode(JJTBLANKNODE);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                           }
/*@egen*/ { jjtn001.setIdentifier((t.image)); }/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                             }
                           }
/*@egen*/           | (/*@bgen(jjtree) EmptyNode */
   {
     ASTEmptyNode jjtn002 = new ASTEmptyNode(JJTEMPTYNODE);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/< ANON >/*@bgen(jjtree)*/
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/           )}void URI() :{}{  IRIref()}void VarOrURI() :{}{  Var()| URI()}void VarOrBlankNodeOrIRIref() :{}{  Var()| BlankNode()| URI()}void QuotedURIref()               :{/*@bgen(jjtree) QuotedURIRef */
  ASTQuotedURIRef jjtn000 = new ASTQuotedURIRef(JJTQUOTEDURIREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token qRef;}{/*@bgen(jjtree) QuotedURIRef */
  try {
/*@egen*/  qRef = < IRI_REF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setQRef(qRef.image.substring(1, qRef.image.length() - 1));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}