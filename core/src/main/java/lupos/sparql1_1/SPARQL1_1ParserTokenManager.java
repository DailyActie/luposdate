/**
 * Copyright (c) 2013, Institute of Information Systems (Sven Groppe and contributors of LUPOSDATE), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* Generated By:JJTree&JavaCC: Do not edit this line. SPARQL1_1ParserTokenManager.java */
package lupos.sparql1_1;
import java.io.*;
import java.util.HashSet;

/** Token Manager. */
public class SPARQL1_1ParserTokenManager implements SPARQL1_1ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4000000L) != 0L)
            return 429;
         if ((active0 & 0xfffd3e0000000030L) != 0L || (active1 & 0xffffec0001ffffffL) != 0L || (active2 & 0x1bffffffffffL) != 0L)
            return 430;
         if ((active1 & 0x40000000L) != 0L)
            return 397;
         if ((active0 & 0x4L) != 0L)
            return 431;
         if ((active0 & 0x800000000000L) != 0L)
            return 432;
         if ((active1 & 0x14000000000L) != 0L)
            return 57;
         return -1;
      case 1:
         if ((active1 & 0x10000000000L) != 0L)
            return 433;
         if ((active0 & 0xfffd3e0000000010L) != 0L || (active1 & 0xffffec0001ffffffL) != 0L || (active2 & 0x1bffffffffffL) != 0L)
            return 430;
         return -1;
      case 2:
         if ((active0 & 0xfdfc3e0000000010L) != 0L || (active1 & 0xffffe80001ffefffL) != 0L || (active2 & 0x1bffffdff7ffL) != 0L)
            return 430;
         return -1;
      case 3:
         if ((active0 & 0xeddc3e0000000010L) != 0L || (active1 & 0xffb3c00001f7e7ffL) != 0L || (active2 & 0x1b87ffdf67bfL) != 0L)
            return 430;
         return -1;
      case 4:
         if ((active0 & 0xcd9c3c0000000010L) != 0L || (active1 & 0xff13800001b70557L) != 0L || (active2 & 0x1387ffde47afL) != 0L)
            return 430;
         return -1;
      case 5:
         if ((active0 & 0x84143c0000000010L) != 0L || (active1 & 0xcc01800000320455L) != 0L || (active2 & 0x383b95e470fL) != 0L)
            return 430;
         return -1;
      case 6:
         if ((active0 & 0x14300000000000L) != 0L || (active1 & 0xc001800000320000L) != 0L || (active2 & 0x3013950470fL) != 0L)
            return 430;
         return -1;
      case 7:
         if ((active0 & 0x14100000000000L) != 0L || (active1 & 0xc001800000100000L) != 0L || (active2 & 0x3003110040dL) != 0L)
            return 430;
         return -1;
      case 8:
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x4000800000000000L) != 0L || (active2 & 0x30030000005L) != 0L)
            return 430;
         return -1;
      case 9:
         if ((active1 & 0x4000800000000000L) != 0L || (active2 & 0x10000000000L) != 0L)
            return 430;
         return -1;
      case 10:
         if ((active1 & 0x4000800000000000L) != 0L || (active2 & 0x10000000000L) != 0L)
            return 430;
         return -1;
      case 11:
         if ((active1 & 0x4000000000000000L) != 0L || (active2 & 0x10000000000L) != 0L)
            return 430;
         return -1;
      case 12:
         if ((active1 & 0x4000000000000000L) != 0L)
            return 430;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L, 0x0L);
      case 40:
         return jjStartNfaWithStates_0(0, 47, 432);
      case 41:
         return jjStopAtPos(0, 49);
      case 42:
         return jjStopAtPos(0, 46);
      case 43:
         return jjStopAtPos(0, 95);
      case 44:
         return jjStopAtPos(0, 89);
      case 45:
         return jjStopAtPos(0, 108);
      case 46:
         return jjStartNfaWithStates_0(0, 2, 431);
      case 47:
         return jjStopAtPos(0, 92);
      case 59:
         return jjStopAtPos(0, 40);
      case 60:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 100);
      case 62:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L, 0x0L);
      case 63:
         return jjStartNfaWithStates_0(0, 94, 397);
      case 91:
         return jjStartNfaWithStates_0(0, 90, 429);
      case 93:
         return jjStopAtPos(0, 97);
      case 94:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000000L);
      case 65:
      case 97:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x1021000000000000L, 0x40000000080800L, 0x4000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200020000000000L, 0x12000000400000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x8480000000004500L, 0x400100000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2010100000000000L, 0x1000000020218L, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x200000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000000010L, 0x100000000000000L, 0x100000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x40000L, 0x10000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L, 0x80L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4040000000084L, 0x3e200000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x2000c00000000020L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x802000L, 0x3000008120L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x80000000000L, 0x1000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8800000000000000L, 0x100000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x220000000000000L, 0x140000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x800200000200040L, 0x28881cf420fL);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L, 0x80000000c00L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1008000001010002L, 0x2000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x8000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10L);
      case 123:
         return jjStopAtPos(0, 1);
      case 124:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 3);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      case 61:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 104, 433);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         break;
      case 94:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 170);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x480020000000000L, active1, 0x21c00000000009L, active2, 0x10a001000040L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000000000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0x8000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2010280000000000L, active1, 0x80000000220010L, active2, 0x20140000210L);
      case 70:
      case 102:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 149, 430);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0xf0000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000100000000010L, active1, 0xc08040L, active2, 0x1000000500L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000080100L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4010000001000086L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 76, 430);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x8602080000006020L, active2, 0x4001010a0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x940040000000000L, active1, 0xc000000040600L, active2, 0x90000000000L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1020000000000000L, active1, 0x10000L, active2, 0x3e000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800200000000000L, active2, 0xc0400fL);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x880002000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000L);
      case 89:
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 430);
         break;
      case 90:
      case 122:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 139, 430);
         break;
      case 124:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 53:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 143, 430);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3000000000040020L, active2, 0x1f0010L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x88000000L);
      case 67:
      case 99:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 430);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x200L);
      case 68:
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 430);
         return jjMoveStringLiteralDfa3_0(active0, 0x800200000000000L, active1, 0x2L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8040000000000L, active1, 0x500L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x20000L, active2, 0L);
      case 71:
      case 103:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 166, 430);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      case 73:
      case 105:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 430);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 115, 430);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000001010000L, active2, 0x202002000L);
      case 75:
      case 107:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 430);
         break;
      case 76:
      case 108:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 430);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000010L, active1, 0x51L, active2, 0x100010000000L);
      case 77:
      case 109:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 163, 430);
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000000000000L, active1, 0L, active2, 0x8001000400L);
      case 78:
      case 110:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x8420c00000c00000L, active2, 0x20000120L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000000000L, active1, 0x110000000000200L, active2, 0x10000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0x20100000000L);
      case 82:
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000200000L, active2, 0xc0400fL);
      case 83:
      case 115:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 118, 430);
         return jjMoveStringLiteralDfa3_0(active0, 0x2010120000000000L, active1, 0x4L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 430);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000108088L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x202000000000000L, active2, 0x80404000080L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x2000L, active2, 0L);
      case 87:
      case 119:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 140, 430);
         break;
      case 88:
      case 120:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 165, 430);
         break;
      case 89:
      case 121:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 134, 430);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 430);
         break;
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 53:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 65:
      case 97:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000020500L, active2, 0x20000000008L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x400000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 430);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 430);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 430);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 141, 430);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L, active2, 0x800000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 430);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 430);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 171, 430);
         return jjMoveStringLiteralDfa4_0(active0, 0x880080000000000L, active1, 0x56L, active2, 0x41000402L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 430);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4400000000000000L, active1, 0x100000L, active2, 0x10000000L);
      case 76:
      case 108:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 430);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L, active2, 0x108500000L);
      case 77:
      case 109:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 430);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x202000000010000L, active2, 0x400000000L);
      case 79:
      case 111:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 430);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4100000001000000L, active2, 0x200L);
      case 80:
      case 112:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 430);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L, active2, 0x8000000000L);
      case 82:
      case 114:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 132, 430);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active2, 0x6000080L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8004000000000000L, active1, 0x3000000000000000L, active2, 0x100280000001L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000010L, active1, 0x8000000000000000L, active2, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100200000000000L, active1, 0x800001L, active2, 0x10020004100L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 430);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 53:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 56:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8400000000000000L, active2, 0x108400000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x280000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 430);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 430);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 121, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 430);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 430);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 430);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 430);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 172, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000010L, active1, 0x800000000000001L, active2, 0x100004L);
      case 70:
      case 102:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 71:
      case 103:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 430);
         break;
      case 72:
      case 104:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 430);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 133, 430);
         break;
      case 73:
      case 105:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 430);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 154, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0x140000000000L, active1, 0x200000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L, active2, 0x20000000L);
      case 78:
      case 110:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0x40L, active2, 0x202L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000000000L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 430);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 430);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x4L, active2, 0x20000000000L);
      case 83:
      case 115:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 430);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 430);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 430);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 430);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 162, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x1000000000410L, active2, 0x291000101L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L, active2, 0x4000L);
      case 88:
      case 120:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 430);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 50:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 147, 430);
         break;
      case 52:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 146, 430);
         break;
      case 54:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 145, 430);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L, active2, 0x20000000001L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0x100000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x202L);
      case 69:
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 430);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 430);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 167, 430);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x4000000000000000L, active2, 0x31000100L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 71:
      case 103:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 430);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x8000000000000000L, active2, 0x4000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 430);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x100000L, active2, 0x8400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 82:
      case 114:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 430);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 159, 430);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 430);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 161, 430);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 430);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 430);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 430);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 430);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 430);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 88:
      case 120:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 430);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0x10000100000L);
      case 68:
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 430);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 142, 430);
         break;
      case 69:
      case 101:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 430);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 160, 430);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 71:
      case 103:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 150, 430);
         break;
      case 75:
      case 107:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 155, 430);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x31000001L);
      case 83:
      case 115:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 129, 430);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 136, 430);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 137, 430);
         break;
      case 84:
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 430);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000L, active2, 0x20000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0x800000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 430);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 430);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 138, 430);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 148, 430);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20000000L);
      case 76:
      case 108:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 430);
         break;
      case 77:
      case 109:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 152, 430);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x30000000000L);
      case 82:
      case 114:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 131, 430);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 83:
      case 115:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 127, 430);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 430);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 157, 430);
         break;
      case 69:
      case 101:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 130, 430);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 156, 430);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 169, 430);
         break;
      case 83:
      case 115:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 430);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 430);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active1, 0x800000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10000000000L);
      case 83:
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 111, 430);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 168, 430);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active1, 0x4000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 126, 430);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffffffffffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x5e00ffffffffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff00000000ffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 429;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 429:
               case 46:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 433:
                  if ((0xaffffffeffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 62)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 35)
                     jjCheckNAdd(51);
                  break;
               case 432:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 41)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  break;
               case 397:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(400);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(398);
                  }
                  break;
               case 430:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(324, 325);
                  else if (curChar == 58)
                     jjCheckNAddStates(3, 9);
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(321, 322);
                  else if (curChar == 58)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 326;
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 323;
                  break;
               case 57:
                  if ((0xaffffffeffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 62)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 35)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 62)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAddStates(10, 18);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(410, 425);
                  else if (curChar == 36)
                     jjAddStates(19, 20);
                  else if (curChar == 58)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(3, 9);
                  }
                  else if (curChar == 60)
                     jjCheckNAddStates(21, 44);
                  else if (curChar == 40)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 35)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(45, 47);
                  }
                  else if (curChar == 63)
                     jjAddStates(48, 49);
                  if (curChar == 34)
                     jjCheckNAddStates(50, 52);
                  else if (curChar == 39)
                     jjCheckNAddStates(53, 55);
                  break;
               case 431:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(425, 426);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAdd(410);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(45, 47);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if ((0x3ff200000000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 12:
                  if (curChar == 45)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if (curChar == 39)
                     jjCheckNAddStates(53, 55);
                  break;
               case 15:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 17:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 18:
                  if (curChar == 39 && kind > 24)
                     kind = 24;
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(50, 52);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 22:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 23:
                  if (curChar == 34 && kind > 25)
                     kind = 25;
                  break;
               case 24:
                  if (curChar == 39)
                     jjCheckNAddStates(56, 58);
                  break;
               case 25:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 27:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 28:
                  if (curChar == 39 && kind > 26)
                     kind = 26;
                  break;
               case 29:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 32:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 34)
                     jjCheckNAddStates(59, 61);
                  break;
               case 34:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 36:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 37:
                  if (curChar == 34 && kind > 27)
                     kind = 27;
                  break;
               case 38:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 41:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 41 && kind > 28)
                     kind = 28;
                  break;
               case 48:
                  if (curChar == 60)
                     jjCheckNAddStates(21, 44);
                  break;
               case 49:
                  if ((0xaffffffeffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 50:
                  if (curChar == 35)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if (curChar == 62 && kind > 11)
                     kind = 11;
                  break;
               case 53:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(54, 51);
                  break;
               case 54:
                  if ((0xaffffffeffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 51);
                  break;
               case 121:
                  if (curChar == 51)
                     jjCheckNAdd(53);
                  break;
               case 122:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 144:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 151:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 158:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 165:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 234:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 242:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 270:
                  if (curChar == 48)
                     jjCheckNAdd(53);
                  break;
               case 271:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 273:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 290:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 300:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 309:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 310:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 311:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 312:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 313:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 314:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 315:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 314;
                  break;
               case 316:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 315;
                  break;
               case 317:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 316;
                  break;
               case 318:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 317;
                  break;
               case 319:
                  if (curChar == 35)
                     jjCheckNAddStates(0, 2);
                  break;
               case 321:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(321, 322);
                  break;
               case 322:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 323;
                  break;
               case 323:
                  if (curChar == 58 && kind > 13)
                     kind = 13;
                  break;
               case 324:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(324, 325);
                  break;
               case 325:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 326:
                  if (curChar == 58)
                     jjCheckNAddStates(3, 9);
                  break;
               case 327:
               case 374:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 328:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 329:
                  if (curChar == 58)
                     jjCheckNAddStates(62, 70);
                  break;
               case 331:
                  if ((0x3ff200000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 332:
                  if (curChar == 37)
                     jjAddStates(71, 72);
                  break;
               case 333:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 334:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 335:
                  if (curChar == 2)
                     jjCheckNAddStates(73, 100);
                  break;
               case 336:
                  if (curChar == 53)
                     jjCheckNAddStates(62, 70);
                  break;
               case 337:
                  if (curChar == 4)
                     jjAddStates(101, 102);
                  break;
               case 338:
                  if (curChar == 48)
                     jjCheckNAddStates(62, 70);
                  break;
               case 339:
                  if (curChar == 3)
                     jjCheckNAddStates(103, 110);
                  break;
               case 341:
                  if (curChar == 7)
                     jjCheckNAddTwoStates(342, 345);
                  break;
               case 343:
                  if (curChar == 5)
                     jjCheckNAddTwoStates(340, 344);
                  break;
               case 352:
                  if (curChar == 48 && kind > 14)
                     kind = 14;
                  break;
               case 353:
                  if (curChar == 51)
                     jjCheckNAddStates(62, 70);
                  break;
               case 355:
                  if (curChar == 57)
                     jjCheckNAddStates(62, 70);
                  break;
               case 356:
                  if (curChar == 56)
                     jjCheckNAddStates(62, 70);
                  break;
               case 357:
                  if (curChar == 55)
                     jjCheckNAddStates(62, 70);
                  break;
               case 358:
                  if (curChar == 54)
                     jjCheckNAddStates(62, 70);
                  break;
               case 359:
                  if (curChar == 52)
                     jjCheckNAddStates(62, 70);
                  break;
               case 360:
                  if (curChar == 49)
                     jjCheckNAddStates(62, 70);
                  break;
               case 361:
                  if (curChar == 53 && kind > 14)
                     kind = 14;
                  break;
               case 362:
                  if (curChar == 51 && kind > 14)
                     kind = 14;
                  break;
               case 364:
                  if (curChar == 57 && kind > 14)
                     kind = 14;
                  break;
               case 365:
                  if (curChar == 56 && kind > 14)
                     kind = 14;
                  break;
               case 366:
                  if (curChar == 55 && kind > 14)
                     kind = 14;
                  break;
               case 367:
                  if (curChar == 54 && kind > 14)
                     kind = 14;
                  break;
               case 368:
                  if (curChar == 52 && kind > 14)
                     kind = 14;
                  break;
               case 369:
                  if (curChar == 49 && kind > 14)
                     kind = 14;
                  break;
               case 370:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 371;
                  break;
               case 371:
                  if ((0x3ff000000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 372:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 373;
                  break;
               case 373:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 375:
                  if (curChar != 48)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 376:
                  if (curChar == 4)
                     jjstateSet[jjnewStateCnt++] = 375;
                  break;
               case 378:
                  if (curChar == 7)
                     jjCheckNAdd(377);
                  break;
               case 380:
                  if (curChar == 5)
                     jjCheckNAdd(379);
                  break;
               case 381:
                  if (curChar == 2)
                     jjCheckNAddStates(111, 124);
                  break;
               case 382:
                  if (curChar != 53)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 383:
                  if (curChar != 51)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 387:
                  if (curChar != 57)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 388:
                  if (curChar != 56)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 389:
                  if (curChar != 55)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 390:
                  if (curChar != 54)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 391:
                  if (curChar != 52)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 392:
                  if (curChar != 49)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 394:
                  if (curChar == 3)
                     jjCheckNAddStates(125, 128);
                  break;
               case 395:
                  if (curChar != 58)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(3, 9);
                  break;
               case 396:
                  if (curChar == 63)
                     jjAddStates(48, 49);
                  break;
               case 398:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(398);
                  break;
               case 399:
               case 400:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(400);
                  break;
               case 401:
                  if (curChar == 36)
                     jjAddStates(19, 20);
                  break;
               case 402:
               case 403:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(403);
                  break;
               case 404:
               case 405:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(405);
                  break;
               case 406:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(10, 18);
                  break;
               case 407:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(407);
                  break;
               case 408:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(408, 409);
                  break;
               case 409:
                  if (curChar == 46)
                     jjCheckNAdd(410);
                  break;
               case 410:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(410);
                  break;
               case 411:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(411, 412);
                  break;
               case 412:
                  if (curChar != 46)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(413);
                  break;
               case 413:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(413);
                  break;
               case 414:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(414, 415);
                  break;
               case 415:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(416, 417);
                  break;
               case 416:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(416, 417);
                  break;
               case 418:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(419);
                  break;
               case 419:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(419);
                  break;
               case 420:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(420, 421);
                  break;
               case 422:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(423);
                  break;
               case 423:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(423);
                  break;
               case 424:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(410, 425);
                  break;
               case 425:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(425, 426);
                  break;
               case 427:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(428);
                  break;
               case 428:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(428);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 429:
               case 47:
                  if (curChar == 93 && kind > 30)
                     kind = 30;
                  break;
               case 433:
               case 49:
                  jjCheckNAddStates(0, 2);
                  break;
               case 397:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(400);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(398);
                  }
                  break;
               case 430:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(326);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(324, 325);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(323);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(321, 322);
                  break;
               case 57:
                  jjCheckNAddStates(0, 2);
                  if ((0x400000004000000L & l) != 0L)
                     jjAddStates(129, 130);
                  else if ((0x100000001000000L & l) != 0L)
                     jjAddStates(131, 133);
                  else if ((0x40000000400000L & l) != 0L)
                     jjAddStates(134, 135);
                  else if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(136, 143);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(144, 151);
                  else if ((0x1000000010000L & l) != 0L)
                     jjAddStates(152, 155);
                  else if ((0x400000004000L & l) != 0L)
                     jjAddStates(156, 158);
                  else if ((0x200000002000L & l) != 0L)
                     jjAddStates(159, 166);
                  else if ((0x20000000200L & l) != 0L)
                     jjCheckNAddStates(167, 177);
                  else if ((0x10000000100L & l) != 0L)
                     jjAddStates(178, 180);
                  else if ((0x8000000080L & l) != 0L)
                     jjCheckNAddTwoStates(114, 119);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(181, 183);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(184, 188);
                  else if ((0x800000008L & l) != 0L)
                     jjAddStates(189, 191);
                  else if ((0x200000002L & l) != 0L)
                     jjAddStates(192, 195);
                  else if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(196, 201);
                  else if (curChar == 91)
                     jjAddStates(202, 203);
                  else if (curChar == 64)
                     jjCheckNAdd(11);
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 1:
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(45, 47);
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 9:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 10:
                  if (curChar == 64)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 16:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  jjCheckNAddStates(53, 55);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 21:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  jjCheckNAddStates(50, 52);
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 26:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  jjCheckNAddStates(56, 58);
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  jjCheckNAddStates(59, 61);
                  break;
               case 45:
                  if (curChar == 91)
                     jjAddStates(202, 203);
                  break;
               case 52:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 54:
                  jjCheckNAddTwoStates(54, 51);
                  break;
               case 55:
               case 87:
               case 91:
               case 131:
               case 134:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 56:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 58:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 60:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 74:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 77:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 79:
               case 139:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 80:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(192, 195);
                  break;
               case 83:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 84:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(83);
                  break;
               case 85:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 86:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 88:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
               case 201:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 90:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(189, 191);
                  break;
               case 92:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 93:
               case 94:
               case 174:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(92);
                  break;
               case 95:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(184, 188);
                  break;
               case 97:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(83);
                  break;
               case 98:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x40000000400000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 100:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 101:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 102:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(101);
                  break;
               case 103:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 105:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 106:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(181, 183);
                  break;
               case 107:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 108:
               case 130:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(107);
                  break;
               case 109:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 110:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(109);
                  break;
               case 111:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
               case 124:
               case 202:
               case 223:
               case 258:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 113:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAddTwoStates(114, 119);
                  break;
               case 114:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 115:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 116:
               case 190:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(115);
                  break;
               case 117:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x10000000100L & l) != 0L)
                     jjAddStates(178, 180);
                  break;
               case 125:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
               case 180:
               case 227:
               case 238:
               case 296:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 127:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAddStates(167, 177);
                  break;
               case 132:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 135:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAdd(114);
                  break;
               case 137:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
               case 306:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 140:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
               case 231:
               case 287:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 142:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 145:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 149:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 152:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 156:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 159:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x400000004000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 163:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 166:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x200000002000L & l) != 0L)
                     jjAddStates(159, 166);
                  break;
               case 170:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(114);
                  break;
               case 171:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 175:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(133);
                  break;
               case 176:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 179:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 181:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if ((0x2000000020000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 184:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(109);
                  break;
               case 186:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 191:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(156, 158);
                  break;
               case 199:
               case 246:
                  if ((0x80000000800000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 200:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 203:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(152, 155);
                  break;
               case 205:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 206:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 207:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if ((0x80000000800L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 209:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(114);
                  break;
               case 212:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(144, 151);
                  break;
               case 218:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(109);
                  break;
               case 219:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 224:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 225:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 226:
               case 269:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 228:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 230:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 232:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 235:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 239:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 243:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 247:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(136, 143);
                  break;
               case 250:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 251:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 253:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(101);
                  break;
               case 255:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 259:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(109);
                  break;
               case 261:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 274:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if ((0x40000000400000L & l) != 0L)
                     jjAddStates(134, 135);
                  break;
               case 276:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 277:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 278:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(107);
                  break;
               case 281:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 285:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(131, 133);
                  break;
               case 288:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 291:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 294:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 295:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 297:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 298:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 299:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 301:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 302:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 303:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 304:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 305:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 307:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 308:
                  if ((0x400000004000000L & l) != 0L)
                     jjAddStates(129, 130);
                  break;
               case 320:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(196, 201);
                  break;
               case 321:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(321, 322);
                  break;
               case 322:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(323);
                  break;
               case 324:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(324, 325);
                  break;
               case 325:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(326);
                  break;
               case 327:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 328:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 330:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 329;
                  break;
               case 331:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 333:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 334:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 340:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 342:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 344:
                  if ((0x4000000040L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 345:
                  if ((0x2000000020L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 346:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 347:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 348:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 349:
                  if ((0x200000002L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 350:
                  if ((0x1000000010L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 351:
                  if ((0x400000004L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 354:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAddStates(62, 70);
                  break;
               case 363:
                  if ((0x800000008L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 370:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 371;
                  break;
               case 371:
                  if ((0x7e0000007eL & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 373:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 374:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 377:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 379:
                  if ((0x4000000040L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 384:
                  if ((0x800000008L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 385:
                  if ((0x400000004L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 386:
                  if ((0x200000002L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 393:
                  if ((0x1000000010L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 398:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(398);
                  break;
               case 399:
               case 400:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(400);
                  break;
               case 402:
               case 403:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(403);
                  break;
               case 404:
               case 405:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(405);
                  break;
               case 417:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(204, 205);
                  break;
               case 421:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(206, 207);
                  break;
               case 426:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(208, 209);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 433:
               case 49:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 397:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(398);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(400);
                  }
                  break;
               case 430:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(321, 322);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(323);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(324, 325);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(326);
                  break;
               case 57:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(196, 201);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(45, 47);
                  break;
               case 6:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 15)
                     kind = 15;
                  break;
               case 15:
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(53, 55);
                  break;
               case 20:
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(50, 52);
                  break;
               case 25:
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(56, 58);
                  break;
               case 34:
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(59, 61);
                  break;
               case 54:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(54, 51);
                  break;
               case 321:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(321, 322);
                  break;
               case 322:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(323);
                  break;
               case 324:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(324, 325);
                  break;
               case 325:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(326);
                  break;
               case 327:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(62, 70);
                  break;
               case 328:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(62, 70);
                  break;
               case 331:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 14)
                     kind = 14;
                  break;
               case 398:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(398);
                  break;
               case 399:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(400);
                  break;
               case 400:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(400);
                  break;
               case 402:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(403);
                  break;
               case 403:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(403);
                  break;
               case 404:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(405);
                  break;
               case 405:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(405);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 429 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   49, 50, 51, 327, 372, 376, 378, 380, 381, 394, 407, 408, 409, 411, 412, 414, 
   415, 420, 421, 402, 404, 49, 51, 57, 72, 75, 77, 81, 51, 82, 90, 96, 
   106, 113, 120, 129, 169, 198, 204, 217, 249, 275, 286, 308, 319, 1, 2, 4, 
   397, 399, 20, 21, 23, 15, 16, 18, 25, 26, 30, 34, 35, 39, 328, 330, 
   331, 332, 335, 337, 339, 341, 343, 333, 370, 336, 353, 340, 354, 348, 346, 355, 
   356, 357, 358, 359, 360, 347, 342, 361, 362, 344, 363, 351, 349, 364, 365, 366, 
   367, 368, 369, 350, 345, 338, 352, 340, 346, 347, 348, 344, 349, 350, 351, 382, 
   383, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 377, 379, 386, 393, 
   385, 313, 318, 295, 305, 307, 279, 285, 251, 253, 257, 259, 268, 269, 99, 274, 
   222, 225, 226, 228, 230, 237, 245, 248, 205, 207, 210, 216, 200, 201, 203, 173, 
   174, 177, 179, 182, 184, 189, 197, 130, 132, 133, 135, 137, 138, 140, 147, 154, 
   161, 168, 123, 125, 128, 108, 111, 112, 98, 100, 103, 104, 105, 91, 93, 95, 
   84, 86, 88, 89, 321, 322, 323, 324, 325, 326, 46, 47, 418, 419, 422, 423, 
   427, 428, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\173", "\56", "\175", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\73", null, null, null, null, null, "\52", "\50", null, "\51", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\54", "\133", "\174", "\57", 
"\136", "\77", "\53", "\41", "\135", "\174\174", "\46\46", "\75", "\41\75", "\74", 
"\76", "\74\75", "\76\75", null, null, "\55", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\136\136", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffff005f7fe83fL, 0xffffffffffffffffL, 0x1fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7c0L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[429];
private final int[] jjstateSet = new int[858];
protected char curChar;
/** Constructor. */
public SPARQL1_1ParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SPARQL1_1ParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 429; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
