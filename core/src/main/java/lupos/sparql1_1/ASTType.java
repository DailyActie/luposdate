/**
 * Copyright (c) 2013, Institute of Information Systems (Sven Groppe and contributors of LUPOSDATE), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* Generated By:JJTree: Do not edit this line. ASTType.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package lupos.sparql1_1;

public class ASTType extends SimpleNode {

	public enum TYPE { TRIPLES, DURATION, INSTANCESNUMBER, INSTANCESDURATION };
	private TYPE type = TYPE.TRIPLES;
	private int value = 0;

	public ASTType(int id) {
		super(id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(StreamSPARQL1_1ParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public String accept(lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserVisitorStringGenerator visitor) {
		return visitor.visit(this);
	}

	public void setTriples() {
		type=TYPE.TRIPLES;
	}

	public void setDuration() {
		type=TYPE.DURATION;
	}

	public void setInstancesNumber() {
		type=TYPE.INSTANCESNUMBER;
	}

	public void setInstancesDuration() {
		type=TYPE.INSTANCESDURATION;
	}

	public TYPE getType(){
		return type;
	}

	public void setType(TYPE type){
		this.type = type;
	}

	public boolean isTriples(){
		return type==TYPE.TRIPLES;
	}

	public boolean isDuration(){
		return type==TYPE.DURATION;
	}

	public boolean isInstancesNumber(){
		return type==TYPE.INSTANCESNUMBER;
	}

	public boolean isInstancesDuration(){
		return type==TYPE.INSTANCESDURATION;
	}

	public void setValue(int value) {
		this.value = value;
	}

	public int getValue(){
		return value;
	}
	
	@Override
	public void init(final SimpleNode node){
		ASTType other = (ASTType) node;
		this.setValue(other.getValue());
		this.setType(other.getType());
	}
}
/* JavaCC - OriginalChecksum=aaea40693cd0a3f6799c0019f254eba7 (do not edit this line) */
