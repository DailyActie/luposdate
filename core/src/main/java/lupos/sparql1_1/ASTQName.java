
/**
 * Copyright (c) 2007-2015, Institute of Information Systems (Sven Groppe and contributors of LUPOSDATE), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author groppe
 * @version $Id: $Id
 */
/* Generated By:JJTree: Do not edit this line. ASTQName.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package lupos.sparql1_1;

import lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserPathVisitorStringGenerator;
public
class ASTQName extends SimpleNode {
	private String nameSpace,localName;
	/**
	 * <p>Constructor for ASTQName.</p>
	 *
	 * @param id a int.
	 */
	public ASTQName(final int id) {
		super(id);
	}

	/**
	 * <p>Constructor for ASTQName.</p>
	 *
	 * @param p a {@link lupos.sparql1_1.SPARQL1_1Parser} object.
	 * @param id a int.
	 */
	public ASTQName(final SPARQL1_1Parser p, final int id) {
		super(p, id);
	}


	/**
	 * {@inheritDoc}
	 *
	 * Accept the visitor. *
	 */
	@Override
	public String accept(final lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserVisitorStringGenerator visitor) {
		return visitor.visit(this);
	}

	/** {@inheritDoc} */
	@Override
	public Object jjtAccept(final SPARQL1_1ParserVisitor visitor, final Object data) {
		return visitor.visit(this, data);
	}

	/** {@inheritDoc} */
	@Override
	public String accept(final SPARQL1_1ParserPathVisitorStringGenerator visitor, final String subject, final String object){
		return visitor.visit(this, subject, object);
	}

	/**
	 * <p>Getter for the field <code>nameSpace</code>.</p>
	 *
	 * @return a {@link java.lang.String} object.
	 */
	public String getNameSpace() {
		return this.nameSpace;
	}

	/**
	 * <p>Setter for the field <code>nameSpace</code>.</p>
	 *
	 * @param nameSpace a {@link java.lang.String} object.
	 */
	public void setNameSpace(final String nameSpace) {
		this.nameSpace = nameSpace;
	}

	/**
	 * <p>Getter for the field <code>localName</code>.</p>
	 *
	 * @return a {@link java.lang.String} object.
	 */
	public String getLocalName() {
		return this.localName;
	}

	/**
	 * <p>Setter for the field <code>localName</code>.</p>
	 *
	 * @param localName a {@link java.lang.String} object.
	 */
	public void setLocalName(final String localName) {
		this.localName = localName;
	}
	/** {@inheritDoc} */
	@Override
	public String toString() {
		return super.toString()+" "+this.nameSpace+" "+this.localName;
	}

	/** {@inheritDoc} */
	@Override
	public void init(final SimpleNode node){
		final ASTQName other = (ASTQName) node;
		this.setLocalName(other.getLocalName());
		this.setNameSpace(other.getNameSpace());
	}
}
/* JavaCC - OriginalChecksum=6869e3a7b9f263bee83ee2c1d6094062 (do not edit this line) */
