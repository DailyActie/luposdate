/**
 * Copyright (c) 2012, Institute of Information Systems (Sven Groppe), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package lupos.sparql1_1;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Random;

import lupos.datastructures.bindings.Bindings;
import lupos.datastructures.items.Item;
import lupos.datastructures.items.Variable;
import lupos.engine.operators.BasicOperator;
import lupos.engine.operators.singleinput.NotBoundException;
import lupos.engine.operators.singleinput.TypeErrorException;
import lupos.engine.operators.singleinput.ExpressionEvaluation.EvaluationVisitor;
import lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserPathVisitorStringGenerator;
import lupos.sparql1_1.operatorgraph.helper.OperatorConnection;

public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected SPARQL1_1Parser parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(SPARQL1_1Parser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /** Accept the visitor. **/
  public String accept(lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserVisitorStringGenerator visitor){
	    return visitor.visit(this);
  }
    
  public void accept(lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor visitor, OperatorConnection connection){
	    throw new UnsupportedOperationException("This node of type "+this.getClass()+" of the abstract syntax tree does not support an SPARQL1_1OperatorgraphGeneratorVisitor!");
  }
  
  public void accept(lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor visitor, OperatorConnection connection, Item graphConstraint){
	    throw new UnsupportedOperationException("This node of type "+this.getClass()+" of the abstract syntax tree does not support an SPARQL1_1OperatorgraphGeneratorVisitor with graphConstraint as additional parameter!");
  }
  
  public BasicOperator accept(lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor visitor, OperatorConnection connection, Item graphConstraint, Variable subject, Variable object, Node subjectNode, Node objectNode){
	    throw new UnsupportedOperationException("This node of type "+this.getClass()+" of the abstract syntax tree does not support an SPARQL1_1OperatorgraphGeneratorVisitor with parameters SPARQL1_1OperatorgraphGeneratorVisitor visitor, OperatorConnection connection, Item graphConstraint, Variable subject, Variable object, Node subjectNode, Node objectNode!");
}
	
  public String accept(SPARQL1_1ParserPathVisitorStringGenerator visitor, String subject, String object){
	    throw new UnsupportedOperationException("This node of type "+this.getClass()+" of the abstract syntax tree does not support an SPARQL1_1ParserPathVisitorStringGenerator!");
  } 
    
  public Object jjtAccept(SPARQL1_1ParserVisitor visitor, Object data){
	    return visitor.visit(this, data);
  }

  @SuppressWarnings({ "rawtypes" })
  public Object accept(EvaluationVisitor visitor, Bindings b, Object data) throws NotBoundException, TypeErrorException {
	    throw new UnsupportedOperationException("This node of type "+this.getClass()+" of the abstract syntax tree does not support an EvaluationVisitor!");
  }
  
  /** Accept the visitor. **/
  public Object childrenAccept(SPARQL1_1ParserVisitor visitor, Object data)
{
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return SPARQL1_1ParserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
  
	public void clearChildren() {
		children = null;
	}
	
	public Node[] getChildren() {
		return children;
	}

	public boolean replaceChild2(final Node replace, final Node by) {
		for (int i = 0; i < children.length; i++) {
			if (children[i].equals(replace)) {
				children[i] = by;
				return true;
			}
		}
		return false;
	}
	
	public void addChild(final Node n) {
		if (n != null) {
			final Node parent = n.jjtGetParent();
			if (parent != null && !parent.equals(this)) {
				parent.removeChild(n);
			}
			if (children == null) {
				jjtAddChild(n, 0);
			} else {
				jjtAddChild(n, children.length);
			}
			n.jjtSetParent(this);
		}
	}
	
	/**
	 * Adds a node in children list at position i. If i>children.length the node
	 * will not be appended
	 */
	public void addChild(final Node n, final int i) {
		final Node parent = n.jjtGetParent();
		if (parent != null && !parent.equals(this)) {
			parent.removeChild(n);
		}
		if (children == null) {
			jjtAddChild(n, 0);
		} else if (i <= children.length) {
			final Node c[] = new Node[children.length + 1];
			for (int j = 0; j < c.length; j++) {
				if (j < i) {
					c[j] = children[j];
				} else if (j == i) {
					c[j] = n;
				} else {
					c[j] = children[j - 1];
				}
			}
			children = c;
		} else {
			jjtAddChild(n, children.length);
		}
		n.jjtSetParent(this);
	}

	
	public SimpleNode clone(final boolean clean) {
		SimpleNode ret = null;
		try {
			ret = this.getClass().getConstructor(Integer.TYPE).newInstance(
					new Random().nextInt(Integer.MAX_VALUE));
			if (!clean && children != null) {
				for (int i = 0; i < children.length; i++) {
					ret.addChild(children[i].clone(false), i);
				}
			}
			final Field[] fields = this.getClass().getDeclaredFields();
			final Method[] methods = this.getClass().getDeclaredMethods();
			for (int i = 0; i < fields.length; i++) {
				Method set = null;
				Method get = null;
				for (int j = 0; j < methods.length; j++) {
					if (methods[j].getName().toLowerCase().contains(
							fields[i].getName().toLowerCase())) {
						if (methods[j].getName().contains("set")) {
							set = methods[j];
						} else if (methods[j].getName().contains("get")) {
							get = methods[j];
						}
						if (set != null && get != null) {
							break;
						}
					}
				}
				if (set != null && get != null) {
					set.invoke(ret, get.invoke(this));
				} else {
					throw new ClassCastException(
							"Not all required methods found to cast from "
									+ this.toString());
				}
			}
		} catch (final InstantiationException e) {
			e.printStackTrace();
		} catch (final IllegalAccessException e) {
			e.printStackTrace();
		} catch (final IllegalArgumentException e) {
			e.printStackTrace();
		} catch (final SecurityException e) {
			e.printStackTrace();
		} catch (final InvocationTargetException e) {
			e.printStackTrace();
		} catch (final NoSuchMethodException e) {
			e.printStackTrace();
		}
		return ret;
	}

	public SimpleNode cloneStillChild(final boolean clean) {
		final SimpleNode ret = clone(clean);
		this.parent.addChild(ret, parent.getChildNumber(this) + 1);
		return ret;
	}
	
	public void removeChild(final int i) {
		if (children.length - 1 != 0) {
			final Node[] newChildren = new Node[children.length - 1];
			if (i > 0 && i < children.length - 1) {
				System.arraycopy(children, 0, newChildren, 0, i);
				System.arraycopy(children, i + 1, newChildren, i,
						children.length - i - 1);
			} else {
				if (i == 0) {
					if (children.length > 0)
						System.arraycopy(children, 1, newChildren, 0,
								children.length - 1);
					else
						children = null;
				} else {
					System.arraycopy(children, 0, newChildren, 0,
							children.length - 1);
				}
			}
			children[i].jjtSetParent(null);
			children = newChildren;
		} else {
			children[0].jjtSetParent(null);
			children = null;
		}
	}

	public void removeChild(final Node n) {
		for (int i = 0; i < children.length; i++) {
			if (n.equals(children[i])) {
				removeChild(i);
				break;
			}
		}
	}
	
	public int getChildNumber(final Node node) {
		for (int i = 0; i < children.length; i++) {
			if (node.equals(children[i])) {
				return i;
			}
		}
		return -1;
	}
}

/* JavaCC - OriginalChecksum=5aa022caa8a5b902f357f7622f4ba0b8 (do not edit this line) */
