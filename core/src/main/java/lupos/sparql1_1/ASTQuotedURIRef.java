
/**
 * Copyright (c) 2007-2015, Institute of Information Systems (Sven Groppe and contributors of LUPOSDATE), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author groppe
 * @version $Id: $Id
 */
/* Generated By:JJTree: Do not edit this line. ASTQuotedURIRef.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package lupos.sparql1_1;

import lupos.datastructures.bindings.Bindings;
import lupos.datastructures.items.Item;
import lupos.datastructures.items.Variable;
import lupos.datastructures.items.literal.LazyLiteral;
import lupos.datastructures.items.literal.Literal;
import lupos.engine.operators.BasicOperator;
import lupos.engine.operators.singleinput.NotBoundException;
import lupos.engine.operators.singleinput.TypeErrorException;
import lupos.engine.operators.singleinput.filter.expressionevaluation.EvaluationVisitor;
import lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserPathVisitorStringGenerator;
import lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor;
import lupos.sparql1_1.operatorgraph.helper.OperatorConnection;
public
class ASTQuotedURIRef extends SimpleNode {
	private String qRef;
	private Literal literal = null;
  /**
   * <p>Constructor for ASTQuotedURIRef.</p>
   *
   * @param id a int.
   */
  public ASTQuotedURIRef(final int id) {
    super(id);
  }

  /**
   * <p>Constructor for ASTQuotedURIRef.</p>
   *
   * @param p a {@link lupos.sparql1_1.SPARQL1_1Parser} object.
   * @param id a int.
   */
  public ASTQuotedURIRef(final SPARQL1_1Parser p, final int id) {
    super(p, id);
  }


  /**
   * {@inheritDoc}
   *
   * Accept the visitor. *
   */
  @Override
  public String accept(final lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserVisitorStringGenerator visitor) {
    return visitor.visit(this);
  }

    /** {@inheritDoc} */
    @Override
  public Object jjtAccept(final SPARQL1_1ParserVisitor visitor, final Object data) {
    return visitor.visit(this, data);
  }

  /** {@inheritDoc} */
  @Override
  public String accept(final SPARQL1_1ParserPathVisitorStringGenerator visitor, final String subject, final String object){
	    return visitor.visit(this, subject, object);
  }

  /** {@inheritDoc} */
  @Override
  public BasicOperator accept(final SPARQL1_1OperatorgraphGeneratorVisitor visitor, final OperatorConnection connection, final Item graphConstraint, final Variable subject, final Variable object, final Node subjectNode, final Node objectNode) {
	    return visitor.visit(this, connection, graphConstraint, subject, object, subjectNode, objectNode);
  }

  /** {@inheritDoc} */
  @Override
@SuppressWarnings({ "rawtypes", "unchecked" })
  public Object accept(final EvaluationVisitor visitor, final Bindings b, final Object data) throws NotBoundException, TypeErrorException {
	  return visitor.evaluate(this, b, data);
  }

  /**
   * <p>Getter for the field <code>qRef</code>.</p>
   *
   * @return a {@link java.lang.String} object.
   */
  public String getQRef() {
	  return this.qRef;
  }

  /**
   * <p>Setter for the field <code>qRef</code>.</p>
   *
   * @param qRef a {@link java.lang.String} object.
   */
  public void setQRef(final String qRef) {
	  this.qRef = qRef;
  }

  /**
   * <p>Getter for the field <code>literal</code>.</p>
   *
   * @param allowLazyLiteral a boolean.
   * @return a {@link lupos.datastructures.items.literal.Literal} object.
   */
  public Literal getLiteral(final boolean allowLazyLiteral){
	  if(this.literal == null){
		  this.literal = LazyLiteral.getLiteral(this, allowLazyLiteral);
	  }
	  return this.literal;
  }

  /**
   * <p>toQueryString.</p>
   *
   * @return a {@link java.lang.String} object.
   */
  public String toQueryString() {
	  return "<" + this.qRef + ">";
  }

  /** {@inheritDoc} */
  @Override
  public String toString() {
	  return this.qRef;
  }

	/** {@inheritDoc} */
	@Override
	public void init(final SimpleNode node){
		this.setQRef(((ASTQuotedURIRef)node).getQRef());
	}
}
/* JavaCC - OriginalChecksum=e4e66b3497d767749720c42fa02ef0c0 (do not edit this line) */
