
/**
 * Copyright (c) 2007-2015, Institute of Information Systems (Sven Groppe and contributors of LUPOSDATE), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author groppe
 * @version $Id: $Id
 */
/* Generated By:JJTree: Do not edit this line. Node.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package lupos.sparql1_1;

import lupos.datastructures.bindings.Bindings;
import lupos.datastructures.items.Item;
import lupos.datastructures.items.Variable;
import lupos.engine.operators.BasicOperator;
import lupos.engine.operators.singleinput.NotBoundException;
import lupos.engine.operators.singleinput.TypeErrorException;
import lupos.engine.operators.singleinput.filter.expressionevaluation.EvaluationVisitor;
import lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserPathVisitorStringGenerator;
import lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor;
import lupos.sparql1_1.operatorgraph.helper.OperatorConnection;

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */
public
interface Node {

/**
 * This method is called after the node has been made the current
 *    node.  It indicates that child nodes can now be added to it.
 */
	public void jjtOpen();

	/**
	 * This method is called after all the child nodes have been
	 *    added.
	 */
	public void jjtClose();
	/**
	 * This pair of methods are used to inform the node of its
	 *    parent.
	 *
	 * @param n a {@link lupos.sparql1_1.Node} object.
	 */
	public void jjtSetParent(Node n);
	public Node jjtGetParent();
	/** This method tells the node to add its argument to the node's
    * list of children.
     * <p>jjtGetParent.</p>
     *
     * @return a {@link lupos.sparql1_1.Node} object.
     */
 	public void jjtAddChild(Node n, int i);

	/**
	 * This method returns a child node.  The children are numbered
	 *     from zero, left to right.
	 *
	 * @param n a {@link lupos.sparql1_1.Node} object.
	 * @param i a int.
	 */
	public Node jjtGetChild(int i);

	/**
	 * Return the number of children the node has.
	 *
	 * @param i a int.
	 * @return a {@link lupos.sparql1_1.Node} object.
	 */
	public int jjtGetNumChildren();
/**
 * Accept the visitor. *
 *
 * @param visitor a {@link lupos.sparql1_1.SPARQL1_1ParserVisitor} object.
 * @param data a {@link java.lang.Object} object.
 * @return a {@link java.lang.Object} object.
 */
	public Object jjtAccept(SPARQL1_1ParserVisitor visitor, Object data);

	public String accept(lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserVisitorStringGenerator visitor);

	public String accept(SPARQL1_1ParserPathVisitorStringGenerator visitor, String subject, String object);

	public void accept(lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor visitor, OperatorConnection connection);
/**
 * <p>accept.</p>
 *
 * @param visitor a {@link lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserVisitorStringGenerator} object.
 * @return a {@link java.lang.String} object.
 */

    public void accept(lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor visitor, final OperatorConnection connection, Item graphConstraint);
/**
 * <p>accept.</p>
 *
 * @param visitor a {@link lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserPathVisitorStringGenerator} object.
 * @param subject a {@link java.lang.String} object.
 * @param object a {@link java.lang.String} object.
 * @return a {@link java.lang.String} object.
 */

    public BasicOperator accept(SPARQL1_1OperatorgraphGeneratorVisitor visitor, OperatorConnection connection, Item graphConstraint, Variable subject, Variable object, Node subjectNode, Node objectNode);
/**
 * <p>accept.</p>
 *
 * @param visitor a lupos$sparql1_1$operatorgraph$SPARQL1_1OperatorgraphGeneratorVisitor object.
 * @param connection a {@link lupos.sparql1_1.operatorgraph.helper.OperatorConnection} object.
 */

	@SuppressWarnings("rawtypes")
	/**
	 * <p>accept.</p>
	 *
	 * @param visitor a lupos$sparql1_1$operatorgraph$SPARQL1_1OperatorgraphGeneratorVisitor object.
	 * @param connection a {@link lupos.sparql1_1.operatorgraph.helper.OperatorConnection} object.
	 * @param graphConstraint a {@link lupos.datastructures.items.Item} object.
	 */
	public Object accept(EvaluationVisitor visitor, Bindings b, Object data) throws NotBoundException, TypeErrorException;

	/**
	 * <p>accept.</p>
	 *
	 * @param visitor a lupos$sparql1_1$operatorgraph$SPARQL1_1OperatorgraphGeneratorVisitor object.
	 * @param connection a {@link lupos.sparql1_1.operatorgraph.helper.OperatorConnection} object.
	 * @param graphConstraint a {@link lupos.datastructures.items.Item} object.
	 * @param subject a {@link lupos.datastructures.items.Variable} object.
	 * @param object a {@link lupos.datastructures.items.Variable} object.
	 * @param subjectNode a {@link lupos.sparql1_1.Node} object.
	 * @param objectNode a {@link lupos.sparql1_1.Node} object.
	 * @return a {@link lupos.engine.operators.BasicOperator} object.
	 */
	public Node[] getChildren();

	/**
	 * <p>accept.</p>
	 *
	 * @param visitor a {@link lupos.engine.operators.singleinput.filter.expressionevaluation.EvaluationVisitor} object.
	 * @param b a {@link lupos.datastructures.bindings.Bindings} object.
	 * @param data a {@link java.lang.Object} object.
	 * @return a {@link java.lang.Object} object.
	 * @throws lupos.engine.operators.singleinput.NotBoundException if any.
	 * @throws lupos.engine.operators.singleinput.TypeErrorException if any.
	 */
	public void removeChild(int i);

	public void removeChild(Node n);
/**
 * <p>getChildren.</p>
 *
 * @return an array of {@link lupos.sparql1_1.Node} objects.
 */

	public void clearChildren();
/**
 * <p>removeChild.</p>
 *
 * @param i a int.
 */

	public boolean replaceChild2(Node node, Node n);
/**
 * <p>removeChild.</p>
 *
 * @param n a {@link lupos.sparql1_1.Node} object.
 */

	public SimpleNode clone(boolean clean);
/**
 * <p>clearChildren.</p>
 */

	public SimpleNode cloneStillChild(boolean clean);
/**
 * <p>replaceChild2.</p>
 *
 * @param node a {@link lupos.sparql1_1.Node} object.
 * @param n a {@link lupos.sparql1_1.Node} object.
 * @return a boolean.
 */

	public void addChild(Node n);
/**
 * <p>clone.</p>
 *
 * @param clean a boolean.
 * @return a {@link lupos.sparql1_1.SimpleNode} object.
 */

	public void addChild(Node n, final int i);
/**
 * <p>cloneStillChild.</p>
 *
 * @param clean a boolean.
 * @return a {@link lupos.sparql1_1.SimpleNode} object.
 */

	public int getChildNumber(Node node);
/**
 * <p>addChild.</p>
 *
 * @param n a {@link lupos.sparql1_1.Node} object.
 */

}
/**
 * <p>addChild.</p>
 *
 * @param n a {@link lupos.sparql1_1.Node} object.
 * @param i a int.
 */
/* JavaCC - OriginalChecksum=2e7de2c76147d43ac0b5c1ac0f346f1d (do not edit this line) */
