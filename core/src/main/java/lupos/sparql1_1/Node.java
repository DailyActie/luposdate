/* Generated By:JJTree: Do not edit this line. Node.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package lupos.sparql1_1;

import lupos.datastructures.bindings.Bindings;
import lupos.datastructures.items.Item;
import lupos.datastructures.items.Variable;
import lupos.engine.operators.BasicOperator;
import lupos.engine.operators.singleinput.NotBoundException;
import lupos.engine.operators.singleinput.TypeErrorException;
import lupos.engine.operators.singleinput.ExpressionEvaluation.EvaluationVisitor;
import lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserPathVisitorStringGenerator;
import lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor;
import lupos.sparql1_1.operatorgraph.helper.OperatorConnection;

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

public
interface Node {

	/** This method is called after the node has been made the current
    node.  It indicates that child nodes can now be added to it. */
	public void jjtOpen();

	/** This method is called after all the child nodes have been
    added. */
	public void jjtClose();

	/** This pair of methods are used to inform the node of its
    parent. */
	public void jjtSetParent(Node n);
	public Node jjtGetParent();

	/** This method tells the node to add its argument to the node's
    list of children.  */
	public void jjtAddChild(Node n, int i);

	/** This method returns a child node.  The children are numbered
     from zero, left to right. */
	public Node jjtGetChild(int i);

	/** Return the number of children the node has. */
	public int jjtGetNumChildren();

	/** Accept the visitor. **/
	public Object jjtAccept(SPARQL1_1ParserVisitor visitor, Object data);
	
	public String accept(lupos.optimizations.sparql2core_sparql.SPARQL1_1ParserVisitorStringGenerator visitor);
	
	public String accept(SPARQL1_1ParserPathVisitorStringGenerator visitor, String subject, String object);
	
	public void accept(lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor visitor, OperatorConnection connection);
	
    public void accept(lupos.sparql1_1.operatorgraph.SPARQL1_1OperatorgraphGeneratorVisitor visitor, final OperatorConnection connection, Item graphConstraint);

    public BasicOperator accept(SPARQL1_1OperatorgraphGeneratorVisitor visitor, OperatorConnection connection, Item graphConstraint, Variable subject, Variable object, Node subjectNode, Node objectNode);
	
	@SuppressWarnings("rawtypes")
	public Object accept(EvaluationVisitor visitor, Bindings b, Object data) throws NotBoundException, TypeErrorException;

	public Node[] getChildren();

	public void removeChild(int i);

	public void removeChild(Node n);

	public void clearChildren();

	public boolean replaceChild2(Node node, Node n);

	public SimpleNode clone(boolean clean);

	public SimpleNode cloneStillChild(boolean clean);

	public void addChild(Node n);

	public void addChild(Node n, final int i);

	public int getChildNumber(Node node);

}
/* JavaCC - OriginalChecksum=2e7de2c76147d43ac0b5c1ac0f346f1d (do not edit this line) */
