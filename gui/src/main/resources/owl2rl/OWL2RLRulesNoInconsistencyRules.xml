<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2013, Institute of Information Systems (Sven Groppe and contributors of LUPOSDATE), University of Luebeck

    All rights reserved.

    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
    following conditions are met:

    	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
    	  disclaimer.
    	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
    	  following disclaimer in the documentation and/or other materials provided with the distribution.
    	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
    	  products derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
    GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->
<templaterule-document>


<base> http://www.example.de# </base>
<prefix name="rdf">http://www.w3.org/1999/02/22-rdf-syntax-ns#</prefix>
<prefix name="rdfs">http://www.w3.org/2000/01/rdf-schema#</prefix>
<prefix name="owl">http://www.w3.org/2002/07/owl#</prefix>
<prefix name="xsd">http://www.w3.org/2001/XMLSchema#</prefix>
<prefix name="rif">http://www.w3.org/2007/rif#</prefix>
<prefix name="func">http://www.w3.org/2007/rif-builtin-function#</prefix>
<prefix name="pred">http://www.w3.org/2007/rif-builtin-predicate#</prefix>
<prefix name="dc">http://purl.org/dc/terms/</prefix>
<prefix name="eg">http://www.example.me/</prefix>
<prefix name="xs">http://xs/</prefix>
<prefix name="rulenames">local.rulenames#</prefix>


<templaterule>
<name>#prp-ifp</name>
<pattern>(?p rdf:type owl:InverseFunctionalProperty)
</pattern>	
<rifquery type="rdftype"><![CDATA[owl:InverseFunctionalProperty
 ]]></rifquery>
<template>
<![CDATA[ Forall ?x1 ?x2 ?y (?x1[owl:sameAs->?x2]:-And(?x1[?p->?y]?x2[?p->?y]))
]]></template>	
<methodname>emitPropertyRules</methodname>
<classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?p</variable>
</templaterule>












<templaterule> 
<name>#prp-trp</name>
<pattern>(?p rdf:type owl:TransitiveProperty)
</pattern>	
<rifquery type="rdftype"><![CDATA[owl:TransitiveProperty 
 ]]></rifquery><template><![CDATA[
 Forall ?x ?z ?y(?x[?p->?z]:-And(?x[?p->?y]?y[?p->?z]))
 ]]></template>	
 <methodname>emitPropertyRules</methodname>
 <classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?p</variable>
</templaterule>

<templaterule> 
<name>#prp-spo1</name>
<pattern>(?p1 rdfs:subPropertyOf ?p2)
</pattern>	
<rifquery type="p1-prp-p2"><![CDATA[rdfs:subPropertyOf 
 ]]></rifquery>
<template><![CDATA[
 Forall ?x ?y(?x[?p2->?y]:-And(?x[?p1->?y]))
 ]]></template>	
 <methodname>emitPropertyRules</methodname>
 <classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?p1</variable>
<variable>?p2</variable>
</templaterule>

<templaterule> 
<name>#prp-eqp1</name>
<pattern>(?p1 owl:equivalentProperty ?p2)
</pattern>	
<rifquery type="p1-prp-p2"><![CDATA[owl:equivalentProperty  
 ]]></rifquery>
<template><![CDATA[
 Forall ?x ?y(?x[?p2->?y]:-And(?x[?p1->?y]))
 ]]></template>	
 <methodname>emitPropertyRules</methodname>
 <classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?p1</variable>
<variable>?p2</variable>
</templaterule>

<templaterule> 
<name>#prp-eqp2</name>
<pattern>(?p1 owl:equivalentProperty ?p2)
</pattern>	
<rifquery type="p1-prp-p2"><![CDATA[owl:equivalentProperty 
 ]]></rifquery>
<template><![CDATA[
 Forall ?x ?y(?x[?p1->?y]:-And(?x[?p2->?y]))
 ]]></template>	
 <methodname>emitPropertyRules</methodname>
 <classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?p1</variable>
<variable>?p2</variable>
</templaterule>




<templaterule> 
<name>#prp-inv1</name>
<pattern>(?p1 owl:inverseOf ?p2)
</pattern>	
<rifquery type="p1-prp-p2"><![CDATA[owl:inverseOf 
 ]]></rifquery>
<template><![CDATA[
 Forall ?x ?y(?y[?p2->?x]:-And(?x[?p1->?y]))
 ]]></template>	
 <methodname>emitPropertyRules</methodname>
 <classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?p1</variable>
<variable>?p2</variable>
</templaterule>

<templaterule> 
<name>#prp-inv2</name>
<pattern>(?p1 owl:inverseOf ?p2)
</pattern>	
<rifquery type="p1-prp-p2"><![CDATA[owl:inverseOf
 ]]></rifquery>
<template><![CDATA[
 Forall ?x ?y(?y[?p1->?x]:-And(?x[?p2->?y]))
 ]]></template>	
 <methodname>emitPropertyRules</methodname>
 <classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?p1</variable>
<variable>?p2</variable>
</templaterule>

<templaterule> 
<name>#cls-svf1</name>
<pattern>(?x owl:someValuesFrom ?y) (?x owl:onProperty ?p)
</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?x]:-And(?x[owl:someValuesFrom->?y]?x[owl:onProperty->?p])]]></rifquery>
<template><![CDATA[
Forall ?v ?u ( ?u[rdf:type->?x] :- And(?u[?p->?v]?v[rdf:type->?y] ))
]]></template>	
<methodname>emitPropertyRules</methodname>
<classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?x</variable>
<variable>?y</variable>
<variable>?p</variable>
</templaterule>

<templaterule> 
<name>#cls-svf2</name>
<pattern>(?x owl:someValuesFrom :owl:Thing) (?x owl:onProperty ?p)
</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?x]:-And(?x[owl:someValuesFrom->owl:Thing]?x[owl:onProperty->?p])]]></rifquery>
<template><![CDATA[
Forall ?v ?u ( ?u[rdf:type->?x] :- And(?u[?p->?v]))
]]></template>	
<methodname>emitPropertyRules</methodname>
<classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?x</variable>
<variable>?p</variable>
</templaterule>

<templaterule> 
<name>#cls-avf</name>
<pattern>(?x owl:allValuesFrom ?y) (?x owl:onProperty ?p)
</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?x]:-And(?x[owl:allValuesFrom->?y]?x[owl:onProperty->?p])]]></rifquery>
<template><![CDATA[
Forall ?v ?u ( ?v[rdf:type->?y] :- And(?u[rdf:type->?x] ?u[?p->?v]  ))
]]></template>	
<methodname>emitPropertyRules</methodname>
<classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?x</variable>
<variable>?p</variable>
<variable>?y</variable>
</templaterule>

<templaterule> 
<name>#cls-hv1</name>
<pattern>(?x owl:hasValue ?y) (?x owl:onProperty ?p)
</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?x]:-And(?x[owl:hasValue->?y]?x[owl:onProperty->?p])]]></rifquery>
<template><![CDATA[
Forall ?u ( ?u[?p->?y] :- And( ?u[rdf:type->?x]  ))
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?x</variable>
<variable>?y</variable>
<variable>?p</variable>
</templaterule>

<templaterule> 
<name>#cls-hv2</name>
<pattern>(?x owl:hasValue ?y) (?x owl:onProperty ?p)
</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?x]:-And(?x[owl:hasValue->?y]?x[owl:onProperty->?p])]]></rifquery>
<template><![CDATA[
Forall ?u ( ?u[rdf:type->?x] :- And(?u[?p->?y]  ))
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?x</variable>
<variable>?y</variable>
<variable>?p</variable>
</templaterule>



<templaterule> 
<name>#cls-maxc2</name>
<pattern>(?x owl:maxCardinality 1) (?x owl:onProperty ?p)
</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?x]:-And(?x[owl:maxCardinality->1]?x[owl:onProperty->?p])]]></rifquery>
<template><![CDATA[
Forall ?y2 ?u ?y1 (?y1[owl:sameAs->?y2] :- And( ?u[?p->?y1]?u[?p->?y2]?u[rdf:type->?x]  ))
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?x</variable>
<variable>?p</variable>
</templaterule>






<templaterule> 
<name>#cls-maxqc3</name>
<pattern>(?x owl:maxQualifiedCardinality 1) (?x owl:onProperty ?p) (?x owl:onClass ?c)
</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?x]:-And(?x[owl:maxQualifiedCardinality->1]?x[owl:onProperty->?p]?x[owl:onClass->?c])]]></rifquery>
<template><![CDATA[
Forall ?y2 ?u ?y1 (?y1[owl:sameAs->?y2] :- And(?u[rdf:type->?x]?u[?p->?y1] ?y1[rdf:type->?c] ?u[?p->?y2] ?y2[rdf:type->?c]  ))
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?x</variable>
<variable>?p</variable>
<variable>?c</variable>
</templaterule>


<templaterule> 
<name>#cls-maxqc4</name>
<pattern>(?x owl:maxQualifiedCardinality 1) (?x owl:onProperty ?p) (?x owl:onClass owl:Thing)
</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?x]:-And(?x[owl:maxQualifiedCardinality->1]?x[owl:onProperty->?p]?x[owl:onClass->owl:Thing])]]></rifquery>
<template><![CDATA[
Forall ?y2 ?u ?y1 (?y1[owl:sameAs->?y2] :- And(?u[rdf:type->?x]?u[?p->?y1]?u[?p->?y2]  ))
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?x</variable>
<variable>?p</variable>
</templaterule>

<templaterule> 
<name>#scm-hv</name>
<pattern>(?c1 owl:hasValue ?i) (?c1 owl:onProperty ?p1) (?c2 owl:hasValue ?i) (?c2 owl:onProperty ?p2)
</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?c1]:-And(?c1[owl:hasValue->?i]?c1[owl:onProperty->?p1]?c2[owl:hasValue->?i]?c2[owl:onProperty->?p2])]]></rifquery>
<template><![CDATA[
 ?c1[rdfs:subClassOf->?c2] :- And( ?p1[rdfs:subPropertyOf->?p2]  ) 
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?c1</variable>
<variable>?i</variable>
<variable>?p1</variable>
<variable>?c2</variable>
<variable>?p2</variable>
</templaterule>

<templaterule> 
<name>#scm-svf1</name>
<pattern>(?c1 owl:someValuesFrom ?y1)(?c1 owl:onProperty ?p)(?c2 owl:someValuesFrom ?y2)(?c2 owl:onProperty ?p)</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?c1]:-And(?c1[owl:someValuesFrom->?y1]?c1[owl:onProperty->?p]?c2[owl:someValuesFrom->?y2]?c2[owl:onProperty->?p])]]></rifquery>
<template><![CDATA[
?c1[rdfs:subClassOf->?c2] :- And(?y1[rdfs:subClassOf->?y2]  )
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?c1</variable>
<variable>?y1</variable>
<variable>?p</variable>
<variable>?y2</variable>
<variable>?c2</variable>
</templaterule>

<templaterule> 
<name>#scm-svf2</name>
<pattern>(?c1 owl:someValuesFrom ?y)(?c1 owl:onProperty ?p1)(?c2 owl:someValuesFrom ?y)(?c2 owl:onProperty ?p2)</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?c1]:-And(?c1[owl:someValuesFrom->?y]?c1[owl:onProperty->?p1]?c2[owl:someValuesFrom->?y]?c2[owl:onProperty->?p2])]]></rifquery>
<template><![CDATA[
?c1[rdfs:subClassOf->?c2] :- And( ?p1[rdfs:subPropertyOf->?p2]  )
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?c1</variable>
<variable>?p1</variable>
<variable>?y</variable>
<variable>?p2</variable>
<variable>?c2</variable>
</templaterule>

<templaterule> 
<name>#scm-avf1</name>
<pattern>(?c1 owl:allValuesFrom ?y1)(?c1 owl:onProperty ?p)(?c2 owl:allValuesFrom ?y2)(?c2 owl:onProperty ?p)</pattern>	
<rifquery type="xml"><![CDATA[rulenames:property[:prop->?c1]:-And(?c1[owl:allValuesFrom->?y1]?c1[owl:onProperty->?p]?c2[owl:allValuesFrom->?y2]?c2[owl:onProperty->?p])]]></rifquery>
<template><![CDATA[
 ?c1[rdfs:subClassOf->?c2] :- And(?y1[rdfs:subClassOf->?y2]  )
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?c1</variable>
<variable>?y1</variable>
<variable>?p</variable>
<variable>?y2</variable>
<variable>?c2</variable>
</templaterule>

<templaterule> 
<name>#scm-avf2</name>
<pattern>(?c1 owl:allValuesFrom ?y)(?c1 owl:onProperty ?p1)(?c2 owl:allValuesFrom ?y)(?c2 owl:onProperty ?p2)</pattern>	
<rifquery type="xml"><![CDATA[:property[:prop->?c1]:-And(?c1[owl:allValuesFrom->?y]?c1[owl:onProperty->?p1]?c2[owl:allValuesFrom->?y]?c2[owl:onProperty->?p2])]]></rifquery>
<template><![CDATA[
  ?c2[rdfs:subClassOf->?c1] :- And(?p1[rdfs:subPropertyOf->?p2]  )
]]></template>	
<methodname>emitPropertyRules</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<variable>?c1</variable>
<variable>?p1</variable>
<variable>?y</variable>
<variable>?p2</variable>
<variable>?c2</variable>
</templaterule>






<templaterule> 
<name>#prp-spo2</name>
<pattern><![CDATA[(?p owl:propertyChainAxiom ?pc)]]></pattern>
<rifquery type="withforall"><![CDATA[
	
	
	
	 Forall ?x ?listname ?headOfList ?y(
                       rulenames:prp-spo2(?listname ?x ?y) :-
And(?listname[owl:propertyChainAxiom->?headOfList]
eg:membersOfList-spo(?headOfList ?x ?y))
               )
	  
               Forall ?x ?headOfList ?rest ?y ?y1(
                       eg:membersOfList-spo(?headOfList ?x ?y) :-
Or(And(?headOfList[rdf:first->?x] eg:count-spo(?headOfList ?y))
And(?headOfList[rdf:rest->?rest] eg:membersOfList-spo(?rest ?x ?y) ))
               )

               Forall ?headOfList ?y ?y1 ?rest (
                       eg:count-spo(?headOfList ?y) :-
Or(And(?headOfList[rdf:rest->rdf:nil] ?y=0) And(?headOfList[rdf:rest->?rest]
eg:count-spo(?rest ?y1) ?y=External(func:numeric-add(?y1 1))))
               )

	
]]></rifquery>
<methodname>emitPropertyChainRule</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<template><![CDATA[
 TEMPLATE IN PROGRAMMCODE OF EMITTER CLASS
]]></template>	
</templaterule>








<templaterule> 
<name>#prp-key</name>
<pattern><![CDATA[(?c owl:hasKey ?u)]]></pattern>
<rifquery type="withforall"><![CDATA[
	
	
	



	 Forall ?x ?listname ?headOfList ?y(
                       rulenames:prp-adp(?listname ?x) :-
And(?listname[owl:hasKey->?headOfList]
eg:membersOfList-spo(?headOfList ?x ?y))
               )
	  
               Forall ?x ?headOfList ?rest ?y ?y1(
                       eg:membersOfList-spo(?headOfList ?x ?y) :-
Or(And(?headOfList[rdf:first->?x] eg:count-spo(?headOfList ?y))
And(?headOfList[rdf:rest->?rest] eg:membersOfList-spo(?rest ?x ?y) ))
               )

               Forall ?headOfList ?y ?y1 ?rest (
                       eg:count-spo(?headOfList ?y) :-
Or(And(?headOfList[rdf:rest->rdf:nil] ?y=0) And(?headOfList[rdf:rest->?rest]
eg:count-spo(?rest ?y1) ?y=External(func:numeric-add(?y1 1))))
               )




]]></rifquery>
<methodname>emitHasKeyRule</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<template><![CDATA[
 TEMPLATE IN PROGRAMMCODE OF EMITTER CLASS
]]></template>	
</templaterule>






<templaterule> 
<name>#cls-int1</name>
<pattern><![CDATA[(?c owl:intersectionOf ?l)]]></pattern>
<rifquery type="withforall"><![CDATA[
	
	
	


	
	 Forall ?x ?listname ?headOfList ?y(
                       rulenames:cls-int(?listname ?x) :-
And(?listname[owl:intersectionOf->?headOfList]
eg:membersOfList-spo(?headOfList ?x ?y))
               )
	  
               Forall ?x ?headOfList ?rest ?y ?y1(
                       eg:membersOfList-spo(?headOfList ?x ?y) :-
Or(And(?headOfList[rdf:first->?x] eg:count-spo(?headOfList ?y))
And(?headOfList[rdf:rest->?rest] eg:membersOfList-spo(?rest ?x ?y) ))
               )

               Forall ?headOfList ?y ?y1 ?rest (
                       eg:count-spo(?headOfList ?y) :-
Or(And(?headOfList[rdf:rest->rdf:nil] ?y=0) And(?headOfList[rdf:rest->?rest]
eg:count-spo(?rest ?y1) ?y=External(func:numeric-add(?y1 1))))
               )

	
]]></rifquery>
<methodname>emitIntersectionOfRule1</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<template><![CDATA[
 TEMPLATE IN PROGRAMMCODE OF EMITTER CLASS
]]></template>	
</templaterule>

<templaterule> 
<name>#scm-int</name>
<pattern><![CDATA[(?c owl:intersectionOf ?l)]]></pattern>
<rifquery type="withforall"><![CDATA[
	
	
	

 	 Forall ?x ?listname ?headOfList ?y(
                       rulenames:scm-int(?listname ?x) :-
And(?listname[owl:intersectionOf->?headOfList]
eg:membersOfList-spo(?headOfList ?x ?y))
               )
	  
               Forall ?x ?headOfList ?rest ?y ?y1(
                       eg:membersOfList-spo(?headOfList ?x ?y) :-
Or(And(?headOfList[rdf:first->?x] eg:count-spo(?headOfList ?y))
And(?headOfList[rdf:rest->?rest] eg:membersOfList-spo(?rest ?x ?y) ))
               )

               Forall ?headOfList ?y ?y1 ?rest (
                       eg:count-spo(?headOfList ?y) :-
Or(And(?headOfList[rdf:rest->rdf:nil] ?y=0) And(?headOfList[rdf:rest->?rest]
eg:count-spo(?rest ?y1) ?y=External(func:numeric-add(?y1 1))))
               )



]]></rifquery>
<methodname>emitIntersectionOfRule2</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<template><![CDATA[
 TEMPLATE IN PROGRAMMCODE OF EMITTER CLASS
]]></template>	
</templaterule>

<templaterule> 
<name>#cls-uni</name>
<pattern><![CDATA[(?c owl:unionOf ?l)]]></pattern>
<rifquery type="withforall"><![CDATA[
	
	


	 Forall ?x ?listname ?headOfList ?y(
                       rulenames:cls-uni(?listname ?x) :-
And(?listname[owl:unionOf->?headOfList]
eg:membersOfList-spo(?headOfList ?x ?y))
               )
	  
               Forall ?x ?headOfList ?rest ?y ?y1(
                       eg:membersOfList-spo(?headOfList ?x ?y) :-
Or(And(?headOfList[rdf:first->?x] eg:count-spo(?headOfList ?y))
And(?headOfList[rdf:rest->?rest] eg:membersOfList-spo(?rest ?x ?y) ))
               )

               Forall ?headOfList ?y ?y1 ?rest (
                       eg:count-spo(?headOfList ?y) :-
Or(And(?headOfList[rdf:rest->rdf:nil] ?y=0) And(?headOfList[rdf:rest->?rest]
eg:count-spo(?rest ?y1) ?y=External(func:numeric-add(?y1 1))))
               )



	
]]></rifquery>
<methodname>emitUnionOfRule1</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<template><![CDATA[
 TEMPLATE IN PROGRAMMCODE OF EMITTER CLASS
]]></template>	
</templaterule>


<templaterule> 
<name>#scm-uni</name>
<pattern><![CDATA[(?c owl:unionOf ?l)]]></pattern>
<rifquery type="withforall"><![CDATA[
	
	
	

 	 Forall ?x ?listname ?headOfList ?y(
                       rulenames:scm-uni(?listname ?x) :-
And(?listname[owl:unionOf->?headOfList]
eg:membersOfList-spo(?headOfList ?x ?y))
               )
	  
               Forall ?x ?headOfList ?rest ?y ?y1(
                       eg:membersOfList-spo(?headOfList ?x ?y) :-
Or(And(?headOfList[rdf:first->?x] eg:count-spo(?headOfList ?y))
And(?headOfList[rdf:rest->?rest] eg:membersOfList-spo(?rest ?x ?y) ))
               )

               Forall ?headOfList ?y ?y1 ?rest (
                       eg:count-spo(?headOfList ?y) :-
Or(And(?headOfList[rdf:rest->rdf:nil] ?y=0) And(?headOfList[rdf:rest->?rest]
eg:count-spo(?rest ?y1) ?y=External(func:numeric-add(?y1 1))))
               )


	
]]></rifquery>
<methodname>emitUnionOfRule2</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<template><![CDATA[
 TEMPLATE IN PROGRAMMCODE OF EMITTER CLASS
]]></template>	
</templaterule>

<templaterule> 
<name>#cls-oo</name>
<pattern><![CDATA[(?c owl:oneOf ?l)]]></pattern>
<rifquery type="withforall"><![CDATA[
	
	
	

 	 Forall ?x ?listname ?headOfList ?y(
                       rulenames:cls-oo(?listname ?x) :-
And(?listname[owl:oneOf->?headOfList]
eg:membersOfList-spo(?headOfList ?x ?y))
               )
	  
               Forall ?x ?headOfList ?rest ?y ?y1(
                       eg:membersOfList-spo(?headOfList ?x ?y) :-
Or(And(?headOfList[rdf:first->?x] eg:count-spo(?headOfList ?y))
And(?headOfList[rdf:rest->?rest] eg:membersOfList-spo(?rest ?x ?y) ))
               )

               Forall ?headOfList ?y ?y1 ?rest (
                       eg:count-spo(?headOfList ?y) :-
Or(And(?headOfList[rdf:rest->rdf:nil] ?y=0) And(?headOfList[rdf:rest->?rest]
eg:count-spo(?rest ?y1) ?y=External(func:numeric-add(?y1 1))))
               )


	
]]></rifquery>
<methodname>emitOneOfRule</methodname><classname>lupos.owl2rl.emitter.RuleEmitter</classname>
<template><![CDATA[
TEMPLATE IN PROGRAMMCODE
]]></template>	
</templaterule>











<fixedrules><![CDATA[






(* <#eq-ref> *)
Forall ?p ?o ?s (
   ?s[owl:sameAs->?s] :- 
   
   And(
   
    Or(
        External(pred:is-uri(?s))
        External(pred:is-blanknode(?s))
        ) 
   
   ?s[?p->?o]))

(* <#eq-ref1> *)
Forall ?p ?o ?s (
   ?p[owl:sameAs->?p] :-  And(
    Or(
        External(pred:is-uri(?p))
        External(pred:is-blanknode(?p))
        ) ?s[?p->?o]))

(* <#eq-ref2> *)
Forall ?p ?o ?s (

   ?o[owl:sameAs->?o] :- And(
    Or(
        External(pred:is-uri(?o))
        External(pred:is-blanknode(?o))
        )  ?s[?p->?o]))

(* <#eq-sym> *)
Forall ?x ?y (
   ?y[owl:sameAs->?x] :-  And(
    Or(
        External(pred:is-uri(?y))
        External(pred:is-blanknode(?y))
        ) ?x[owl:sameAs->?y]))

(* <#eq-trans> *)
Forall ?x ?z ?y (
   ?x[owl:sameAs->?z] :- And(
   
       ?x[owl:sameAs->?y]
       ?y[owl:sameAs->?z]  
       
        Or(
        External(pred:is-uri(?x))
        External(pred:is-blanknode(?x))
        )))

(* <#eq-rep-s> *)
Forall ?p ?o ?s ?s2 (
   ?s2[?p->?o] :- And(
       ?s[owl:sameAs->?s2]
       ?s[?p->?o]  ))

(* <#eq-rep-p> *)
Forall ?p ?o ?s ?p2 (
   ?s[?p2->?o] :- And(
       ?p[owl:sameAs->?p2]
       ?s[?p->?o]  ))

(* <#eq-rep-o> *)
Forall ?p ?o ?s ?o2 (
   ?s[?p->?o2] :- And(
       ?o[owl:sameAs->?o2]
       ?s[?p->?o]  ))



(* <#prp-ap-label> *)
   rdfs:label[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-comment> *)
   rdfs:comment[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-seeAlso> *)
   rdfs:seeAlso[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-isDefinedBy> *)
   rdfs:isDefinedBy[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-deprecated> *)
   owl:deprecated[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-priorVersion> *)
   owl:priorVersion[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-backwardCompatibleWith> *)
   owl:backwardCompatibleWith[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-incompatibleWith> *)
   owl:incompatibleWith[rdf:type->owl:AnnotationProperty]

(* <#prp-dom> *)
Forall ?p ?c ?x ?y (
   ?x[rdf:type->?c] :- And(
       ?p[rdfs:domain->?c]
       ?x[?p->?y]  ))

(* <#prp-rng> *)
Forall ?p ?c ?x ?y (
   ?y[rdf:type->?c] :- And(
       ?p[rdfs:range->?c]
       ?x[?p->?y]  ))

(* <#cls-thing> *)
   owl:Thing[rdf:type->owl:Class]

(* <#cls-nothing1> *)
   owl:Nothing[rdf:type->owl:Class]



(* <#cax-sco> *)
Forall ?x ?c1 ?c2 (
   ?x[rdf:type->?c2] :- And(
       ?c1[rdfs:subClassOf->?c2]
       ?x[rdf:type->?c1]  ))

(* <#cax-eqc1> *)
Forall ?x ?c1 ?c2 (
   ?x[rdf:type->?c2] :- And(
       ?c1[owl:equivalentClass->?c2]
       ?x[rdf:type->?c1]  ))

(* <#cax-eqc2> *)
Forall ?x ?c1 ?c2 (
   ?x[rdf:type->?c1] :- And(
       ?c1[owl:equivalentClass->?c2]
       ?x[rdf:type->?c2]  ))

(* <#scm-cls> *)
Forall ?c (
   ?c[rdfs:subClassOf->?c] :- ?c[rdf:type->owl:Class])

(* <#scm-cls1> *)
Forall ?c (
   ?c[owl:equivalentClass->?c] :- ?c[rdf:type->owl:Class])

(* <#scm-cls2> *)
Forall ?c (
   ?c[rdfs:subClassOf->owl:Thing] :- ?c[rdf:type->owl:Class])

(* <#scm-cls3> *)
Forall ?c (
   owl:Nothing[rdfs:subClassOf->?c] :- ?c[rdf:type->owl:Class])

(* <#scm-sco> *)
Forall ?c1 ?c2 ?c3 (
   ?c1[rdfs:subClassOf->?c3] :- And(
       ?c1[rdfs:subClassOf->?c2]
       ?c2[rdfs:subClassOf->?c3]  ))

(* <#scm-eqc1> *)
Forall ?c1 ?c2 (
   ?c1[rdfs:subClassOf->?c2] :- ?c1[owl:equivalentClass->?c2])

(* <#scm-eqc11> *)
Forall ?c1 ?c2 (
   ?c2[rdfs:subClassOf->?c1] :- ?c1[owl:equivalentClass->?c2])

(* <#scm-eqc2> *)
Forall ?c1 ?c2 (
   ?c1[owl:equivalentClass->?c2] :- And(
       ?c1[rdfs:subClassOf->?c2]
       ?c2[rdfs:subClassOf->?c1]  ))

(* <#scm-op> *)
Forall ?p (
   ?p[rdfs:subPropertyOf->?p] :- ?p[rdf:type->owl:ObjectProperty])

(* <#scm-op1> *)
Forall ?p (
   ?p[owl:equivalentProperty->?p] :- ?p[rdf:type->owl:ObjectProperty])

(* <#scm-dp> *)
Forall ?p (
   ?p[rdfs:subPropertyOf->?p] :- ?p[rdf:type->owl:DatatypeProperty])

(* <#scm-dp1> *)
Forall ?p (
   ?p[owl:equivalentProperty->?p] :- ?p[rdf:type->owl:DatatypeProperty])

(* <#scm-spo> *)
Forall ?p3 ?p2 ?p1 (
   ?p1[rdfs:subPropertyOf->?p3] :- And(
       ?p1[rdfs:subPropertyOf->?p2]
       ?p2[rdfs:subPropertyOf->?p3]  ))

(* <#scm-eqp1> *)
Forall ?p2 ?p1 (
   ?p1[rdfs:subPropertyOf->?p2] :- ?p1[owl:equivalentProperty->?p2])

(* <#scm-eqp11> *)
Forall ?p2 ?p1 (
   ?p2[rdfs:subPropertyOf->?p1] :- ?p1[owl:equivalentProperty->?p2])

(* <#scm-eqp2> *)
Forall ?p2 ?p1 (
   ?p1[owl:equivalentProperty->?p2] :- And(
       ?p1[rdfs:subPropertyOf->?p2]
       ?p2[rdfs:subPropertyOf->?p1]  ))

(* <#scm-dom1> *)
Forall ?p ?c1 ?c2 (
   ?p[rdfs:domain->?c2] :- And(
       ?p[rdfs:domain->?c1]
       ?c1[rdfs:subClassOf->?c2]  ))

(* <#scm-dom2> *)
Forall ?c ?p2 ?p1 (
   ?p1[rdfs:domain->?c] :- And(
       ?p2[rdfs:domain->?c]
       ?p1[rdfs:subPropertyOf->?p2]  ))

(* <#scm-rng1> *)
Forall ?p ?c1 ?c2 (
   ?p[rdfs:range->?c2] :- And(
       ?p[rdfs:range->?c1]
       ?c1[rdfs:subClassOf->?c2]  ))

(* <#scm-rng2> *)
Forall ?c ?p2 ?p1 (
   ?p1[rdfs:range->?c] :- And(
       ?p2[rdfs:range->?c]
       ?p1[rdfs:subPropertyOf->?p2]  ))


 
 


                  
(* <#dt-type1-PlainLiteral> *) rdf:PlainLiteral[rdf:type -> rdfs:Datatype]
(* <#dt-type1-decimal> *) xsd:decimal[rdf:type -> rdfs:Datatype]
(* <#dt-type1-integer> *) xsd:integer[rdf:type -> rdfs:Datatype]
(* <#dt-type1-double> *) xsd:double[rdf:type -> rdfs:Datatype]
(* <#dt-type1-string> *) xsd:string[rdf:type -> rdfs:Datatype]
(* <#dt-type1-dateTime> *) xsd:dateTime[rdf:type -> rdfs:Datatype]
(* <#dt-type1-XMLLiteral> *) rdf:XMLLiteral[rdf:type -> rdfs:Datatype]
(* <#dt-type1-Literal> *) rdfs:Literal[rdf:type -> rdfs:Datatype]

(* <#dt-type1-nonNegativeInteger> *) xsd:nonNegativeInteger[rdf:type -> rdfs:Datatype]
(* <#dt-type1-nonPositiveInteger> *) xsd:nonPositiveInteger[rdf:type -> rdfs:Datatype]
(* <#dt-type1-positiveInteger> *) xsd:positiveInteger[rdf:type -> rdfs:Datatype]
(* <#dt-type1-negativeInteger> *) xsd:negativeInteger[rdf:type -> rdfs:Datatype]
(* <#dt-type1-long> *) xsd:long[rdf:type -> rdfs:Datatype]
(* <#dt-type1-int> *) xsd:int[rdf:type -> rdfs:Datatype]
(* <#dt-type1-short> *) xsd:short[rdf:type -> rdfs:Datatype]
(* <#dt-type1-byte> *) xsd:byte[rdf:type -> rdfs:Datatype]
(* <#dt-type1-unsignedLong> *) xsd:unsignedLong[rdf:type -> rdfs:Datatype]
(* <#dt-type1-unsignedInt> *) xsd:unsignedInt[rdf:type -> rdfs:Datatype]
(* <#dt-type1-unsignedShort> *) xsd:unsignedShort[rdf:type -> rdfs:Datatype]
(* <#dt-type1-unsignedByte> *) xsd:unsignedByte[rdf:type -> rdfs:Datatype]
(* <#dt-type1-normalizedString> *) xsd:normalizedString[rdf:type -> rdfs:Datatype]
(* <#dt-type1-token> *) xsd:token[rdf:type -> rdfs:Datatype]
(* <#dt-type1-language> *) xsd:language[rdf:type -> rdfs:Datatype]
(* <#dt-type1-Name> *) xsd:Name[rdf:type -> rdfs:Datatype]
(* <#dt-type1-NCName> *) xsd:NCName[rdf:type -> rdfs:Datatype]
(* <#dt-type1-NMTOKEN> *) xsd:NMTOKEN[rdf:type -> rdfs:Datatype]

(* <#dt-type1-float> *) xsd:float[rdf:type -> rdfs:Datatype]
(* <#dt-type1-boolean> *) xsd:boolean[rdf:type -> rdfs:Datatype]
(* <#dt-type1-hexBinary> *) xsd:hexBinary[rdf:type -> rdfs:Datatype]
(* <#dt-type1-base64Binary> *) xsd:base64Binary[rdf:type -> rdfs:Datatype]
(* <#dt-type1-anyURI> *) xsd:anyURI[rdf:type -> rdfs:Datatype]
(* <#dt-type1-dateTimeStamp> *) xsd:dateTimeStamp [rdf:type -> rdfs:Datatype]





]]>



</fixedrules>


</templaterule-document>
