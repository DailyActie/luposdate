/* Generated by JTB 1.4.4 */
package lupos.rif.generated.syntaxtree;

import lupos.rif.generated.visitor.*;

/**
 * JTB node class for the production RIFDocument:<br>
 * Corresponding grammar :<br>
 * f0 -> < DOCUMENT ><br>
 * f1 -> < LPAREN ><br>
 * f2 -> ( RIFBase() )?<br>
 * f3 -> ( RIFPrefix() )*<br>
 * f4 -> ( RIFImport() )*<br>
 * f5 -> ( RIFConclusion() )?<br>
 * f6 -> ( RIFGroup() )?<br>
 * f7 -> < RPAREN ><br>
 */
public class RIFDocument implements INode {

  /** A child node */
  public NodeToken f0;

  /** A child node */
  public NodeToken f1;

  /** A child node */
  public NodeOptional f2;

  /** A child node */
  public NodeListOptional f3;

  /** A child node */
  public NodeListOptional f4;

  /** A child node */
  public NodeOptional f5;

  /** A child node */
  public NodeOptional f6;

  /** A child node */
  public NodeToken f7;

  /** The parent pointer */
  private INode parent;

  /** The serial version uid */
  private static final long serialVersionUID = 144L;

  /**
   * Constructs the node with all its children nodes.
   *
   * @param n0 first child node
   * @param n1 next child node
   * @param n2 next child node
   * @param n3 next child node
   * @param n4 next child node
   * @param n5 next child node
   * @param n6 next child node
   * @param n7 next child node
   */
  public RIFDocument(final NodeToken n0, final NodeToken n1, final NodeOptional n2, final NodeListOptional n3, final NodeListOptional n4, final NodeOptional n5, final NodeOptional n6, final NodeToken n7) {
    f0 = n0;
    if (f0 != null)
      f0.setParent(this);
    f1 = n1;
    if (f1 != null)
      f1.setParent(this);
    f2 = n2;
    if (f2 != null)
      f2.setParent(this);
    f3 = n3;
    if (f3 != null)
      f3.setParent(this);
    f4 = n4;
    if (f4 != null)
      f4.setParent(this);
    f5 = n5;
    if (f5 != null)
      f5.setParent(this);
    f6 = n6;
    if (f6 != null)
      f6.setParent(this);
    f7 = n7;
    if (f7 != null)
      f7.setParent(this);
  }

  /**
   * Constructs the node with only its non NodeToken child node(s).
   *
   * @param n0 first child node
   * @param n1 next child node
   * @param n2 next child node
   * @param n3 next child node
   * @param n4 next child node
   */
  public RIFDocument(final NodeOptional n0, final NodeListOptional n1, final NodeListOptional n2, final NodeOptional n3, final NodeOptional n4) {
    f0 = new NodeToken("document");
    if (f0 != null)
        f0.setParent(this);
    f1 = new NodeToken("(");
    if (f1 != null)
        f1.setParent(this);
    f2 = n0;
    if (f2 != null)
        f2.setParent(this);
    f3 = n1;
    if (f3 != null)
        f3.setParent(this);
    f4 = n2;
    if (f4 != null)
        f4.setParent(this);
    f5 = n3;
    if (f5 != null)
        f5.setParent(this);
    f6 = n4;
    if (f6 != null)
        f6.setParent(this);
    f7 = new NodeToken(")");
    if (f7 != null)
        f7.setParent(this);
  }

  /**
   * Accepts the IRetArguVisitor visitor.
   *
   * @param <R> the user return type
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   * @return a user chosen return information
   */
  public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  /**
   * Accepts the IRetVisitor visitor.
   *
   * @param <R> the user return type
   * @param vis the visitor
   * @return a user chosen return information
   */
  public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  /**
   * Accepts the IVoidArguVisitor visitor.
   *
   * @param <A> the user argument type
   * @param vis the visitor
   * @param argu a user chosen argument
   */
  public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }

  /**
   * Accepts the IVoidVisitor visitor.
   *
   * @param vis the visitor
   */
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

  /**
   * Setter for the parent node.
   *
   * @param n the parent node
   */
  public void setParent(final INode n) {
    parent = n;
  }

  /**
   * Getter for the parent node.
   *
   * @return the parent node
   */
  public INode getParent() {
    return parent;
  }

}
