/**
 * Copyright (c) 2013, Institute of Information Systems (Sven Groppe and contributors of LUPOSDATE), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* Generated by JTB 1.4.4 */
package lupos.rif.generated.syntaxtree;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;

import lupos.rif.generated.visitor.IRetArguVisitor;
import lupos.rif.generated.visitor.IRetVisitor;
import lupos.rif.generated.visitor.IVoidArguVisitor;
import lupos.rif.generated.visitor.IVoidVisitor;
/**
 * Represents a single token in the grammar.<br>
 * If the "-tk" option is used, also contains a ArrayList of preceding special tokens.<br>
 * The class stores the token image, kind and position information, and the special tokens list.<br>
 */
public class NodeToken implements INode {

  /** The token image */
  public String tokenImage;

  /** The list of special tokens */
  public ArrayList<NodeToken> specialTokens;

  /** The token first line (-1 means not available) */
  public int beginLine;

  /** The token first column (-1 means not available) */
  public int beginColumn;

  /** The token last line (-1 means not available) */
  public int endLine;

  /** The token last column (-1 means not available) */
  public int endColumn;

  /** The JavaCC token "kind" integer (-1 means not available) */
  public int kind;

  /** The parent node */
  private INode parent;

  /** The serial version uid */
  private static final long serialVersionUID = 144L;

  /** The OS line separator */
  public static final String LS = System.getProperty("line.separator");

  /**
   * Initializes a {@link NodeToken} with a given string and no position information.
   *
   * @param s the token string
   */
  public NodeToken(final String s) {
    this(s, -1, -1, -1, -1, -1);
  }

  /**
   * Initializes a {@link NodeToken} with a given string and position information.
   *
   * @param s the token string
   * @param kn the token kind
   * @param bl the first line
   * @param bc the first column
   * @param el the last line
   * @param ec the last column
   */
  public NodeToken(final String s, final int kn, final int bl, final int bc, final int el, final int ec) {
    this.tokenImage = s;
    this.specialTokens = null;
    this.kind = kn;
    this.beginLine = bl;
    this.beginColumn = bc;
    this.endLine = el;
    this.endColumn = ec;
  }

  /**
   * Gets the special token in the special tokens list at a given position.
   *
   * @param i the special token's position
   * @return the special token
   */
  public NodeToken getSpecialAt(final int i) {
    if (this.specialTokens == null) {
		throw new NoSuchElementException("No specialTokens in token");
	}
    return this.specialTokens.get(i);
  }

  /**
   * @return the number of special tokens
   */
  public int numSpecials() {
    if (this.specialTokens == null) {
		return 0;
	}
    return this.specialTokens.size();
  }

  /**
   * Adds a special token to the special tokens list.
   *
   * @param s the special token to add
   */
  public void addSpecial(final NodeToken s) {
    if (this.specialTokens == null) {
		this.specialTokens = new ArrayList<NodeToken>();
	}
    this.specialTokens.add(s);
    s.setParent(this);
  }

  /**
   * Trims the special tokens list.
   */
  public void trimSpecials() {
    if (this.specialTokens == null) {
		return;
	}
    this.specialTokens.trimToSize();
  }

  /**
   * @return the token image
   */
  @Override
  public String toString() {
    return this.tokenImage;
  }

  /**
   * Returns the list of special tokens of the current {@link NodeToken} as a string,<br>
   * taking in account a given indentation.
   *
   * @param spc the indentation
   * @return the string representing the special tokens list
   */
  public String getSpecials(final String spc) {
    if (this.specialTokens == null) {
		return "";
	}
    final StringBuilder buf = new StringBuilder(64);
    for (final Iterator<NodeToken> e = this.specialTokens.iterator(); e.hasNext();) {
      final String s = e.next().tokenImage;
      final int p = s.length() - 1;
      final char c = s.charAt(p);
      buf.append(s);
      if (c == '\n' || c == '\r') {
		buf.append(spc);
	} else {
		buf.append(LS).append(spc);
	}
    }
    return buf.toString();
  }

  /**
   * Returns the list of special tokens of the current {@link NodeToken} and the current<br>
   * {@link NodeToken} as a string, taking in account a given indentation.
   *
   * @param spc the indentation
   * @return the string representing the special tokens list and the token
   */
  public String withSpecials(final String spc) {
    final String specials = this.getSpecials(spc);
    final int len = specials.length();
    if (len == 0) {
		return this.tokenImage;
	}
    final StringBuilder buf = new StringBuilder(len + this.tokenImage.length());
    buf.append(specials).append(this.tokenImage);
    return buf.toString();
  }

  /**
   * Accepts a {@link IRetArguVisitor} visitor with user Return and Argument data.
   *
   * @param <R> the user Return type
   * @param <A> the user Argument type
   * @param vis the visitor
   * @param argu the user Argument data
   * @return the user Return data
   */
  @Override
public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  /**
   * Accepts a {@link IRetVisitor} visitor with user Return data.
   *
   * @param <R> the user Return type
   * @param vis the visitor
   * @return the user Return data
   */
  @Override
public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  /**
   * Accepts a {@link IVoidArguVisitor} visitor with user Argument data.
   *
   * @param <A> the user Argument type
   * @param vis the visitor
   * @param argu the user Argument data
   */
  @Override
public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }

  /**
   * Accepts a {@link IVoidVisitor} visitor with no user Return nor Argument data.
   *
   * @param vis the visitor
   */
  @Override
public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

  /**
   * Sets the parent node.
   *
   * @param n the parent node
   */
  @Override
public void setParent(final INode n) {
    this.parent = n;
  }

  /**
   * Gets the parent node.
   *
   * @return the parent node
   */
  @Override
public INode getParent() {
    return this.parent;
  }
}
