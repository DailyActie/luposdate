/**
 * Copyright (c) 2012, Institute of Information Systems (Sven Groppe), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* Generated By:JavaCC: Do not edit this line. RIFParserTokenManager.java */
package lupos.rif.generated.parser;
import lupos.rif.generated.syntaxtree.*;

/** Token Manager. */
public class RIFParserTokenManager implements RIFParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(7, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(7, 0);
      case 12:
         jjmatchedKind = 5;
         return jjMoveNfa_0(7, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(7, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(7, 0);
      case 35:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 40:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 41:
         jjmatchedKind = 9;
         return jjMoveNfa_0(7, 0);
      case 42:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 44:
         jjmatchedKind = 10;
         return jjMoveNfa_0(7, 0);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 46:
         jjmatchedKind = 11;
         return jjMoveNfa_0(7, 0);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 61:
         jjmatchedKind = 15;
         return jjMoveNfa_0(7, 0);
      case 63:
         jjmatchedKind = 12;
         return jjMoveNfa_0(7, 0);
      case 64:
         jjmatchedKind = 23;
         return jjMoveNfa_0(7, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x600000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 91:
         jjmatchedKind = 18;
         return jjMoveNfa_0(7, 0);
      case 93:
         jjmatchedKind = 19;
         return jjMoveNfa_0(7, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x600000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 124:
         jjmatchedKind = 20;
         return jjMoveNfa_0(7, 0);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 0);
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         break;
      case 41:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x100a000000L);
      case 82:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x24000000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L);
      case 94:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100a000000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x24000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 1);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 68:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 100:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 69:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 84:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 3);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x1008000000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 80:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x240000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1008000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 112:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x240000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 4);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 76:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 83:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         break;
      case 84:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 88:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         break;
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 120:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 6);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 76:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 7;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 7);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 8);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 9;
         }
         break;
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 9);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0xfffffffe00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffff3000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 370;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(358, 359);
                  else if (curChar == 58)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(5, 9);
                  }
                  else if (curChar == 60)
                     jjCheckNAddStates(10, 33);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 46)
                     jjCheckNAdd(23);
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 34)
                     jjCheckNAddStates(34, 36);
                  else if (curChar == 39)
                     jjCheckNAddStates(37, 39);
                  break;
               case 0:
                  if (curChar == 42)
                     jjCheckNAddStates(40, 43);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 3:
                  if (curChar == 41 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 10)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 58)
                     jjAddStates(44, 45);
                  break;
               case 10:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 13:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 16:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 20:
                  if (curChar == 45)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 46)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if (curChar == 39)
                     jjCheckNAddStates(37, 39);
                  break;
               case 28:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 31:
                  if (curChar == 39 && kind > 45)
                     kind = 45;
                  break;
               case 32:
                  if (curChar == 34)
                     jjCheckNAddStates(34, 36);
                  break;
               case 33:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 35:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 36:
                  if (curChar == 34 && kind > 46)
                     kind = 46;
                  break;
               case 37:
                  if (curChar == 39)
                     jjCheckNAddStates(46, 48);
                  break;
               case 38:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 40:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 41:
                  if (curChar == 39 && kind > 47)
                     kind = 47;
                  break;
               case 42:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 45:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  break;
               case 47:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 49:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 50:
                  if (curChar == 34 && kind > 48)
                     kind = 48;
                  break;
               case 51:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 54:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 60)
                     jjCheckNAddStates(10, 33);
                  break;
               case 56:
                  if ((0xafffffbfffffffffL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 57:
                  if (curChar == 35)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if (curChar == 62 && kind > 37)
                     kind = 37;
                  break;
               case 60:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(61, 58);
                  break;
               case 61:
                  if ((0xafffffbfffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 58);
                  break;
               case 128:
                  if (curChar == 51)
                     jjCheckNAdd(60);
                  break;
               case 129:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 151:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 158:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 165:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 172:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 241:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 249:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 277:
                  if (curChar == 48)
                     jjCheckNAdd(60);
                  break;
               case 278:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 297:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 307:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 316:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 317:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 316;
                  break;
               case 318:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 317;
                  break;
               case 319:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 318;
                  break;
               case 320:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 319;
                  break;
               case 321:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 322:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 321;
                  break;
               case 323:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 322;
                  break;
               case 324:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 323;
                  break;
               case 325:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 324;
                  break;
               case 326:
                  if (curChar == 35)
                     jjCheckNAddStates(52, 54);
                  break;
               case 328:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 329:
                  if (curChar == 58 && kind > 38)
                     kind = 38;
                  break;
               case 330:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 331:
                  if (curChar != 58)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddStates(5, 9);
                  break;
               case 333:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(333, 334);
                  break;
               case 334:
                  if ((0x3ff000000000000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 336:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(336, 334);
                  break;
               case 337:
                  if (curChar == 46)
                     jjCheckNAdd(338);
                  break;
               case 338:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(338, 339);
                  break;
               case 340:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(341);
                  break;
               case 341:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(341);
                  break;
               case 342:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(343, 344);
                  break;
               case 343:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(343);
                  break;
               case 344:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(344, 345);
                  break;
               case 345:
                  if (curChar != 46)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(346, 347);
                  break;
               case 346:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(346, 347);
                  break;
               case 348:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(349);
                  break;
               case 349:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(349);
                  break;
               case 350:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddStates(59, 63);
                  break;
               case 351:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(351, 352);
                  break;
               case 353:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(354);
                  break;
               case 354:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(354);
                  break;
               case 355:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(355, 17);
                  break;
               case 356:
                  if (curChar != 58)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(5, 9);
                  break;
               case 357:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(358, 359);
                  break;
               case 358:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(358);
                  break;
               case 359:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(359, 360);
                  break;
               case 360:
                  if (curChar != 46)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(361, 362);
                  break;
               case 361:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(361, 362);
                  break;
               case 363:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(364);
                  break;
               case 364:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(364);
                  break;
               case 365:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddStates(0, 4);
                  break;
               case 366:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(366, 367);
                  break;
               case 368:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(369);
                  break;
               case 369:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(369);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAddStates(64, 69);
                  }
                  else if (curChar == 64)
                     jjCheckNAdd(19);
                  else if (curChar == 95)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAddTwoStates(16, 17);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  jjAddStates(40, 43);
                  break;
               case 9:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 12:
                  if (curChar != 95)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(13, 11);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 14:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 15:
                  if (curChar != 95)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 18:
                  if (curChar == 64)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 28:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 29:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  jjCheckNAddStates(37, 39);
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 34:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  jjCheckNAddStates(34, 36);
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 39:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  jjCheckNAddStates(46, 48);
                  break;
               case 47:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  jjCheckNAddStates(49, 51);
                  break;
               case 56:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 59:
                  if (curChar == 112)
                     jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 58);
                  break;
               case 62:
               case 94:
               case 98:
               case 138:
               case 141:
                  if (curChar == 97)
                     jjCheckNAdd(59);
                  break;
               case 63:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 110)
                     jjCheckNAdd(60);
                  break;
               case 66:
                  if (curChar == 101)
                     jjCheckNAdd(65);
                  break;
               case 67:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 115)
                     jjCheckNAdd(59);
                  break;
               case 81:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 114)
                     jjCheckNAdd(65);
                  break;
               case 84:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 115)
                     jjCheckNAdd(60);
                  break;
               case 86:
               case 146:
                  if (curChar == 105)
                     jjCheckNAdd(85);
                  break;
               case 87:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 97)
                     jjAddStates(72, 75);
                  break;
               case 90:
                  if (curChar == 97)
                     jjCheckNAdd(60);
                  break;
               case 91:
                  if (curChar == 97)
                     jjCheckNAdd(90);
                  break;
               case 92:
                  if (curChar == 97)
                     jjCheckNAdd(85);
                  break;
               case 93:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 95:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
               case 208:
                  if (curChar == 102)
                     jjCheckNAdd(85);
                  break;
               case 97:
                  if (curChar == 99)
                     jjAddStates(76, 78);
                  break;
               case 99:
                  if (curChar == 100)
                     jjCheckNAdd(60);
                  break;
               case 100:
               case 101:
               case 181:
                  if (curChar == 105)
                     jjCheckNAdd(99);
                  break;
               case 102:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 100)
                     jjAddStates(79, 83);
                  break;
               case 104:
                  if (curChar == 116)
                     jjCheckNAdd(90);
                  break;
               case 105:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 118)
                     jjCheckNAdd(60);
                  break;
               case 107:
                  if (curChar == 97)
                     jjCheckNAdd(106);
                  break;
               case 108:
                  if (curChar == 116)
                     jjCheckNAdd(60);
                  break;
               case 109:
                  if (curChar == 99)
                     jjCheckNAdd(108);
                  break;
               case 110:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 110)
                     jjCheckNAdd(85);
                  break;
               case 112:
                  if (curChar == 116)
                     jjCheckNAdd(65);
                  break;
               case 113:
                  if (curChar == 102)
                     jjAddStates(84, 86);
                  break;
               case 114:
                  if (curChar == 120)
                     jjCheckNAdd(60);
                  break;
               case 115:
               case 137:
                  if (curChar == 97)
                     jjCheckNAdd(114);
                  break;
               case 116:
                  if (curChar == 101)
                     jjCheckNAdd(60);
                  break;
               case 117:
                  if (curChar == 108)
                     jjCheckNAdd(116);
                  break;
               case 118:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
               case 131:
               case 209:
               case 230:
               case 265:
                  if (curChar == 116)
                     jjCheckNAdd(59);
                  break;
               case 120:
                  if (curChar == 103)
                     jjCheckNAddTwoStates(121, 126);
                  break;
               case 121:
                  if (curChar == 111)
                     jjCheckNAdd(60);
                  break;
               case 122:
                  if (curChar == 114)
                     jjCheckNAdd(60);
                  break;
               case 123:
               case 197:
                  if (curChar == 101)
                     jjCheckNAdd(122);
                  break;
               case 124:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 104)
                     jjAddStates(87, 89);
                  break;
               case 132:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
               case 187:
               case 234:
               case 245:
               case 303:
                  if (curChar == 112)
                     jjCheckNAdd(85);
                  break;
               case 134:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 105)
                     jjCheckNAddStates(90, 100);
                  break;
               case 139:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 109)
                     jjCheckNAdd(60);
                  break;
               case 142:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 102)
                     jjCheckNAdd(121);
                  break;
               case 144:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
               case 313:
                  if (curChar == 112)
                     jjCheckNAdd(59);
                  break;
               case 147:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
               case 238:
               case 294:
                  if (curChar == 101)
                     jjCheckNAdd(59);
                  break;
               case 149:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 152:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 99)
                     jjCheckNAdd(60);
                  break;
               case 156:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 159:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 99)
                     jjCheckNAdd(85);
                  break;
               case 163:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 166:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 122)
                     jjCheckNAdd(60);
                  break;
               case 170:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 173:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 109)
                     jjAddStates(101, 108);
                  break;
               case 177:
                  if (curChar == 116)
                     jjCheckNAdd(121);
                  break;
               case 178:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 182:
                  if (curChar == 101)
                     jjCheckNAdd(140);
                  break;
               case 183:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 114)
                     jjCheckNAdd(59);
                  break;
               case 186:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 188:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if (curChar == 113)
                     jjCheckNAdd(59);
                  break;
               case 191:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 116)
                     jjCheckNAdd(116);
                  break;
               case 193:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 198:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if (curChar == 110)
                     jjAddStates(109, 111);
                  break;
               case 206:
               case 253:
                  if (curChar == 119)
                     jjCheckNAdd(85);
                  break;
               case 207:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 210:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if (curChar == 112)
                     jjAddStates(112, 115);
                  break;
               case 212:
                  if (curChar == 111)
                     jjCheckNAdd(59);
                  break;
               case 213:
                  if (curChar == 101)
                     jjCheckNAdd(85);
                  break;
               case 214:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 107)
                     jjCheckNAdd(60);
                  break;
               case 216:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 114)
                     jjCheckNAdd(121);
                  break;
               case 219:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if (curChar == 115)
                     jjAddStates(116, 123);
                  break;
               case 225:
                  if (curChar == 99)
                     jjCheckNAdd(116);
                  break;
               case 226:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 231:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
               case 276:
                  if (curChar == 105)
                     jjCheckNAdd(59);
                  break;
               case 235:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if (curChar == 109)
                     jjCheckNAdd(59);
                  break;
               case 237:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 239:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 242:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 246:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 250:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 254:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if (curChar == 116)
                     jjCheckNAddStates(124, 131);
                  break;
               case 257:
                  if (curChar == 103)
                     jjCheckNAdd(60);
                  break;
               case 258:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if (curChar == 108)
                     jjCheckNAdd(60);
                  break;
               case 260:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 261:
                  if (curChar == 101)
                     jjCheckNAdd(108);
                  break;
               case 262:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 266:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 103)
                     jjCheckNAdd(116);
                  break;
               case 268:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 273:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 281:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if (curChar == 118)
                     jjAddStates(132, 133);
                  break;
               case 283:
                  if (curChar == 105)
                     jjCheckNAdd(60);
                  break;
               case 284:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 285:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 287:
                  if (curChar == 101)
                     jjCheckNAdd(114);
                  break;
               case 288:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 291:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if (curChar == 120)
                     jjAddStates(134, 136);
                  break;
               case 295:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 296:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 298:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 299:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 300:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 301:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 302:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 304:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 305:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 306:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 305;
                  break;
               case 308:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 309:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 310:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 311:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 312:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 314:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 313;
                  break;
               case 315:
                  if (curChar == 122)
                     jjAddStates(137, 138);
                  break;
               case 327:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(64, 69);
                  break;
               case 328:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(328, 329);
                  break;
               case 330:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(330, 331);
                  break;
               case 332:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(333, 334);
                  break;
               case 333:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(333, 334);
                  break;
               case 334:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 335:
                  if (curChar != 95)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(336, 334);
                  break;
               case 336:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(336, 334);
                  break;
               case 339:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(139, 140);
                  break;
               case 347:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(141, 142);
                  break;
               case 352:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(143, 144);
                  break;
               case 355:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(355, 17);
                  break;
               case 362:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(145, 146);
                  break;
               case 367:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(147, 148);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(64, 69);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(40, 43);
                  break;
               case 9:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 40)
                     kind = 40;
                  break;
               case 13:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 16:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 41)
                     kind = 41;
                  break;
               case 28:
               case 30:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(37, 39);
                  break;
               case 33:
               case 35:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(34, 36);
                  break;
               case 38:
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(46, 48);
                  break;
               case 47:
               case 49:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(52, 54);
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(61, 58);
                  break;
               case 328:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(328, 329);
                  break;
               case 330:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(330, 331);
                  break;
               case 332:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(333, 334);
                  break;
               case 333:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(333, 334);
                  break;
               case 334:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 39)
                     kind = 39;
                  break;
               case 336:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(336, 334);
                  break;
               case 355:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(355, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 370 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   358, 359, 360, 366, 367, 332, 335, 337, 342, 350, 56, 58, 64, 79, 82, 84, 
   88, 58, 89, 97, 103, 113, 120, 127, 136, 176, 205, 211, 224, 256, 282, 293, 
   315, 326, 33, 34, 36, 28, 29, 31, 1, 2, 6, 4, 9, 12, 38, 39, 
   43, 47, 48, 52, 56, 57, 58, 328, 329, 330, 331, 343, 351, 352, 344, 345, 
   328, 329, 330, 331, 355, 17, 25, 26, 91, 93, 95, 96, 98, 100, 102, 105, 
   107, 110, 111, 112, 115, 118, 119, 130, 132, 135, 137, 139, 140, 142, 144, 145, 
   147, 154, 161, 168, 175, 180, 181, 184, 186, 189, 191, 196, 204, 207, 208, 210, 
   212, 214, 217, 223, 229, 232, 233, 235, 237, 244, 252, 255, 258, 260, 264, 266, 
   275, 276, 106, 281, 286, 292, 302, 312, 314, 320, 325, 340, 341, 348, 349, 353, 
   354, 363, 364, 368, 369, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\50", "\51", "\54", "\56", 
"\77", "\72\55", "\55\76", "\75", "\43", "\43\43", "\133", "\135", "\174", "\50\52", 
"\52\51", "\100", "\136\136", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1ffffffffff01L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[370];
private final int[] jjstateSet = new int[740];
protected char curChar;
/** Constructor. */
public RIFParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public RIFParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 370; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
