/**
 * Copyright (c) 2013, Institute of Information Systems (Sven Groppe and contributors of LUPOSDATE), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* Generated By:JavaCC: Do not edit this line. RIFParser.java */
package lupos.rif.generated.parser;

import lupos.rif.generated.syntaxtree.*;


public class RIFParser implements RIFParserConstants {

/* Grammatik */
/* Regelsprache */
/* Obereinheit */
  final public CompilationUnit CompilationUnit() throws ParseException {
  // --- JTB generated node declarations ---
  RIFDocument n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
    n0 = RIFDocument();
    n2 = jj_consume_token(0);
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
    {if (true) return new CompilationUnit(n0, n1);}
    throw new Error("Missing return statement in function");
  }

/* Umschlieï¿½t jedes Dokument */
  final public RIFDocument RIFDocument() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  RIFBase n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  RIFPrefix n7 = null;
  NodeListOptional n8 = new NodeListOptional();
  RIFImport n9 = null;
  NodeOptional n10 = new NodeOptional();
  RIFConclusion n11 = null;
  NodeOptional n12 = new NodeOptional();
  RIFGroup n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
    n1 = jj_consume_token(DOCUMENT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      n5 = RIFBase();
      n4.addNode(n5);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREFIX:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n7 = RIFPrefix();
      n6.addNode(n7);
    }
    n6.nodes.trimToSize();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n9 = RIFImport();
      n8.addNode(n9);
    }
    n8.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONC:
      n11 = RIFConclusion();
      n10.addNode(n11);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      n13 = RIFGroup();
      n12.addNode(n13);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    n15 = jj_consume_token(RPAREN);
    n14 = JTBToolkit.makeNodeToken(n15);
    {if (true) return new RIFDocument(n0, n2, n4, n6, n8, n10, n12, n14);}
    throw new Error("Missing return statement in function");
  }

/* Conclusion */
  final public RIFConclusion RIFConclusion() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  RIFFormula n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(CONC);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = RIFFormula();
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new RIFConclusion(n0, n2, n4, n5);}
    throw new Error("Missing return statement in function");
  }

/* TODO */
  final public RIFBase RIFBase() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  RIFQuotedURIref n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(BASE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = RIFQuotedURIref();
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new RIFBase(n0, n2, n4, n5);}
    throw new Error("Missing return statement in function");
  }

/* Namespace Definitionen */
  final public RIFPrefix RIFPrefix() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  RIFNCName n4 = null;
  RIFQuotedURIref n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(PREFIX);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = RIFNCName();
    n5 = RIFQuotedURIref();
    n7 = jj_consume_token(RPAREN);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new RIFPrefix(n0, n2, n4, n5, n6);}
    throw new Error("Missing return statement in function");
  }

/* TODO */
  final public RIFImport RIFImport() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  RIFQuotedURIref n4 = null;
  NodeOptional n5 = new NodeOptional();
  RIFQuotedURIref n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
    n1 = jj_consume_token(IMPORT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = RIFQuotedURIref();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_URIref:
      n6 = RIFQuotedURIref();
      n5.addNode(n6);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
    n7 = JTBToolkit.makeNodeToken(n8);
    {if (true) return new RIFImport(n0, n2, n4, n5, n7);}
    throw new Error("Missing return statement in function");
  }

/* Gruppierung von Regeln oder Gruppen */
  final public RIFGroup RIFGroup() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeChoice n5 = null;
  RIFRule n6 = null;
  RIFGroup n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    n1 = jj_consume_token(GROUP);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
      case GROUP:
      case FORALL:
      case AND:
      case EXTERNAL:
      case LIST:
      case Q_URIref:
      case QNAME:
      case INTEGER_10:
      case FLOATING_POINT:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERALLONG1:
      case STRING_LITERALLONG2:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
      case FORALL:
      case AND:
      case EXTERNAL:
      case LIST:
      case Q_URIref:
      case QNAME:
      case INTEGER_10:
      case FLOATING_POINT:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERALLONG1:
      case STRING_LITERALLONG2:
        n6 = RIFRule();
        n5 = new NodeChoice(n6, 0, 2);
        break;
      case GROUP:
        n7 = RIFGroup();
        n5 = new NodeChoice(n7, 1, 2);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n4.addNode(n5);
    }
    n4.nodes.trimToSize();
    n9 = jj_consume_token(RPAREN);
    n8 = JTBToolkit.makeNodeToken(n9);
    {if (true) return new RIFGroup(n0, n2, n4, n8);}
    throw new Error("Missing return statement in function");
  }

/* Eine Regel */
  final public RIFRule RIFRule() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeList n4 = new NodeList();
  RIFVar n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  RIFClause n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  RIFClause n11 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORALL:
      n1 = new NodeSequence(5);
      n3 = jj_consume_token(FORALL);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      label_4:
      while (true) {
        n5 = RIFVar();
        n4.addNode(n5);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTION:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
      }
      n4.nodes.trimToSize();
      n1.addNode(n4);
      n7 = jj_consume_token(LPAREN);
      n6 = JTBToolkit.makeNodeToken(n7);
      n1.addNode(n6);
      n8 = RIFClause();
      n1.addNode(n8);
      n10 = jj_consume_token(RPAREN);
      n9 = JTBToolkit.makeNodeToken(n10);
      n1.addNode(n9);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case QUESTION:
    case AND:
    case EXTERNAL:
    case LIST:
    case Q_URIref:
    case QNAME:
    case INTEGER_10:
    case FLOATING_POINT:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERALLONG1:
    case STRING_LITERALLONG2:
      n11 = RIFClause();
      n0 = new NodeChoice(n11, 1, 2);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new RIFRule(n0);}
    throw new Error("Missing return statement in function");
  }

/* Eine Klausel, entweder atomare Aussage bzw. Konjunktion von atomaren Aussagen oder Implikation */
  final public RIFClause RIFClause() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  RIFAtomic n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  RIFAtomic n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeOptional n11 = new NodeOptional();
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  RIFFormula n15 = null;
  NodeListOptional n16 = null;
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  RIFFormula n20 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
    case EXTERNAL:
    case LIST:
    case Q_URIref:
    case QNAME:
    case INTEGER_10:
    case FLOATING_POINT:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERALLONG1:
    case STRING_LITERALLONG2:
      n1 = RIFAtomic();
        n0 = new NodeChoice(n1, 0, 2);
      break;
    case AND:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(AND);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n6 = jj_consume_token(LPAREN);
        n5 = JTBToolkit.makeNodeToken(n6);
        n2.addNode(n5);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTION:
        case EXTERNAL:
        case LIST:
        case Q_URIref:
        case QNAME:
        case INTEGER_10:
        case FLOATING_POINT:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERALLONG1:
        case STRING_LITERALLONG2:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        n8 = RIFAtomic();
          n7.addNode(n8);
      }
        n7.nodes.trimToSize();
        n2.addNode(n7);
      n10 = jj_consume_token(RPAREN);
        n9 = JTBToolkit.makeNodeToken(n10);
        n2.addNode(n9);
        n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPL:
      n16 = new NodeListOptional();
      n12 = new NodeSequence(3);
      n14 = jj_consume_token(IMPL);
      n13 = JTBToolkit.makeNodeToken(n14);
      n12.addNode(n13);
      n15 = RIFFormula();
      n12.addNode(n15);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        n17 = new NodeSequence(2);
        n19 = jj_consume_token(NOT);
        n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
        n20 = RIFFormula();
        n17.addNode(n20);
        n16.addNode(n17);
      }
      n16.nodes.trimToSize();
      n12.addNode(n16);
      n11.addNode(n12);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    {if (true) return new RIFClause(n0, n11);}
    throw new Error("Missing return statement in function");
  }

/* Condition Language */
/* Formel fï¿½r Regelkï¿½rper (Rechte Seite einer Implikation) */
  final public RIFFormula RIFFormula() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  RIFFormula n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeListOptional n15 = new NodeListOptional();
  RIFFormula n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeList n22 = new NodeList();
  RIFVar n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  RIFFormula n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  RIFAtomic n29 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      n1 = new NodeSequence(4);
      n3 = jj_consume_token(AND);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n5 = jj_consume_token(LPAREN);
      n4 = JTBToolkit.makeNodeToken(n5);
      n1.addNode(n4);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTION:
        case AND:
        case OR:
        case EXTERNAL:
        case EXISTS:
        case LIST:
        case Q_URIref:
        case QNAME:
        case INTEGER_10:
        case FLOATING_POINT:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERALLONG1:
        case STRING_LITERALLONG2:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        n7 = RIFFormula();
        n6.addNode(n7);
      }
      n6.nodes.trimToSize();
      n1.addNode(n6);
      n9 = jj_consume_token(RPAREN);
      n8 = JTBToolkit.makeNodeToken(n9);
      n1.addNode(n8);
      n0 = new NodeChoice(n1, 0, 4);
      break;
    case OR:
      n10 = new NodeSequence(4);
      n12 = jj_consume_token(OR);
      n11 = JTBToolkit.makeNodeToken(n12);
      n10.addNode(n11);
      n14 = jj_consume_token(LPAREN);
      n13 = JTBToolkit.makeNodeToken(n14);
      n10.addNode(n13);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTION:
        case AND:
        case OR:
        case EXTERNAL:
        case EXISTS:
        case LIST:
        case Q_URIref:
        case QNAME:
        case INTEGER_10:
        case FLOATING_POINT:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERALLONG1:
        case STRING_LITERALLONG2:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        n16 = RIFFormula();
        n15.addNode(n16);
      }
      n15.nodes.trimToSize();
      n10.addNode(n15);
      n18 = jj_consume_token(RPAREN);
      n17 = JTBToolkit.makeNodeToken(n18);
      n10.addNode(n17);
      n0 = new NodeChoice(n10, 1, 4);
      break;
    case EXISTS:
      n19 = new NodeSequence(5);
      n21 = jj_consume_token(EXISTS);
      n20 = JTBToolkit.makeNodeToken(n21);
      n19.addNode(n20);
      label_9:
      while (true) {
        n23 = RIFVar();
        n22.addNode(n23);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTION:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
      }
      n22.nodes.trimToSize();
      n19.addNode(n22);
      n25 = jj_consume_token(LPAREN);
      n24 = JTBToolkit.makeNodeToken(n25);
      n19.addNode(n24);
      n26 = RIFFormula();
      n19.addNode(n26);
      n28 = jj_consume_token(RPAREN);
      n27 = JTBToolkit.makeNodeToken(n28);
      n19.addNode(n27);
      n0 = new NodeChoice(n19, 2, 4);
      break;
    case QUESTION:
    case EXTERNAL:
    case LIST:
    case Q_URIref:
    case QNAME:
    case INTEGER_10:
    case FLOATING_POINT:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERALLONG1:
    case STRING_LITERALLONG2:
      n29 = RIFAtomic();
      n0 = new NodeChoice(n29, 3, 4);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new RIFFormula(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RIFAtomic RIFAtomic() throws ParseException {
  // --- JTB generated node declarations ---
  RIFTerm n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  RIFTerm n11 = null;
  RIFFrame n12 = null;
    n0 = RIFTerm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case R:
    case RR:
    case LBRACK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case R:
      case RR:
          n3 = new NodeSequence(2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          n6 = jj_consume_token(EQUAL);
              n5 = JTBToolkit.makeNodeToken(n6);
              n4 = new NodeChoice(n5, 0, 3);
          break;
        case R:
          n8 = jj_consume_token(R);
              n7 = JTBToolkit.makeNodeToken(n8);
              n4 = new NodeChoice(n7, 1, 3);
          break;
        case RR:
          n10 = jj_consume_token(RR);
              n9 = JTBToolkit.makeNodeToken(n10);
              n4 = new NodeChoice(n9, 2, 3);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          n3.addNode(n4);
        n11 = RIFTerm();
          n3.addNode(n11);
        n2 = new NodeChoice(n3, 0, 2);
        break;
      case LBRACK:
        n12 = RIFFrame();
        n2 = new NodeChoice(n12, 1, 2);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n1.addNode(n2);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return new RIFAtomic(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public RIFUniterm RIFUniterm() throws ParseException {
  // --- JTB generated node declarations ---
  RIFVarOrURI n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeChoice n4 = null;
  NodeSequence n5 = null;
  RIFNCName n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  RIFTerm n9 = null;
  RIFTerm n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    n0 = RIFVarOrURI();
    n2 = jj_consume_token(LPAREN);
    n1 = JTBToolkit.makeNodeToken(n2);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
      case EXTERNAL:
      case LIST:
      case Q_URIref:
      case QNAME:
      case NCNAME:
      case INTEGER_10:
      case FLOATING_POINT:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERALLONG1:
      case STRING_LITERALLONG2:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      if (jj_2_1(2)) {
        n5 = new NodeSequence(3);
        n6 = RIFNCName();
        n5.addNode(n6);
        n8 = jj_consume_token(TO);
        n7 = JTBToolkit.makeNodeToken(n8);
        n5.addNode(n7);
        n9 = RIFTerm();
        n5.addNode(n9);
        n4 = new NodeChoice(n5, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTION:
        case EXTERNAL:
        case LIST:
        case Q_URIref:
        case QNAME:
        case INTEGER_10:
        case FLOATING_POINT:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERALLONG1:
        case STRING_LITERALLONG2:
          n10 = RIFTerm();
        n4 = new NodeChoice(n10, 1, 2);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n3.addNode(n4);
    }
    n3.nodes.trimToSize();
    n12 = jj_consume_token(RPAREN);
    n11 = JTBToolkit.makeNodeToken(n12);
    {if (true) return new RIFUniterm(n0, n1, n3, n11);}
    throw new Error("Missing return statement in function");
  }

  final public RIFFrame RIFFrame() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  RIFTerm n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  RIFTerm n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    n1 = jj_consume_token(LBRACK);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
      case EXTERNAL:
      case LIST:
      case Q_URIref:
      case QNAME:
      case INTEGER_10:
      case FLOATING_POINT:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERALLONG1:
      case STRING_LITERALLONG2:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      n3 = new NodeSequence(3);
      n4 = RIFTerm();
      n3.addNode(n4);
      n6 = jj_consume_token(TO);
      n5 = JTBToolkit.makeNodeToken(n6);
      n3.addNode(n5);
      n7 = RIFTerm();
      n3.addNode(n7);
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    n9 = jj_consume_token(RBRACK);
    n8 = JTBToolkit.makeNodeToken(n9);
    {if (true) return new RIFFrame(n0, n2, n8);}
    throw new Error("Missing return statement in function");
  }

  final public RIFTerm RIFTerm() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  RIFUniterm n1 = null;
  RIFRDFLiteral n2 = null;
  RIFNumericLiteral n3 = null;
  RIFVar n4 = null;
  RIFURI n5 = null;
  RIFExternal n6 = null;
  RIFList n7 = null;
    if (jj_2_2(3)) {
      n1 = RIFUniterm();
      n0 = new NodeChoice(n1, 0, 7);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERALLONG1:
      case STRING_LITERALLONG2:
        n2 = RIFRDFLiteral();
      n0 = new NodeChoice(n2, 1, 7);
        break;
      case INTEGER_10:
      case FLOATING_POINT:
        n3 = RIFNumericLiteral();
      n0 = new NodeChoice(n3, 2, 7);
        break;
      case QUESTION:
        n4 = RIFVar();
      n0 = new NodeChoice(n4, 3, 7);
        break;
      case Q_URIref:
      case QNAME:
        n5 = RIFURI();
      n0 = new NodeChoice(n5, 4, 7);
        break;
      case EXTERNAL:
        n6 = RIFExternal();
      n0 = new NodeChoice(n6, 5, 7);
        break;
      case LIST:
        n7 = RIFList();
      n0 = new NodeChoice(n7, 6, 7);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new RIFTerm(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RIFExternal RIFExternal() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  RIFUniterm n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(EXTERNAL);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = RIFUniterm();
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new RIFExternal(n0, n2, n4, n5);}
    throw new Error("Missing return statement in function");
  }

  final public RIFList RIFList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeList n8 = new NodeList();
  RIFTerm n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  RIFTerm n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
    n1 = jj_consume_token(LIST);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RPAREN:
      n6 = jj_consume_token(RPAREN);
        n5 = JTBToolkit.makeNodeToken(n6);
        n4 = new NodeChoice(n5, 0, 2);
      break;
    case QUESTION:
    case EXTERNAL:
    case LIST:
    case Q_URIref:
    case QNAME:
    case INTEGER_10:
    case FLOATING_POINT:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERALLONG1:
    case STRING_LITERALLONG2:
        n7 = new NodeSequence(3);
      label_12:
      while (true) {
        n9 = RIFTerm();
          n8.addNode(n9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTION:
        case EXTERNAL:
        case LIST:
        case Q_URIref:
        case QNAME:
        case INTEGER_10:
        case FLOATING_POINT:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERALLONG1:
        case STRING_LITERALLONG2:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_12;
        }
      }
        n8.nodes.trimToSize();
        n7.addNode(n8);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
          n11 = new NodeSequence(2);
        n13 = jj_consume_token(S);
          n12 = JTBToolkit.makeNodeToken(n13);
          n11.addNode(n12);
        n14 = RIFTerm();
          n11.addNode(n14);
          n10.addNode(n11);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
        n7.addNode(n10);
      n16 = jj_consume_token(RPAREN);
        n15 = JTBToolkit.makeNodeToken(n16);
        n7.addNode(n15);
        n4 = new NodeChoice(n7, 1, 2);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new RIFList(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

/* Terminale */
  final public RIFRDFLiteral RIFRDFLiteral() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  RIFTypedLiteral n1 = null;
  RIFLiteralWithLangTag n2 = null;
  RIFString n3 = null;
    if (jj_2_3(2147483647)) {
      n1 = RIFTypedLiteral();
      n0 = new NodeChoice(n1, 0, 3);
    } else if (jj_2_4(2147483647)) {
      n2 = RIFLiteralWithLangTag();
      n0 = new NodeChoice(n2, 1, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERALLONG1:
      case STRING_LITERALLONG2:
        n3 = RIFString();
      n0 = new NodeChoice(n3, 2, 3);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new RIFRDFLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

/* z.b. 'jens'^^xsd:string */
  final public RIFTypedLiteral RIFTypedLiteral() throws ParseException {
  // --- JTB generated node declarations ---
  RIFString n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  RIFURI n3 = null;
    n0 = RIFString();
    n2 = jj_consume_token(H);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = RIFURI();
    {if (true) return new RIFTypedLiteral(n0, n1, n3);}
    throw new Error("Missing return statement in function");
  }

/* z.B. 'Zeichenkette'@de */
  final public RIFLiteralWithLangTag RIFLiteralWithLangTag() throws ParseException {
  // --- JTB generated node declarations ---
  RIFString n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
    n0 = RIFString();
    n2 = jj_consume_token(LANGTAG);
    n1 = JTBToolkit.makeNodeToken(n2);
    {if (true) return new RIFLiteralWithLangTag(n0, n1);}
    throw new Error("Missing return statement in function");
  }

/* eine Literal aus einer Zahl */
  final public RIFNumericLiteral RIFNumericLiteral() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  RIFInteger n1 = null;
  RIFFloatingPoint n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_10:
      n1 = RIFInteger();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case FLOATING_POINT:
      n2 = RIFFloatingPoint();
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new RIFNumericLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

/* Eine Zeichenkette */
  final public RIFString RIFString() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL1:
      n2 = jj_consume_token(STRING_LITERAL1);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 4);
      break;
    case STRING_LITERAL2:
      n4 = jj_consume_token(STRING_LITERAL2);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 4);
      break;
    case STRING_LITERALLONG1:
      n6 = jj_consume_token(STRING_LITERALLONG1);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 4);
      break;
    case STRING_LITERALLONG2:
      n8 = jj_consume_token(STRING_LITERALLONG2);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 4);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new RIFString(n0);}
    throw new Error("Missing return statement in function");
  }

/* Variable oder Uri */
  final public RIFVarOrURI RIFVarOrURI() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  RIFVar n1 = null;
  RIFURI n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
      n1 = RIFVar();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case Q_URIref:
    case QNAME:
      n2 = RIFURI();
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new RIFVarOrURI(n0);}
    throw new Error("Missing return statement in function");
  }

/* eine Uri */
  final public RIFURI RIFURI() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  RIFQuotedURIref n1 = null;
  RIFQName n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_URIref:
      n1 = RIFQuotedURIref();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case QNAME:
      n2 = RIFQName();
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new RIFURI(n0);}
    throw new Error("Missing return statement in function");
  }

/* Qualified Name */
  final public RIFQName RIFQName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(QNAME);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new RIFQName(n0);}
    throw new Error("Missing return statement in function");
  }

/* Ganzzahl */
  final public RIFInteger RIFInteger() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(INTEGER_10);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new RIFInteger(n0);}
    throw new Error("Missing return statement in function");
  }

/* Flieï¿½kommazahl */
  final public RIFFloatingPoint RIFFloatingPoint() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(FLOATING_POINT);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new RIFFloatingPoint(n0);}
    throw new Error("Missing return statement in function");
  }

/* Variable */
  final public RIFVar RIFVar() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  RIFNCName n2 = null;
    n1 = jj_consume_token(QUESTION);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RIFNCName();
    {if (true) return new RIFVar(n0, n2);}
    throw new Error("Missing return statement in function");
  }

/* einfacher Name fï¿½r Variablen */
  final public RIFNCName RIFNCName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(NCNAME);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new RIFNCName(n0);}
    throw new Error("Missing return statement in function");
  }

/* URI wie <www.google.de> */
  final public RIFQuotedURIref RIFQuotedURIref() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(Q_URIref);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new RIFQuotedURIref(n0);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(Q_URIref)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    if (jj_scan_token(LANGTAG)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(EXTERNAL)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    if (jj_scan_token(H)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(NCNAME)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(TO)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(STRING_LITERALLONG2)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(STRING_LITERALLONG1)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(STRING_LITERAL2)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(STRING_LITERAL1)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(FLOATING_POINT)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(INTEGER_10)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(QNAME)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RIFParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000000,0x20000000,0x40000000,0x0,0x4000000,0x0,0x8c001000,0x8c001000,0x1000,0x88001000,0x1000,0x80001000,0x0,0x2000,0x80001000,0x80001000,0x1000,0x80001000,0x38000,0x78000,0x78000,0x1000,0x1000,0x1000,0x1000,0x1000,0x100000,0x1200,0x0,0x0,0x0,0x1000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x10,0x0,0x40,0x3f14a,0x3f14a,0x0,0x3f14a,0x3f14a,0x3f14a,0x20,0x0,0x3f14f,0x3f14f,0x0,0x3f14f,0x0,0x0,0x0,0x3f54a,0x3f14a,0x3f14a,0x3f14a,0x3f14a,0x0,0x3f14a,0x3c000,0x3000,0x3c000,0x140,0x140,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RIFParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RIFParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RIFParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RIFParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RIFParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RIFParser(RIFParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RIFParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                        }

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}
