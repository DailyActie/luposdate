/**
 * Copyright (c) 2007-2015, Institute of Information Systems (Sven Groppe and contributors of LUPOSDATE), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* Generated By:JavaCC: Do not edit this line. RIFParserConstants.java */
package lupos.rif.generated.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 *
 * @author groppe
 * @version $Id: $Id
 */
public interface RIFParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WS = 7;
  /** RegularExpression Id. */
  int LPAREN = 8;
  /** RegularExpression Id. */
  int RPAREN = 9;
  /** RegularExpression Id. */
  int COMMA = 10;
  /** RegularExpression Id. */
  int DOT = 11;
  /** RegularExpression Id. */
  int QUESTION = 12;
  /** RegularExpression Id. */
  int IMPL = 13;
  /** RegularExpression Id. */
  int TO = 14;
  /** RegularExpression Id. */
  int EQUAL = 15;
  /** RegularExpression Id. */
  int R = 16;
  /** RegularExpression Id. */
  int RR = 17;
  /** RegularExpression Id. */
  int LBRACK = 18;
  /** RegularExpression Id. */
  int RBRACK = 19;
  /** RegularExpression Id. */
  int S = 20;
  /** RegularExpression Id. */
  int LMETA = 21;
  /** RegularExpression Id. */
  int RMETA = 22;
  /** RegularExpression Id. */
  int AT = 23;
  /** RegularExpression Id. */
  int H = 24;
  /** RegularExpression Id. */
  int DOCUMENT = 25;
  /** RegularExpression Id. */
  int GROUP = 26;
  /** RegularExpression Id. */
  int FORALL = 27;
  /** RegularExpression Id. */
  int BASE = 28;
  /** RegularExpression Id. */
  int PREFIX = 29;
  /** RegularExpression Id. */
  int IMPORT = 30;
  /** RegularExpression Id. */
  int AND = 31;
  /** RegularExpression Id. */
  int OR = 32;
  /** RegularExpression Id. */
  int EXTERNAL = 33;
  /** RegularExpression Id. */
  int EXISTS = 34;
  /** RegularExpression Id. */
  int LIST = 35;
  /** RegularExpression Id. */
  int CONC = 36;
  /** RegularExpression Id. */
  int NOT = 37;
  /** RegularExpression Id. */
  int Q_URIref = 38;
  /** RegularExpression Id. */
  int QNAME_NS = 39;
  /** RegularExpression Id. */
  int QNAME = 40;
  /** RegularExpression Id. */
  int BNODE_LABEL = 41;
  /** RegularExpression Id. */
  int NCNAME = 42;
  /** RegularExpression Id. */
  int LANGTAG = 43;
  /** RegularExpression Id. */
  int INTEGER_10 = 44;
  /** RegularExpression Id. */
  int FLOATING_POINT = 45;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 46;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 47;
  /** RegularExpression Id. */
  int STRING_LITERALLONG1 = 48;
  /** RegularExpression Id. */
  int STRING_LITERALLONG2 = 49;
  /** RegularExpression Id. */
  int A2ZN = 50;
  /** RegularExpression Id. */
  int A2Z = 51;
  /** RegularExpression Id. */
  int DIGITS = 52;
  /** RegularExpression Id. */
  int NCCHAR1 = 53;
  /** RegularExpression Id. */
  int NCCHAR_END = 54;
  /** RegularExpression Id. */
  int NCCHAR_END_WOUT = 55;
  /** RegularExpression Id. */
  int NCCHAR_FULL = 56;
  /** RegularExpression Id. */
  int NCNAME1 = 57;
  /** RegularExpression Id. */
  int NCNAME2 = 58;
  /** RegularExpression Id. */
  int NCNAME_PREFIX = 59;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "<WS>",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\".\"",
    "\"?\"",
    "\":-\"",
    "\"->\"",
    "\"=\"",
    "\"#\"",
    "\"##\"",
    "\"[\"",
    "\"]\"",
    "\"|\"",
    "\"(*\"",
    "\"*)\"",
    "\"@\"",
    "\"^^\"",
    "\"document\"",
    "\"group\"",
    "\"forall\"",
    "\"base\"",
    "\"prefix\"",
    "\"import\"",
    "\"and\"",
    "\"or\"",
    "\"external\"",
    "\"exists\"",
    "\"list\"",
    "\"conclusion\"",
    "\"not\"",
    "<Q_URIref>",
    "<QNAME_NS>",
    "<QNAME>",
    "<BNODE_LABEL>",
    "<NCNAME>",
    "<LANGTAG>",
    "<INTEGER_10>",
    "<FLOATING_POINT>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERALLONG1>",
    "<STRING_LITERALLONG2>",
    "<A2ZN>",
    "<A2Z>",
    "<DIGITS>",
    "<NCCHAR1>",
    "<NCCHAR_END>",
    "<NCCHAR_END_WOUT>",
    "<NCCHAR_FULL>",
    "<NCNAME1>",
    "<NCNAME2>",
    "<NCNAME_PREFIX>",
  };

}
