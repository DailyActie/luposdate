/* Generated By:JavaCC: Do not edit this line. RIFParserConstants.java */
package lupos.rif.generated.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RIFParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WS = 7;
  /** RegularExpression Id. */
  int LPAREN = 8;
  /** RegularExpression Id. */
  int RPAREN = 9;
  /** RegularExpression Id. */
  int COMMA = 10;
  /** RegularExpression Id. */
  int DOT = 11;
  /** RegularExpression Id. */
  int QUESTION = 12;
  /** RegularExpression Id. */
  int IMPL = 13;
  /** RegularExpression Id. */
  int TO = 14;
  /** RegularExpression Id. */
  int EQUAL = 15;
  /** RegularExpression Id. */
  int R = 16;
  /** RegularExpression Id. */
  int RR = 17;
  /** RegularExpression Id. */
  int LBRACK = 18;
  /** RegularExpression Id. */
  int RBRACK = 19;
  /** RegularExpression Id. */
  int S = 20;
  /** RegularExpression Id. */
  int LMETA = 21;
  /** RegularExpression Id. */
  int RMETA = 22;
  /** RegularExpression Id. */
  int AT = 23;
  /** RegularExpression Id. */
  int H = 24;
  /** RegularExpression Id. */
  int DOCUMENT = 25;
  /** RegularExpression Id. */
  int GROUP = 26;
  /** RegularExpression Id. */
  int FORALL = 27;
  /** RegularExpression Id. */
  int BASE = 28;
  /** RegularExpression Id. */
  int PREFIX = 29;
  /** RegularExpression Id. */
  int IMPORT = 30;
  /** RegularExpression Id. */
  int AND = 31;
  /** RegularExpression Id. */
  int OR = 32;
  /** RegularExpression Id. */
  int EXTERNAL = 33;
  /** RegularExpression Id. */
  int EXISTS = 34;
  /** RegularExpression Id. */
  int LIST = 35;
  /** RegularExpression Id. */
  int CONC = 36;
  /** RegularExpression Id. */
  int Q_URIref = 37;
  /** RegularExpression Id. */
  int QNAME_NS = 38;
  /** RegularExpression Id. */
  int QNAME = 39;
  /** RegularExpression Id. */
  int BNODE_LABEL = 40;
  /** RegularExpression Id. */
  int NCNAME = 41;
  /** RegularExpression Id. */
  int LANGTAG = 42;
  /** RegularExpression Id. */
  int INTEGER_10 = 43;
  /** RegularExpression Id. */
  int FLOATING_POINT = 44;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 45;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 46;
  /** RegularExpression Id. */
  int STRING_LITERALLONG1 = 47;
  /** RegularExpression Id. */
  int STRING_LITERALLONG2 = 48;
  /** RegularExpression Id. */
  int A2ZN = 49;
  /** RegularExpression Id. */
  int A2Z = 50;
  /** RegularExpression Id. */
  int DIGITS = 51;
  /** RegularExpression Id. */
  int NCCHAR1 = 52;
  /** RegularExpression Id. */
  int NCCHAR_END = 53;
  /** RegularExpression Id. */
  int NCCHAR_END_WOUT = 54;
  /** RegularExpression Id. */
  int NCCHAR_FULL = 55;
  /** RegularExpression Id. */
  int NCNAME1 = 56;
  /** RegularExpression Id. */
  int NCNAME2 = 57;
  /** RegularExpression Id. */
  int NCNAME_PREFIX = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "<WS>",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\".\"",
    "\"?\"",
    "\":-\"",
    "\"->\"",
    "\"=\"",
    "\"#\"",
    "\"##\"",
    "\"[\"",
    "\"]\"",
    "\"|\"",
    "\"(*\"",
    "\"*)\"",
    "\"@\"",
    "\"^^\"",
    "\"document\"",
    "\"group\"",
    "\"forall\"",
    "\"base\"",
    "\"prefix\"",
    "\"import\"",
    "\"and\"",
    "\"or\"",
    "\"external\"",
    "\"exists\"",
    "\"list\"",
    "\"conclusion\"",
    "<Q_URIref>",
    "<QNAME_NS>",
    "<QNAME>",
    "<BNODE_LABEL>",
    "<NCNAME>",
    "<LANGTAG>",
    "<INTEGER_10>",
    "<FLOATING_POINT>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERALLONG1>",
    "<STRING_LITERALLONG2>",
    "<A2ZN>",
    "<A2Z>",
    "<DIGITS>",
    "<NCCHAR1>",
    "<NCCHAR_END>",
    "<NCCHAR_END_WOUT>",
    "<NCCHAR_FULL>",
    "<NCNAME1>",
    "<NCNAME2>",
    "<NCNAME_PREFIX>",
  };

}
